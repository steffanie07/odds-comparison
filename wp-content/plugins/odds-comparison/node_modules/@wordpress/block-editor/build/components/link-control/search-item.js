"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.LinkControlSearchItem = void 0;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _icons = require("@wordpress/icons");

var _dom = require("@wordpress/dom");

var _url = require("@wordpress/url");

/**
 * WordPress dependencies
 */
const ICONS_MAP = {
  post: _icons.postList,
  page: _icons.page,
  post_tag: _icons.tag,
  category: _icons.category,
  attachment: _icons.file
};

function SearchItemIcon({
  isURL,
  suggestion
}) {
  let icon = null;

  if (isURL) {
    icon = _icons.globe;
  } else if (suggestion.type in ICONS_MAP) {
    icon = ICONS_MAP[suggestion.type];
  }

  if (icon) {
    return (0, _element.createElement)(_icons.Icon, {
      className: "block-editor-link-control__search-item-icon",
      icon: icon
    });
  }

  return null;
}

const LinkControlSearchItem = ({
  itemProps,
  suggestion,
  searchTerm,
  onClick,
  isURL = false,
  shouldShowType = false
}) => {
  const info = isURL ? (0, _i18n.__)('Press ENTER to add this link') : (0, _url.filterURLForDisplay)((0, _url.safeDecodeURI)(suggestion?.url), 24);
  return (0, _element.createElement)(_components.MenuItem, { ...itemProps,
    info: info,
    iconPosition: "left",
    icon: (0, _element.createElement)(SearchItemIcon, {
      suggestion: suggestion,
      isURL: isURL
    }),
    onClick: onClick,
    shortcut: shouldShowType && getVisualTypeName(suggestion),
    className: "block-editor-link-control__search-item"
  }, (0, _element.createElement)(_components.TextHighlight // The component expects a plain text string.
  , {
    text: (0, _dom.__unstableStripHTML)(suggestion.title),
    highlight: searchTerm
  }));
};

exports.LinkControlSearchItem = LinkControlSearchItem;

function getVisualTypeName(suggestion) {
  if (suggestion.isFrontPage) {
    return 'front page';
  } // Rename 'post_tag' to 'tag'. Ideally, the API would return the localised CPT or taxonomy label.


  return suggestion.type === 'post_tag' ? 'tag' : suggestion.type;
}

var _default = LinkControlSearchItem;
exports.default = _default;
//# sourceMappingURL=search-item.js.map