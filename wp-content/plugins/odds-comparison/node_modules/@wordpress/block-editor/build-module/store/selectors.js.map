{"version":3,"sources":["@wordpress/block-editor/src/store/selectors.js"],"names":["createSelector","getBlockType","getBlockTypes","getBlockVariations","hasBlockSupport","getPossibleBlockTransformations","parse","switchToBlockType","Platform","applyFilters","symbol","create","remove","toHTMLString","deprecated","mapRichTextSettings","orderBy","getBlockEditingMode","MILLISECONDS_PER_HOUR","MILLISECONDS_PER_DAY","MILLISECONDS_PER_WEEK","EMPTY_ARRAY","EMPTY_SET","Set","getBlockName","state","clientId","block","blocks","byClientId","get","socialLinkName","OS","name","attributes","service","isBlockValid","isValid","getBlockAttributes","getBlock","has","tree","__unstableGetBlockWithoutInnerBlocks","getBlocks","rootClientId","treeKey","areInnerBlocksControlled","innerBlocks","__unstableGetClientIdWithClientIdsTree","since","version","__unstableGetClientIdsTree","order","getBlockOrder","map","getClientIdsOfDescendants","clientIds","collectedIds","givenId","descendantId","push","getClientIdsWithDescendants","topLevelId","getGlobalBlockCount","blockName","length","reduce","accumulator","__experimentalGetGlobalBlocksByName","blockNames","Array","isArray","foundBlocks","filter","includes","getBlocksByClientId","getBlockNamesByClientId","Boolean","getBlockCount","getSelectionStart","selection","selectionStart","getSelectionEnd","selectionEnd","getBlockSelectionStart","getBlockSelectionEnd","getSelectedBlockCount","multiSelectedBlockCount","getMultiSelectedBlockClientIds","hasSelectedBlock","getSelectedBlockClientId","getSelectedBlock","getBlockRootClientId","parents","getBlockParents","ascending","current","reverse","getBlockParentsByBlockName","hasName","id","getBlockHierarchyRootClientId","parent","getLowestCommonAncestorWithSelectedBlock","selectedId","clientParents","selectedParents","lowestCommonAncestor","maxDepth","Math","min","index","getAdjacentBlockClientId","startClientId","modifier","undefined","getFirstMultiSelectedBlockClientId","getLastMultiSelectedBlockClientId","orderSet","indexOf","nextIndex","getPreviousBlockClientId","getNextBlockClientId","getSelectedBlocksInitialCaretPosition","initialPosition","getSelectedBlockClientIds","blockOrder","startIndex","endIndex","slice","getMultiSelectedBlocks","multiSelectedBlockClientIds","getDependants","selectedClientIds","isFirstMultiSelectedBlock","isBlockMultiSelected","isAncestorMultiSelected","ancestorClientId","isMultiSelected","getMultiSelectedBlocksStartClientId","getMultiSelectedBlocksEndClientId","__unstableIsFullySelected","selectionAnchor","selectionFocus","attributeKey","offset","__unstableIsSelectionCollapsed","__unstableSelectionHasUnmergeableBlock","some","blockType","merge","__unstableIsSelectionMergeable","isForward","anchorRootClientId","focusRootClientId","anchorIndex","focusIndex","targetBlockClientId","blockToMergeClientId","targetBlockName","targetBlockType","blockToMerge","blocksToMerge","__unstableGetSelectedBlocksWithPartialSelection","blockA","blockAType","blockB","blockBType","htmlA","htmlB","attributeDefinitionA","attributeDefinitionB","valueA","html","valueB","text","value","getBlockIndex","isBlockSelected","hasSelectedInnerBlock","deep","innerClientId","hasDraggedInnerBlock","isBlockBeingDragged","isBlockWithinSelection","hasMultiSelection","isMultiSelecting","isSelectionEnabled","getBlockMode","blocksMode","isTyping","isDraggingBlocks","draggedBlocks","getDraggedBlockClientIds","isAncestorBeingDragged","parentClientId","isCaretWithinFormattedText","getBlockInsertionPoint","insertionPoint","isBlockInsertionPointVisible","isValidTemplate","template","getTemplate","settings","getTemplateLock","templateLock","getBlockListSettings","checkAllowList","list","item","defaultResult","canInsertBlockTypeUnmemoized","allowedBlockTypes","getSettings","isBlockAllowedInEditor","isLocked","parentBlockListSettings","parentAllowedBlocks","allowedBlocks","hasParentAllowedBlock","blockAllowedParentBlocks","parentName","hasBlockAllowedParent","hasBlockAllowedAncestor","blockAllowedAncestorBlocks","ancestor","ancestors","canInsert","bind","canInsertBlockType","blockListSettings","blockEditingModes","canInsertBlocks","every","canRemoveBlock","lock","canRemoveBlocks","canMoveBlock","move","canMoveBlocks","canEditBlock","edit","canLockBlockType","nameOrType","canLockBlocks","getInsertUsage","preferences","insertUsage","canIncludeBlockTypeInInserter","getItemFromVariation","variation","variationId","time","count","icon","title","description","category","example","hasOwnProperty","initialAttributes","keywords","frecency","calculateFrecency","duration","Date","now","buildBlockTypeItem","buildScope","isDisabled","blockItemBase","inserterVariations","variations","utility","getInserterItems","blockParserTokenizer","buildReusableBlockInserterItem","reusableBlock","content","raw","rawBlockMatch","match","namespace","referencedBlockType","ref","syncedPatternInserterItems","getReusableBlocks","wp_pattern_sync_status","buildBlockTypeInserterItem","blockTypeInserterItems","items","isDefault","variationMapper","groupByType","core","noncore","type","startsWith","coreItems","nonCoreItems","sortedBlockTypes","getBlockTransformItems","normalizedBlocks","buildBlockTypeTransformItem","blockTypeTransformItems","itemsByName","Object","fromEntries","entries","possibleTransforms","hasInserterItems","hasBlockType","hasReusableBlock","getAllowedBlocks","blockTypes","__experimentalGetAllowedBlocks","alternative","getDirectInsertBlock","defaultBlock","directInsert","__experimentalGetDirectInsertBlock","checkAllowListRecursive","blocksQueue","shift","isAllowed","forEach","innerBlock","getUnsyncedPatterns","reusableBlocks","__experimentalReusableBlocks","categories","__experimentalGetParsedPattern","patternName","patterns","__experimentalBlockPatterns","unsyncedPatterns","pattern","find","__unstableSkipMigrationLogs","getAllAllowedPatterns","parsedPatterns","inserter","allowedPatterns","__experimentalGetAllowedPatterns","availableParsedPatterns","patternsAllowed","getPatternsByBlockTypes","normalizedBlockNames","filteredPatterns","__experimentalGetPatternsByBlockTypes","__experimentalGetPatternTransformItems","selectedBlockNames","from","getBehaviors","behaviors","isLastBlockChangePersistent","isPersistentChange","__experimentalGetBlockListSettingsForBlocks","blockListSettingsForBlocks","__experimentalGetReusableBlockTitle","__unstableIsLastBlockChangeIgnored","isIgnoredChange","__experimentalGetLastBlockAttributeChanges","lastBlockAttributesChange","isNavigationMode","editorMode","__unstableGetEditorMode","hasBlockMovingClientId","didAutomaticChange","automaticChangeStatus","isBlockHighlighted","highlightedBlock","controlledInnerBlocks","__experimentalGetActiveBlockIdByBlockNames","validBlockNames","selectedBlockClientId","entityAreaParents","wasBlockJustInserted","source","lastBlockInserted","isBlockVisible","blockVisibility","__unstableGetVisibleBlocks","visibleBlocks","keys","key","size","__unstableGetContentLockingParent","result","__unstableGetTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","__unstableHasActiveBlockOverlayActive","blockSupportDisable","shouldEnableIfUnselected","__unstableIsWithinBlockOverlay"],"mappings":"AAAA;AACA;AACA;AACA,OAAOA,cAAP,MAA2B,QAA3B;AAEA;AACA;AACA;;AACA,SACCC,YADD,EAECC,aAFD,EAGCC,kBAHD,EAICC,eAJD,EAKCC,+BALD,EAMCC,KAND,EAOCC,iBAPD,QAQO,mBARP;AASA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,YAAzB,QAA6C,sBAA7C;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAEA;AACA;AACA;;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,mBAAT,QAAoC,qBAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,MAAMC,qBAAqB,GAAG,OAAO,IAArC;AACA,MAAMC,oBAAoB,GAAG,KAAK,IAAL,GAAY,IAAzC;AACA,MAAMC,qBAAqB,GAAG,IAAI,EAAJ,GAAS,IAAT,GAAgB,IAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAG,EAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG,IAAIC,GAAJ,EAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,KAAvB,EAA8BC,QAA9B,EAAyC;AAC/C,QAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CAAd;AACA,QAAMK,cAAc,GAAG,kBAAvB;;AAEA,MAAKvB,QAAQ,CAACwB,EAAT,KAAgB,KAAhB,IAAyBL,KAAK,EAAEM,IAAP,KAAgBF,cAA9C,EAA+D;AAC9D,UAAMG,UAAU,GAAGT,KAAK,CAACG,MAAN,CAAaM,UAAb,CAAwBJ,GAAxB,CAA6BJ,QAA7B,CAAnB;AACA,UAAM;AAAES,MAAAA;AAAF,QAAcD,UAAd,aAAcA,UAAd,cAAcA,UAAd,GAA4B,EAAlC;AAEA,WAAOC,OAAO,GAAI,GAAGJ,cAAgB,IAAII,OAAS,EAApC,GAAwCJ,cAAtD;AACA;;AACD,SAAOJ,KAAK,GAAGA,KAAK,CAACM,IAAT,GAAgB,IAA5B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,YAAT,CAAuBX,KAAvB,EAA8BC,QAA9B,EAAyC;AAC/C,QAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CAAd;AACA,SAAO,CAAC,CAAEC,KAAH,IAAYA,KAAK,CAACU,OAAzB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6Bb,KAA7B,EAAoCC,QAApC,EAA+C;AACrD,QAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CAAd;;AACA,MAAK,CAAEC,KAAP,EAAe;AACd,WAAO,IAAP;AACA;;AAED,SAAOF,KAAK,CAACG,MAAN,CAAaM,UAAb,CAAwBJ,GAAxB,CAA6BJ,QAA7B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASa,QAAT,CAAmBd,KAAnB,EAA0BC,QAA1B,EAAqC;AAC3C,MAAK,CAAED,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBW,GAAxB,CAA6Bd,QAA7B,CAAP,EAAiD;AAChD,WAAO,IAAP;AACA;;AAED,SAAOD,KAAK,CAACG,MAAN,CAAaa,IAAb,CAAkBX,GAAlB,CAAuBJ,QAAvB,CAAP;AACA;AAED,OAAO,MAAMgB,oCAAoC,GAAG1C,cAAc,CACjE,CAAEyB,KAAF,EAASC,QAAT,KAAuB;AACtB,MAAK,CAAED,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBW,GAAxB,CAA6Bd,QAA7B,CAAP,EAAiD;AAChD,WAAO,IAAP;AACA;;AAED,SAAO,EACN,GAAGD,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CADG;AAENQ,IAAAA,UAAU,EAAEI,kBAAkB,CAAEb,KAAF,EAASC,QAAT;AAFxB,GAAP;AAIA,CAVgE,EAWjE,CAAED,KAAF,EAASC,QAAT,KAAuB,CACtBD,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CADsB,EAEtBD,KAAK,CAACG,MAAN,CAAaM,UAAb,CAAwBJ,GAAxB,CAA6BJ,QAA7B,CAFsB,CAX0C,CAA3D;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiB,SAAT,CAAoBlB,KAApB,EAA2BmB,YAA3B,EAA0C;AAChD,QAAMC,OAAO,GACZ,CAAED,YAAF,IAAkB,CAAEE,wBAAwB,CAAErB,KAAF,EAASmB,YAAT,CAA5C,GACGA,YAAY,IAAI,EADnB,GAEG,iBAAiBA,YAHrB;AAIA,SAAOnB,KAAK,CAACG,MAAN,CAAaa,IAAb,CAAkBX,GAAlB,CAAuBe,OAAvB,GAAkCE,WAAlC,IAAiD1B,WAAxD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM2B,sCAAsC,GAAGhD,cAAc,CACnE,CAAEyB,KAAF,EAASC,QAAT,KAAuB;AACtBZ,EAAAA,UAAU,CACT,8EADS,EAET;AACCmC,IAAAA,KAAK,EAAE,KADR;AAECC,IAAAA,OAAO,EAAE;AAFV,GAFS,CAAV;AAOA,SAAO;AACNxB,IAAAA,QADM;AAENqB,IAAAA,WAAW,EAAEI,0BAA0B,CAAE1B,KAAF,EAASC,QAAT;AAFjC,GAAP;AAIA,CAbkE,EAcjED,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,CAdsD,CAA7D;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMD,0BAA0B,GAAGnD,cAAc,CACvD,CAAEyB,KAAF,EAASmB,YAAY,GAAG,EAAxB,KAAgC;AAC/B9B,EAAAA,UAAU,CACT,kEADS,EAET;AACCmC,IAAAA,KAAK,EAAE,KADR;AAECC,IAAAA,OAAO,EAAE;AAFV,GAFS,CAAV;AAOA,SAAOG,aAAa,CAAE5B,KAAF,EAASmB,YAAT,CAAb,CAAqCU,GAArC,CAA4C5B,QAAF,IAChDsB,sCAAsC,CAAEvB,KAAF,EAASC,QAAT,CADhC,CAAP;AAGA,CAZsD,EAarDD,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,CAb0C,CAAjD;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMG,yBAAyB,GAAGvD,cAAc,CACtD,CAAEyB,KAAF,EAAS+B,SAAT,KAAwB;AACvB,QAAMC,YAAY,GAAG,EAArB;;AACA,OAAM,MAAMC,OAAZ,IAAuBF,SAAvB,EAAmC;AAClC,SAAM,MAAMG,YAAZ,IAA4BN,aAAa,CAAE5B,KAAF,EAASiC,OAAT,CAAzC,EAA8D;AAC7DD,MAAAA,YAAY,CAACG,IAAb,CACCD,YADD,EAEC,GAAGJ,yBAAyB,CAAE9B,KAAF,EAAS,CAAEkC,YAAF,CAAT,CAF7B;AAIA;AACD;;AACD,SAAOF,YAAP;AACA,CAZqD,EAapDhC,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,CAbyC,CAAhD;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMS,2BAA2B,GAAG7D,cAAc,CACtDyB,KAAF,IAAa;AACZ,QAAMgC,YAAY,GAAG,EAArB;;AACA,OAAM,MAAMK,UAAZ,IAA0BT,aAAa,CAAE5B,KAAF,CAAvC,EAAmD;AAClDgC,IAAAA,YAAY,CAACG,IAAb,CACCE,UADD,EAEC,GAAGP,yBAAyB,CAAE9B,KAAF,EAAS,CAAEqC,UAAF,CAAT,CAF7B;AAIA;;AACD,SAAOL,YAAP;AACA,CAVuD,EAWtDhC,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,CAX2C,CAAlD;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMW,mBAAmB,GAAG/D,cAAc,CAChD,CAAEyB,KAAF,EAASuC,SAAT,KAAwB;AACvB,QAAMR,SAAS,GAAGK,2BAA2B,CAAEpC,KAAF,CAA7C;;AACA,MAAK,CAAEuC,SAAP,EAAmB;AAClB,WAAOR,SAAS,CAACS,MAAjB;AACA;;AACD,SAAOT,SAAS,CAACU,MAAV,CAAkB,CAAEC,WAAF,EAAezC,QAAf,KAA6B;AACrD,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CAAd;AACA,WAAOC,KAAK,CAACM,IAAN,KAAe+B,SAAf,GAA2BG,WAAW,GAAG,CAAzC,GAA6CA,WAApD;AACA,GAHM,EAGJ,CAHI,CAAP;AAIA,CAV+C,EAW9C1C,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,EAAsB3B,KAAK,CAACG,MAAN,CAAaC,UAAnC,CAXmC,CAA1C;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMuC,mCAAmC,GAAGpE,cAAc,CAChE,CAAEyB,KAAF,EAASuC,SAAT,KAAwB;AACvB,MAAK,CAAEA,SAAP,EAAmB;AAClB,WAAO3C,WAAP;AACA;;AACD,QAAMgD,UAAU,GAAGC,KAAK,CAACC,OAAN,CAAeP,SAAf,IAChBA,SADgB,GAEhB,CAAEA,SAAF,CAFH;AAGA,QAAMR,SAAS,GAAGK,2BAA2B,CAAEpC,KAAF,CAA7C;AACA,QAAM+C,WAAW,GAAGhB,SAAS,CAACiB,MAAV,CAAoB/C,QAAF,IAAgB;AACrD,UAAMC,KAAK,GAAGF,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6BJ,QAA7B,CAAd;AACA,WAAO2C,UAAU,CAACK,QAAX,CAAqB/C,KAAK,CAACM,IAA3B,CAAP;AACA,GAHmB,CAApB;AAIA,SAAOuC,WAAW,CAACP,MAAZ,GAAqB,CAArB,GAAyBO,WAAzB,GAAuCnD,WAA9C;AACA,CAd+D,EAe9DI,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAawB,KAAf,EAAsB3B,KAAK,CAACG,MAAN,CAAaC,UAAnC,CAfmD,CAA1D;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM8C,mBAAmB,GAAG3E,cAAc,CAChD,CAAEyB,KAAF,EAAS+B,SAAT,KACC,CAAEc,KAAK,CAACC,OAAN,CAAef,SAAf,IAA6BA,SAA7B,GAAyC,CAAEA,SAAF,CAA3C,EAA2DF,GAA3D,CACG5B,QAAF,IAAgBa,QAAQ,CAAEd,KAAF,EAASC,QAAT,CADzB,CAF+C,EAKhD,CAAED,KAAF,EAAS+B,SAAT,KACC,CAAEc,KAAK,CAACC,OAAN,CAAef,SAAf,IAA6BA,SAA7B,GAAyC,CAAEA,SAAF,CAA3C,EAA2DF,GAA3D,CACG5B,QAAF,IAAgBD,KAAK,CAACG,MAAN,CAAaa,IAAb,CAAkBX,GAAlB,CAAuBJ,QAAvB,CADjB,CAN+C,CAA1C;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMkD,uBAAuB,GAAG5E,cAAc,CACpD,CAAEyB,KAAF,EAAS+B,SAAT,KACCmB,mBAAmB,CAAElD,KAAF,EAAS+B,SAAT,CAAnB,CACEiB,MADF,CACUI,OADV,EAEEvB,GAFF,CAES3B,KAAF,IAAaA,KAAK,CAACM,IAF1B,CAFmD,EAKpD,CAAER,KAAF,EAAS+B,SAAT,KAAwBmB,mBAAmB,CAAElD,KAAF,EAAS+B,SAAT,CALS,CAA9C;AAQP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsB,aAAT,CAAwBrD,KAAxB,EAA+BmB,YAA/B,EAA8C;AACpD,SAAOS,aAAa,CAAE5B,KAAF,EAASmB,YAAT,CAAb,CAAqCqB,MAA5C;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASc,iBAAT,CAA4BtD,KAA5B,EAAoC;AAC1C,SAAOA,KAAK,CAACuD,SAAN,CAAgBC,cAAvB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0BzD,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACuD,SAAN,CAAgBG,YAAvB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,sBAAT,CAAiC3D,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAACuD,SAAN,CAAgBC,cAAhB,CAA+BvD,QAAtC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2D,oBAAT,CAA+B5D,KAA/B,EAAuC;AAC7C,SAAOA,KAAK,CAACuD,SAAN,CAAgBG,YAAhB,CAA6BzD,QAApC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4D,qBAAT,CAAgC7D,KAAhC,EAAwC;AAC9C,QAAM8D,uBAAuB,GAC5BC,8BAA8B,CAAE/D,KAAF,CAA9B,CAAwCwC,MADzC;;AAGA,MAAKsB,uBAAL,EAA+B;AAC9B,WAAOA,uBAAP;AACA;;AAED,SAAO9D,KAAK,CAACuD,SAAN,CAAgBC,cAAhB,CAA+BvD,QAA/B,GAA0C,CAA1C,GAA8C,CAArD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+D,gBAAT,CAA2BhE,KAA3B,EAAmC;AACzC,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;AACA,SACC,CAAC,CAAEC,cAAc,CAACvD,QAAlB,IACAuD,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAF1C;AAIA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgE,wBAAT,CAAmCjE,KAAnC,EAA2C;AACjD,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;AACA,QAAM;AAAEtD,IAAAA;AAAF,MAAeuD,cAArB;;AAEA,MAAK,CAAEvD,QAAF,IAAcA,QAAQ,KAAKyD,YAAY,CAACzD,QAA7C,EAAwD;AACvD,WAAO,IAAP;AACA;;AAED,SAAOA,QAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiE,gBAAT,CAA2BlE,KAA3B,EAAmC;AACzC,QAAMC,QAAQ,GAAGgE,wBAAwB,CAAEjE,KAAF,CAAzC;AACA,SAAOC,QAAQ,GAAGa,QAAQ,CAAEd,KAAF,EAASC,QAAT,CAAX,GAAiC,IAAhD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkE,oBAAT,CAA+BnE,KAA/B,EAAsCC,QAAtC,EAAiD;AACvD,SAAOD,KAAK,CAACG,MAAN,CAAaiE,OAAb,CAAqBrD,GAArB,CAA0Bd,QAA1B,IACJD,KAAK,CAACG,MAAN,CAAaiE,OAAb,CAAqB/D,GAArB,CAA0BJ,QAA1B,CADI,GAEJ,IAFH;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMoE,eAAe,GAAG9F,cAAc,CAC5C,CAAEyB,KAAF,EAASC,QAAT,EAAmBqE,SAAS,GAAG,KAA/B,KAA0C;AACzC,QAAMF,OAAO,GAAG,EAAhB;AACA,MAAIG,OAAO,GAAGtE,QAAd;;AACA,SAAQ,CAAC,CAAED,KAAK,CAACG,MAAN,CAAaiE,OAAb,CAAqB/D,GAArB,CAA0BkE,OAA1B,CAAX,EAAiD;AAChDA,IAAAA,OAAO,GAAGvE,KAAK,CAACG,MAAN,CAAaiE,OAAb,CAAqB/D,GAArB,CAA0BkE,OAA1B,CAAV;AACAH,IAAAA,OAAO,CAACjC,IAAR,CAAcoC,OAAd;AACA;;AAED,MAAK,CAAEH,OAAO,CAAC5B,MAAf,EAAwB;AACvB,WAAO5C,WAAP;AACA;;AAED,SAAO0E,SAAS,GAAGF,OAAH,GAAaA,OAAO,CAACI,OAAR,EAA7B;AACA,CAd2C,EAe1CxE,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAaiE,OAAf,CAf+B,CAAtC;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMK,0BAA0B,GAAGlG,cAAc,CACvD,CAAEyB,KAAF,EAASC,QAAT,EAAmBsC,SAAnB,EAA8B+B,SAAS,GAAG,KAA1C,KAAqD;AACpD,QAAMF,OAAO,GAAGC,eAAe,CAAErE,KAAF,EAASC,QAAT,EAAmBqE,SAAnB,CAA/B;AACA,QAAMI,OAAO,GAAG7B,KAAK,CAACC,OAAN,CAAeP,SAAf,IACX/B,IAAF,IAAY+B,SAAS,CAACU,QAAV,CAAoBzC,IAApB,CADC,GAEXA,IAAF,IAAY+B,SAAS,KAAK/B,IAF7B;AAGA,SAAO4D,OAAO,CAACpB,MAAR,CAAkB2B,EAAF,IAAUD,OAAO,CAAE3E,YAAY,CAAEC,KAAF,EAAS2E,EAAT,CAAd,CAAjC,CAAP;AACA,CAPsD,EAQrD3E,KAAF,IAAa,CAAEA,KAAK,CAACG,MAAN,CAAaiE,OAAf,CAR0C,CAAjD;AAUP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASQ,6BAAT,CAAwC5E,KAAxC,EAA+CC,QAA/C,EAA0D;AAChE,MAAIsE,OAAO,GAAGtE,QAAd;AACA,MAAI4E,MAAJ;;AACA,KAAG;AACFA,IAAAA,MAAM,GAAGN,OAAT;AACAA,IAAAA,OAAO,GAAGvE,KAAK,CAACG,MAAN,CAAaiE,OAAb,CAAqB/D,GAArB,CAA0BkE,OAA1B,CAAV;AACA,GAHD,QAGUA,OAHV;;AAIA,SAAOM,MAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wCAAT,CAAmD9E,KAAnD,EAA0DC,QAA1D,EAAqE;AAC3E,QAAM8E,UAAU,GAAGd,wBAAwB,CAAEjE,KAAF,CAA3C;AACA,QAAMgF,aAAa,GAAG,CAAE,GAAGX,eAAe,CAAErE,KAAF,EAASC,QAAT,CAApB,EAAyCA,QAAzC,CAAtB;AACA,QAAMgF,eAAe,GAAG,CACvB,GAAGZ,eAAe,CAAErE,KAAF,EAAS+E,UAAT,CADK,EAEvBA,UAFuB,CAAxB;AAKA,MAAIG,oBAAJ;AAEA,QAAMC,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAAUL,aAAa,CAACxC,MAAxB,EAAgCyC,eAAe,CAACzC,MAAhD,CAAjB;;AACA,OAAM,IAAI8C,KAAK,GAAG,CAAlB,EAAqBA,KAAK,GAAGH,QAA7B,EAAuCG,KAAK,EAA5C,EAAiD;AAChD,QAAKN,aAAa,CAAEM,KAAF,CAAb,KAA2BL,eAAe,CAAEK,KAAF,CAA/C,EAA2D;AAC1DJ,MAAAA,oBAAoB,GAAGF,aAAa,CAAEM,KAAF,CAApC;AACA,KAFD,MAEO;AACN;AACA;AACD;;AAED,SAAOJ,oBAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASK,wBAAT,CAAmCvF,KAAnC,EAA0CwF,aAA1C,EAAyDC,QAAQ,GAAG,CAApE,EAAwE;AAC9E;AACA,MAAKD,aAAa,KAAKE,SAAvB,EAAmC;AAClCF,IAAAA,aAAa,GAAGvB,wBAAwB,CAAEjE,KAAF,CAAxC;AACA,GAJ6E,CAM9E;;;AACA,MAAKwF,aAAa,KAAKE,SAAvB,EAAmC;AAClC,QAAKD,QAAQ,GAAG,CAAhB,EAAoB;AACnBD,MAAAA,aAAa,GAAGG,kCAAkC,CAAE3F,KAAF,CAAlD;AACA,KAFD,MAEO;AACNwF,MAAAA,aAAa,GAAGI,iCAAiC,CAAE5F,KAAF,CAAjD;AACA;AACD,GAb6E,CAe9E;;;AACA,MAAK,CAAEwF,aAAP,EAAuB;AACtB,WAAO,IAAP;AACA,GAlB6E,CAoB9E;AACA;;;AACA,QAAMrE,YAAY,GAAGgD,oBAAoB,CAAEnE,KAAF,EAASwF,aAAT,CAAzC;;AACA,MAAKrE,YAAY,KAAK,IAAtB,EAA6B;AAC5B,WAAO,IAAP;AACA;;AAED,QAAM;AAAEQ,IAAAA;AAAF,MAAY3B,KAAK,CAACG,MAAxB;AACA,QAAM0F,QAAQ,GAAGlE,KAAK,CAACtB,GAAN,CAAWc,YAAX,CAAjB;AACA,QAAMmE,KAAK,GAAGO,QAAQ,CAACC,OAAT,CAAkBN,aAAlB,CAAd;AACA,QAAMO,SAAS,GAAGT,KAAK,GAAG,IAAIG,QAA9B,CA9B8E,CAgC9E;;AACA,MAAKM,SAAS,GAAG,CAAjB,EAAqB;AACpB,WAAO,IAAP;AACA,GAnC6E,CAqC9E;;;AACA,MAAKA,SAAS,KAAKF,QAAQ,CAACrD,MAA5B,EAAqC;AACpC,WAAO,IAAP;AACA,GAxC6E,CA0C9E;;;AACA,SAAOqD,QAAQ,CAAEE,SAAF,CAAf;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,wBAAT,CAAmChG,KAAnC,EAA0CwF,aAA1C,EAA0D;AAChE,SAAOD,wBAAwB,CAAEvF,KAAF,EAASwF,aAAT,EAAwB,CAAC,CAAzB,CAA/B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASS,oBAAT,CAA+BjG,KAA/B,EAAsCwF,aAAtC,EAAsD;AAC5D,SAAOD,wBAAwB,CAAEvF,KAAF,EAASwF,aAAT,EAAwB,CAAxB,CAA/B;AACA;AAED;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASU,qCAAT,CAAgDlG,KAAhD,EAAwD;AAC9D;AACA,SAAOA,KAAK,CAACmG,eAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,yBAAyB,GAAG7H,cAAc,CACpDyB,KAAF,IAAa;AACZ,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;;AAEA,MAAK,CAAEC,cAAc,CAACvD,QAAjB,IAA6B,CAAEyD,YAAY,CAACzD,QAAjD,EAA4D;AAC3D,WAAOL,WAAP;AACA;;AAED,MAAK4D,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAA9C,EAAyD;AACxD,WAAO,CAAEuD,cAAc,CAACvD,QAAjB,CAAP;AACA,GATW,CAWZ;AACA;AACA;;;AACA,QAAMkB,YAAY,GAAGgD,oBAAoB,CACxCnE,KADwC,EAExCwD,cAAc,CAACvD,QAFyB,CAAzC;;AAKA,MAAKkB,YAAY,KAAK,IAAtB,EAA6B;AAC5B,WAAOvB,WAAP;AACA;;AAED,QAAMyG,UAAU,GAAGzE,aAAa,CAAE5B,KAAF,EAASmB,YAAT,CAAhC;AACA,QAAMmF,UAAU,GAAGD,UAAU,CAACP,OAAX,CAAoBtC,cAAc,CAACvD,QAAnC,CAAnB;AACA,QAAMsG,QAAQ,GAAGF,UAAU,CAACP,OAAX,CAAoBpC,YAAY,CAACzD,QAAjC,CAAjB;;AAEA,MAAKqG,UAAU,GAAGC,QAAlB,EAA6B;AAC5B,WAAOF,UAAU,CAACG,KAAX,CAAkBD,QAAlB,EAA4BD,UAAU,GAAG,CAAzC,CAAP;AACA;;AAED,SAAOD,UAAU,CAACG,KAAX,CAAkBF,UAAlB,EAA8BC,QAAQ,GAAG,CAAzC,CAAP;AACA,CAjCqD,EAkCpDvG,KAAF,IAAa,CACZA,KAAK,CAACG,MAAN,CAAawB,KADD,EAEZ3B,KAAK,CAACuD,SAAN,CAAgBC,cAAhB,CAA+BvD,QAFnB,EAGZD,KAAK,CAACuD,SAAN,CAAgBG,YAAhB,CAA6BzD,QAHjB,CAlCyC,CAAhD;AAyCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8D,8BAAT,CAAyC/D,KAAzC,EAAiD;AACvD,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;;AAEA,MAAKC,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAA9C,EAAyD;AACxD,WAAOL,WAAP;AACA;;AAED,SAAOwG,yBAAyB,CAAEpG,KAAF,CAAhC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMyG,sBAAsB,GAAGlI,cAAc,CACjDyB,KAAF,IAAa;AACZ,QAAM0G,2BAA2B,GAChC3C,8BAA8B,CAAE/D,KAAF,CAD/B;;AAEA,MAAK,CAAE0G,2BAA2B,CAAClE,MAAnC,EAA4C;AAC3C,WAAO5C,WAAP;AACA;;AAED,SAAO8G,2BAA2B,CAAC7E,GAA5B,CAAmC5B,QAAF,IACvCa,QAAQ,CAAEd,KAAF,EAASC,QAAT,CADF,CAAP;AAGA,CAXkD,EAYjDD,KAAF,IAAa,CACZ,GAAGoG,yBAAyB,CAACO,aAA1B,CAAyC3G,KAAzC,CADS,EAEZA,KAAK,CAACG,MAAN,CAAaC,UAFD,EAGZJ,KAAK,CAACG,MAAN,CAAawB,KAHD,EAIZ3B,KAAK,CAACG,MAAN,CAAaM,UAJD,CAZsC,CAA7C;AAoBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkF,kCAAT,CAA6C3F,KAA7C,EAAqD;AAC3D,SAAO+D,8BAA8B,CAAE/D,KAAF,CAA9B,CAAyC,CAAzC,KAAgD,IAAvD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4F,iCAAT,CAA4C5F,KAA5C,EAAoD;AAC1D,QAAM4G,iBAAiB,GAAG7C,8BAA8B,CAAE/D,KAAF,CAAxD;AACA,SAAO4G,iBAAiB,CAAEA,iBAAiB,CAACpE,MAAlB,GAA2B,CAA7B,CAAjB,IAAqD,IAA5D;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqE,yBAAT,CAAoC7G,KAApC,EAA2CC,QAA3C,EAAsD;AAC5D,SAAO0F,kCAAkC,CAAE3F,KAAF,CAAlC,KAAgDC,QAAvD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS6G,oBAAT,CAA+B9G,KAA/B,EAAsCC,QAAtC,EAAiD;AACvD,SAAO8D,8BAA8B,CAAE/D,KAAF,CAA9B,CAAwC8F,OAAxC,CAAiD7F,QAAjD,MAAgE,CAAC,CAAxE;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM8G,uBAAuB,GAAGxI,cAAc,CACpD,CAAEyB,KAAF,EAASC,QAAT,KAAuB;AACtB,MAAI+G,gBAAgB,GAAG/G,QAAvB;AACA,MAAIgH,eAAe,GAAG,KAAtB;;AACA,SAAQD,gBAAgB,IAAI,CAAEC,eAA9B,EAAgD;AAC/CD,IAAAA,gBAAgB,GAAG7C,oBAAoB,CAAEnE,KAAF,EAASgH,gBAAT,CAAvC;AACAC,IAAAA,eAAe,GAAGH,oBAAoB,CAAE9G,KAAF,EAASgH,gBAAT,CAAtC;AACA;;AACD,SAAOC,eAAP;AACA,CATmD,EAUlDjH,KAAF,IAAa,CACZA,KAAK,CAACG,MAAN,CAAawB,KADD,EAEZ3B,KAAK,CAACuD,SAAN,CAAgBC,cAAhB,CAA+BvD,QAFnB,EAGZD,KAAK,CAACuD,SAAN,CAAgBG,YAAhB,CAA6BzD,QAHjB,CAVuC,CAA9C;AAiBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiH,mCAAT,CAA8ClH,KAA9C,EAAsD;AAC5D,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;;AAEA,MAAKC,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAA9C,EAAyD;AACxD,WAAO,IAAP;AACA;;AAED,SAAOuD,cAAc,CAACvD,QAAf,IAA2B,IAAlC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkH,iCAAT,CAA4CnH,KAA5C,EAAoD;AAC1D,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;;AAEA,MAAKC,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAA9C,EAAyD;AACxD,WAAO,IAAP;AACA;;AAED,SAAOyD,YAAY,CAACzD,QAAb,IAAyB,IAAhC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmH,yBAAT,CAAoCpH,KAApC,EAA4C;AAClD,QAAMqH,eAAe,GAAG/D,iBAAiB,CAAEtD,KAAF,CAAzC;AACA,QAAMsH,cAAc,GAAG7D,eAAe,CAAEzD,KAAF,CAAtC;AACA,SACC,CAAEqH,eAAe,CAACE,YAAlB,IACA,CAAED,cAAc,CAACC,YADjB,IAEA,OAAOF,eAAe,CAACG,MAAvB,KAAkC,WAFlC,IAGA,OAAOF,cAAc,CAACE,MAAtB,KAAiC,WAJlC;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAyCzH,KAAzC,EAAiD;AACvD,QAAMqH,eAAe,GAAG/D,iBAAiB,CAAEtD,KAAF,CAAzC;AACA,QAAMsH,cAAc,GAAG7D,eAAe,CAAEzD,KAAF,CAAtC;AACA,SACC,CAAC,CAAEqH,eAAH,IACA,CAAC,CAAEC,cADH,IAEAD,eAAe,CAACpH,QAAhB,KAA6BqH,cAAc,CAACrH,QAF5C,IAGAoH,eAAe,CAACE,YAAhB,KAAiCD,cAAc,CAACC,YAHhD,IAIAF,eAAe,CAACG,MAAhB,KAA2BF,cAAc,CAACE,MAL3C;AAOA;AAED,OAAO,SAASE,sCAAT,CAAiD1H,KAAjD,EAAyD;AAC/D,SAAOoG,yBAAyB,CAAEpG,KAAF,CAAzB,CAAmC2H,IAAnC,CAA2C1H,QAAF,IAAgB;AAC/D,UAAMsC,SAAS,GAAGxC,YAAY,CAAEC,KAAF,EAASC,QAAT,CAA9B;AACA,UAAM2H,SAAS,GAAGpJ,YAAY,CAAE+D,SAAF,CAA9B;AACA,WAAO,CAAEqF,SAAS,CAACC,KAAnB;AACA,GAJM,CAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,8BAAT,CAAyC9H,KAAzC,EAAgD+H,SAAhD,EAA4D;AAClE,QAAMV,eAAe,GAAG/D,iBAAiB,CAAEtD,KAAF,CAAzC;AACA,QAAMsH,cAAc,GAAG7D,eAAe,CAAEzD,KAAF,CAAtC,CAFkE,CAIlE;;AACA,MAAKqH,eAAe,CAACpH,QAAhB,KAA6BqH,cAAc,CAACrH,QAAjD,EAA4D,OAAO,KAAP,CALM,CAOlE;;AACA,MACC,CAAEoH,eAAe,CAACE,YAAlB,IACA,CAAED,cAAc,CAACC,YADjB,IAEA,OAAOF,eAAe,CAACG,MAAvB,KAAkC,WAFlC,IAGA,OAAOF,cAAc,CAACE,MAAtB,KAAiC,WAJlC,EAMC,OAAO,KAAP;AAED,QAAMQ,kBAAkB,GAAG7D,oBAAoB,CAC9CnE,KAD8C,EAE9CqH,eAAe,CAACpH,QAF8B,CAA/C;AAIA,QAAMgI,iBAAiB,GAAG9D,oBAAoB,CAC7CnE,KAD6C,EAE7CsH,cAAc,CAACrH,QAF8B,CAA9C,CApBkE,CAyBlE;AACA;;AACA,MAAK+H,kBAAkB,KAAKC,iBAA5B,EAAgD;AAC/C,WAAO,KAAP;AACA;;AAED,QAAM5B,UAAU,GAAGzE,aAAa,CAAE5B,KAAF,EAASgI,kBAAT,CAAhC;AACA,QAAME,WAAW,GAAG7B,UAAU,CAACP,OAAX,CAAoBuB,eAAe,CAACpH,QAApC,CAApB;AACA,QAAMkI,UAAU,GAAG9B,UAAU,CAACP,OAAX,CAAoBwB,cAAc,CAACrH,QAAnC,CAAnB,CAjCkE,CAmClE;;AACA,MAAIuD,cAAJ,EAAoBE,YAApB;;AAEA,MAAKwE,WAAW,GAAGC,UAAnB,EAAgC;AAC/B3E,IAAAA,cAAc,GAAG8D,cAAjB;AACA5D,IAAAA,YAAY,GAAG2D,eAAf;AACA,GAHD,MAGO;AACN7D,IAAAA,cAAc,GAAG6D,eAAjB;AACA3D,IAAAA,YAAY,GAAG4D,cAAf;AACA;;AAED,QAAMc,mBAAmB,GAAGL,SAAS,GAClCrE,YAAY,CAACzD,QADqB,GAElCuD,cAAc,CAACvD,QAFlB;AAGA,QAAMoI,oBAAoB,GAAGN,SAAS,GACnCvE,cAAc,CAACvD,QADoB,GAEnCyD,YAAY,CAACzD,QAFhB;AAIA,QAAMqI,eAAe,GAAGvI,YAAY,CAAEC,KAAF,EAASoI,mBAAT,CAApC;AACA,QAAMG,eAAe,GAAG/J,YAAY,CAAE8J,eAAF,CAApC;AAEA,MAAK,CAAEC,eAAe,CAACV,KAAvB,EAA+B,OAAO,KAAP;AAE/B,QAAMW,YAAY,GAAG1H,QAAQ,CAAEd,KAAF,EAASqI,oBAAT,CAA7B,CA1DkE,CA4DlE;;AACA,MAAKG,YAAY,CAAChI,IAAb,KAAsB8H,eAA3B,EAA6C,OAAO,IAAP,CA7DqB,CA+DlE;AACA;;AACA,QAAMG,aAAa,GAAG3J,iBAAiB,CAAE0J,YAAF,EAAgBF,eAAhB,CAAvC;AAEA,SAAOG,aAAa,IAAIA,aAAa,CAACjG,MAAtC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMkG,+CAA+C,GAAK1I,KAAF,IAAa;AAC3E,QAAMqH,eAAe,GAAG/D,iBAAiB,CAAEtD,KAAF,CAAzC;AACA,QAAMsH,cAAc,GAAG7D,eAAe,CAAEzD,KAAF,CAAtC;;AAEA,MAAKqH,eAAe,CAACpH,QAAhB,KAA6BqH,cAAc,CAACrH,QAAjD,EAA4D;AAC3D,WAAOL,WAAP;AACA,GAN0E,CAQ3E;;;AACA,MACC,CAAEyH,eAAe,CAACE,YAAlB,IACA,CAAED,cAAc,CAACC,YADjB,IAEA,OAAOF,eAAe,CAACG,MAAvB,KAAkC,WAFlC,IAGA,OAAOF,cAAc,CAACE,MAAtB,KAAiC,WAJlC,EAKE;AACD,WAAO5H,WAAP;AACA;;AAED,QAAMoI,kBAAkB,GAAG7D,oBAAoB,CAC9CnE,KAD8C,EAE9CqH,eAAe,CAACpH,QAF8B,CAA/C;AAIA,QAAMgI,iBAAiB,GAAG9D,oBAAoB,CAC7CnE,KAD6C,EAE7CsH,cAAc,CAACrH,QAF8B,CAA9C,CAtB2E,CA2B3E;AACA;;AACA,MAAK+H,kBAAkB,KAAKC,iBAA5B,EAAgD;AAC/C,WAAOrI,WAAP;AACA;;AAED,QAAMyG,UAAU,GAAGzE,aAAa,CAAE5B,KAAF,EAASgI,kBAAT,CAAhC;AACA,QAAME,WAAW,GAAG7B,UAAU,CAACP,OAAX,CAAoBuB,eAAe,CAACpH,QAApC,CAApB;AACA,QAAMkI,UAAU,GAAG9B,UAAU,CAACP,OAAX,CAAoBwB,cAAc,CAACrH,QAAnC,CAAnB,CAnC2E,CAqC3E;;AACA,QAAM,CAAEuD,cAAF,EAAkBE,YAAlB,IACLwE,WAAW,GAAGC,UAAd,GACG,CAAEb,cAAF,EAAkBD,eAAlB,CADH,GAEG,CAAEA,eAAF,EAAmBC,cAAnB,CAHJ;AAKA,QAAMqB,MAAM,GAAG7H,QAAQ,CAAEd,KAAF,EAASwD,cAAc,CAACvD,QAAxB,CAAvB;AACA,QAAM2I,UAAU,GAAGpK,YAAY,CAAEmK,MAAM,CAACnI,IAAT,CAA/B;AAEA,QAAMqI,MAAM,GAAG/H,QAAQ,CAAEd,KAAF,EAAS0D,YAAY,CAACzD,QAAtB,CAAvB;AACA,QAAM6I,UAAU,GAAGtK,YAAY,CAAEqK,MAAM,CAACrI,IAAT,CAA/B;AAEA,QAAMuI,KAAK,GAAGJ,MAAM,CAAClI,UAAP,CAAmB+C,cAAc,CAAC+D,YAAlC,CAAd;AACA,QAAMyB,KAAK,GAAGH,MAAM,CAACpI,UAAP,CAAmBiD,YAAY,CAAC6D,YAAhC,CAAd;AAEA,QAAM0B,oBAAoB,GACzBL,UAAU,CAACnI,UAAX,CAAuB+C,cAAc,CAAC+D,YAAtC,CADD;AAEA,QAAM2B,oBAAoB,GACzBJ,UAAU,CAACrI,UAAX,CAAuBiD,YAAY,CAAC6D,YAApC,CADD;AAGA,MAAI4B,MAAM,GAAGjK,MAAM,CAAE;AACpBkK,IAAAA,IAAI,EAAEL,KADc;AAEpB,OAAGzJ,mBAAmB,CAAE2J,oBAAF;AAFF,GAAF,CAAnB;AAIA,MAAII,MAAM,GAAGnK,MAAM,CAAE;AACpBkK,IAAAA,IAAI,EAAEJ,KADc;AAEpB,OAAG1J,mBAAmB,CAAE4J,oBAAF;AAFF,GAAF,CAAnB;AAKAC,EAAAA,MAAM,GAAGhK,MAAM,CAAEgK,MAAF,EAAU,CAAV,EAAa3F,cAAc,CAACgE,MAA5B,CAAf;AACA6B,EAAAA,MAAM,GAAGlK,MAAM,CAAEkK,MAAF,EAAU3F,YAAY,CAAC8D,MAAvB,EAA+B6B,MAAM,CAACC,IAAP,CAAY9G,MAA3C,CAAf;AAEA,SAAO,CACN,EACC,GAAGmG,MADJ;AAEClI,IAAAA,UAAU,EAAE,EACX,GAAGkI,MAAM,CAAClI,UADC;AAEX,OAAE+C,cAAc,CAAC+D,YAAjB,GAAiCnI,YAAY,CAAE;AAC9CmK,QAAAA,KAAK,EAAEJ,MADuC;AAE9C,WAAG7J,mBAAmB,CAAE2J,oBAAF;AAFwB,OAAF;AAFlC;AAFb,GADM,EAWN,EACC,GAAGJ,MADJ;AAECpI,IAAAA,UAAU,EAAE,EACX,GAAGoI,MAAM,CAACpI,UADC;AAEX,OAAEiD,YAAY,CAAC6D,YAAf,GAA+BnI,YAAY,CAAE;AAC5CmK,QAAAA,KAAK,EAAEF,MADqC;AAE5C,WAAG/J,mBAAmB,CAAE4J,oBAAF;AAFsB,OAAF;AAFhC;AAFb,GAXM,CAAP;AAsBA,CA3FM;AA6FP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAStH,aAAT,CAAwB5B,KAAxB,EAA+BmB,YAA/B,EAA8C;AACpD,SAAOnB,KAAK,CAACG,MAAN,CAAawB,KAAb,CAAmBtB,GAAnB,CAAwBc,YAAY,IAAI,EAAxC,KAAgDvB,WAAvD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS4J,aAAT,CAAwBxJ,KAAxB,EAA+BC,QAA/B,EAA0C;AAChD,QAAMkB,YAAY,GAAGgD,oBAAoB,CAAEnE,KAAF,EAASC,QAAT,CAAzC;AACA,SAAO2B,aAAa,CAAE5B,KAAF,EAASmB,YAAT,CAAb,CAAqC2E,OAArC,CAA8C7F,QAA9C,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwJ,eAAT,CAA0BzJ,KAA1B,EAAiCC,QAAjC,EAA4C;AAClD,QAAM;AAAEuD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;;AAEA,MAAKC,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAA9C,EAAyD;AACxD,WAAO,KAAP;AACA;;AAED,SAAOuD,cAAc,CAACvD,QAAf,KAA4BA,QAAnC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASyJ,qBAAT,CAAgC1J,KAAhC,EAAuCC,QAAvC,EAAiD0J,IAAI,GAAG,KAAxD,EAAgE;AACtE,SAAO/H,aAAa,CAAE5B,KAAF,EAASC,QAAT,CAAb,CAAiC0H,IAAjC,CACJiC,aAAF,IACCH,eAAe,CAAEzJ,KAAF,EAAS4J,aAAT,CAAf,IACA9C,oBAAoB,CAAE9G,KAAF,EAAS4J,aAAT,CADpB,IAEED,IAAI,IAAID,qBAAqB,CAAE1J,KAAF,EAAS4J,aAAT,EAAwBD,IAAxB,CAJ1B,CAAP;AAMA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,oBAAT,CAA+B7J,KAA/B,EAAsCC,QAAtC,EAAgD0J,IAAI,GAAG,KAAvD,EAA+D;AACrE,SAAO/H,aAAa,CAAE5B,KAAF,EAASC,QAAT,CAAb,CAAiC0H,IAAjC,CACJiC,aAAF,IACCE,mBAAmB,CAAE9J,KAAF,EAAS4J,aAAT,CAAnB,IACED,IAAI,IAAIE,oBAAoB,CAAE7J,KAAF,EAAS4J,aAAT,EAAwBD,IAAxB,CAHzB,CAAP;AAKA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,sBAAT,CAAiC/J,KAAjC,EAAwCC,QAAxC,EAAmD;AACzD,MAAK,CAAEA,QAAP,EAAkB;AACjB,WAAO,KAAP;AACA;;AAED,QAAM8B,SAAS,GAAGgC,8BAA8B,CAAE/D,KAAF,CAAhD;AACA,QAAMsF,KAAK,GAAGvD,SAAS,CAAC+D,OAAV,CAAmB7F,QAAnB,CAAd;AACA,SAAOqF,KAAK,GAAG,CAAC,CAAT,IAAcA,KAAK,GAAGvD,SAAS,CAACS,MAAV,GAAmB,CAAhD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwH,iBAAT,CAA4BhK,KAA5B,EAAoC;AAC1C,QAAM;AAAEwD,IAAAA,cAAF;AAAkBE,IAAAA;AAAlB,MAAmC1D,KAAK,CAACuD,SAA/C;AACA,SAAOC,cAAc,CAACvD,QAAf,KAA4ByD,YAAY,CAACzD,QAAhD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgK,gBAAT,CAA2BjK,KAA3B,EAAmC;AACzC,SAAOA,KAAK,CAACiK,gBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6BlK,KAA7B,EAAqC;AAC3C,SAAOA,KAAK,CAACkK,kBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBnK,KAAvB,EAA8BC,QAA9B,EAAyC;AAC/C,SAAOD,KAAK,CAACoK,UAAN,CAAkBnK,QAAlB,KAAgC,QAAvC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoK,QAAT,CAAmBrK,KAAnB,EAA2B;AACjC,SAAOA,KAAK,CAACqK,QAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BtK,KAA3B,EAAmC;AACzC,SAAO,CAAC,CAAEA,KAAK,CAACuK,aAAN,CAAoB/H,MAA9B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgI,wBAAT,CAAmCxK,KAAnC,EAA2C;AACjD,SAAOA,KAAK,CAACuK,aAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAST,mBAAT,CAA8B9J,KAA9B,EAAqCC,QAArC,EAAgD;AACtD,SAAOD,KAAK,CAACuK,aAAN,CAAoBtH,QAApB,CAA8BhD,QAA9B,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASwK,sBAAT,CAAiCzK,KAAjC,EAAwCC,QAAxC,EAAmD;AACzD;AACA;AACA,MAAK,CAAEqK,gBAAgB,CAAEtK,KAAF,CAAvB,EAAmC;AAClC,WAAO,KAAP;AACA;;AAED,QAAMoE,OAAO,GAAGC,eAAe,CAAErE,KAAF,EAASC,QAAT,CAA/B;AACA,SAAOmE,OAAO,CAACuD,IAAR,CAAgB+C,cAAF,IACpBZ,mBAAmB,CAAE9J,KAAF,EAAS0K,cAAT,CADb,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,GAAsC;AAC5CtL,EAAAA,UAAU,CACT,kEADS,EAET;AACCmC,IAAAA,KAAK,EAAE,KADR;AAECC,IAAAA,OAAO,EAAE;AAFV,GAFS,CAAV;AAQA,SAAO,KAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMmJ,sBAAsB,GAAGrM,cAAc,CACjDyB,KAAF,IAAa;AACZ,MAAImB,YAAJ,EAAkBmE,KAAlB;AAEA,QAAM;AACLuF,IAAAA,cADK;AAELtH,IAAAA,SAAS,EAAE;AAAEG,MAAAA;AAAF;AAFN,MAGF1D,KAHJ;;AAIA,MAAK6K,cAAc,KAAK,IAAxB,EAA+B;AAC9B,WAAOA,cAAP;AACA;;AAED,QAAM;AAAE5K,IAAAA;AAAF,MAAeyD,YAArB;;AAEA,MAAKzD,QAAL,EAAgB;AACfkB,IAAAA,YAAY,GAAGgD,oBAAoB,CAAEnE,KAAF,EAASC,QAAT,CAApB,IAA2CyF,SAA1D;AACAJ,IAAAA,KAAK,GAAGkE,aAAa,CAAExJ,KAAF,EAAS0D,YAAY,CAACzD,QAAtB,CAAb,GAAgD,CAAxD;AACA,GAHD,MAGO;AACNqF,IAAAA,KAAK,GAAG1D,aAAa,CAAE5B,KAAF,CAAb,CAAuBwC,MAA/B;AACA;;AAED,SAAO;AAAErB,IAAAA,YAAF;AAAgBmE,IAAAA;AAAhB,GAAP;AACA,CAtBkD,EAuBjDtF,KAAF,IAAa,CACZA,KAAK,CAAC6K,cADM,EAEZ7K,KAAK,CAACuD,SAAN,CAAgBG,YAAhB,CAA6BzD,QAFjB,EAGZD,KAAK,CAACG,MAAN,CAAaiE,OAHD,EAIZpE,KAAK,CAACG,MAAN,CAAawB,KAJD,CAvBsC,CAA7C;AA+BP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmJ,4BAAT,CAAuC9K,KAAvC,EAA+C;AACrD,SAAOA,KAAK,CAAC6K,cAAN,KAAyB,IAAhC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,eAAT,CAA0B/K,KAA1B,EAAkC;AACxC,SAAOA,KAAK,CAACgL,QAAN,CAAepK,OAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASqK,WAAT,CAAsBjL,KAAtB,EAA8B;AACpC,SAAOA,KAAK,CAACkL,QAAN,CAAeF,QAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASG,eAAT,CAA0BnL,KAA1B,EAAiCmB,YAAjC,EAAgD;AAAA;;AACtD,MAAK,CAAEA,YAAP,EAAsB;AAAA;;AACrB,oCAAOnB,KAAK,CAACkL,QAAN,CAAeE,YAAtB,yEAAsC,KAAtC;AACA;;AAED,kCAAOC,oBAAoB,CAAErL,KAAF,EAASmB,YAAT,CAApB,EAA6CiK,YAApD,yEAAoE,KAApE;AACA;;AAED,MAAME,cAAc,GAAG,CAAEC,IAAF,EAAQC,IAAR,EAAcC,aAAa,GAAG,IAA9B,KAAwC;AAC9D,MAAK,OAAOF,IAAP,KAAgB,SAArB,EAAiC;AAChC,WAAOA,IAAP;AACA;;AACD,MAAK1I,KAAK,CAACC,OAAN,CAAeyI,IAAf,CAAL,EAA6B;AAC5B;AACA;AACA;AACA,QAAKA,IAAI,CAACtI,QAAL,CAAe,mBAAf,KAAwCuI,IAAI,KAAK,IAAtD,EAA6D;AAC5D,aAAO,IAAP;AACA;;AACD,WAAOD,IAAI,CAACtI,QAAL,CAAeuI,IAAf,CAAP;AACA;;AACD,SAAOC,aAAP;AACA,CAdD;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,4BAA4B,GAAG,CACpC1L,KADoC,EAEpCuC,SAFoC,EAGpCpB,YAAY,GAAG,IAHqB,KAIhC;AACJ,MAAIyG,SAAJ;;AACA,MAAKrF,SAAS,IAAI,aAAa,OAAOA,SAAtC,EAAkD;AACjDqF,IAAAA,SAAS,GAAGrF,SAAZ;AACAA,IAAAA,SAAS,GAAGqF,SAAS,CAACpH,IAAtB;AACA,GAHD,MAGO;AACNoH,IAAAA,SAAS,GAAGpJ,YAAY,CAAE+D,SAAF,CAAxB;AACA;;AACD,MAAK,CAAEqF,SAAP,EAAmB;AAClB,WAAO,KAAP;AACA;;AAED,QAAM;AAAE+D,IAAAA;AAAF,MAAwBC,WAAW,CAAE5L,KAAF,CAAzC;AAEA,QAAM6L,sBAAsB,GAAGP,cAAc,CAC5CK,iBAD4C,EAE5CpJ,SAF4C,EAG5C,IAH4C,CAA7C;;AAKA,MAAK,CAAEsJ,sBAAP,EAAgC;AAC/B,WAAO,KAAP;AACA;;AAED,QAAMC,QAAQ,GAAG,CAAC,CAAEX,eAAe,CAAEnL,KAAF,EAASmB,YAAT,CAAnC;;AACA,MAAK2K,QAAL,EAAgB;AACf,WAAO,KAAP;AACA;;AAED,MAAKtM,mBAAmB,CAAEQ,KAAF,EAASmB,YAAT,aAASA,YAAT,cAASA,YAAT,GAAyB,EAAzB,CAAnB,KAAqD,UAA1D,EAAuE;AACtE,WAAO,KAAP;AACA;;AAED,QAAM4K,uBAAuB,GAAGV,oBAAoB,CAAErL,KAAF,EAASmB,YAAT,CAApD,CAhCI,CAkCJ;AACA;;AACA,MAAKA,YAAY,IAAI4K,uBAAuB,KAAKrG,SAAjD,EAA6D;AAC5D,WAAO,KAAP;AACA;;AAED,QAAMsG,mBAAmB,GAAGD,uBAAuB,EAAEE,aAArD;AACA,QAAMC,qBAAqB,GAAGZ,cAAc,CAC3CU,mBAD2C,EAE3CzJ,SAF2C,CAA5C;AAKA,QAAM4J,wBAAwB,GAAGvE,SAAS,CAAC/C,MAA3C;AACA,QAAMuH,UAAU,GAAGrM,YAAY,CAAEC,KAAF,EAASmB,YAAT,CAA/B;AACA,QAAMkL,qBAAqB,GAAGf,cAAc,CAC3Ca,wBAD2C,EAE3CC,UAF2C,CAA5C;AAKA,MAAIE,uBAAuB,GAAG,IAA9B;AACA,QAAMC,0BAA0B,GAAG3E,SAAS,CAAC4E,QAA7C;;AACA,MAAKD,0BAAL,EAAkC;AACjC,UAAME,SAAS,GAAG,CACjBtL,YADiB,EAEjB,GAAGkD,eAAe,CAAErE,KAAF,EAASmB,YAAT,CAFD,CAAlB;AAKAmL,IAAAA,uBAAuB,GAAGG,SAAS,CAAC9E,IAAV,CAAkBX,gBAAF,IACzCsE,cAAc,CACbiB,0BADa,EAEbxM,YAAY,CAAEC,KAAF,EAASgH,gBAAT,CAFC,CADW,CAA1B;AAMA;;AAED,QAAM0F,SAAS,GACdJ,uBAAuB,KACnBJ,qBAAqB,KAAK,IAA1B,IACHG,qBAAqB,KAAK,IADzB,IAEDH,qBAAqB,KAAK,IAFzB,IAGDG,qBAAqB,KAAK,IAJJ,CADxB;;AAOA,MAAK,CAAEK,SAAP,EAAmB;AAClB,WAAOA,SAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACC,SAAO1N,YAAY,CAClB,0CADkB,EAElB0N,SAFkB,EAGlB9E,SAHkB,EAIlBzG,YAJkB,EAKlB;AACC;AACA;AACA;AACAL,IAAAA,QAAQ,EAAEA,QAAQ,CAAC6L,IAAT,CAAe,IAAf,EAAqB3M,KAArB,CAJX;AAKCyE,IAAAA,0BAA0B,EAAEA,0BAA0B,CAACkI,IAA3B,CAC3B,IAD2B,EAE3B3M,KAF2B;AAL7B,GALkB,CAAnB;AAgBA,CAhHD;AAkHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAM4M,kBAAkB,GAAGrO,cAAc,CAC/CmN,4BAD+C,EAE/C,CAAE1L,KAAF,EAASuC,SAAT,EAAoBpB,YAApB,KAAsC,CACrCnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CADqC,EAErCnB,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6Bc,YAA7B,CAFqC,EAGrCnB,KAAK,CAACkL,QAAN,CAAeS,iBAHsB,EAIrC3L,KAAK,CAACkL,QAAN,CAAeE,YAJsB,EAKrCpL,KAAK,CAAC8M,iBAL+B,CAFS,CAAzC;AAWP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAA0B/M,KAA1B,EAAiC+B,SAAjC,EAA4CZ,YAAY,GAAG,IAA3D,EAAkE;AACxE,SAAOY,SAAS,CAACiL,KAAV,CAAmBrI,EAAF,IACvBiI,kBAAkB,CAAE5M,KAAF,EAASD,YAAY,CAAEC,KAAF,EAAS2E,EAAT,CAArB,EAAoCxD,YAApC,CADZ,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS8L,cAAT,CAAyBjN,KAAzB,EAAgCC,QAAhC,EAA0CkB,YAAY,GAAG,IAAzD,EAAgE;AACtE,QAAMV,UAAU,GAAGI,kBAAkB,CAAEb,KAAF,EAASC,QAAT,CAArC;;AACA,MAAKQ,UAAU,KAAK,IAApB,EAA2B;AAC1B,WAAO,IAAP;AACA;;AACD,MAAKA,UAAU,CAACyM,IAAX,EAAiB/N,MAAjB,KAA4BuG,SAAjC,EAA6C;AAC5C,WAAO,CAAEjF,UAAU,CAACyM,IAAX,CAAgB/N,MAAzB;AACA;;AACD,MAAKgM,eAAe,CAAEnL,KAAF,EAASmB,YAAT,CAApB,EAA8C;AAC7C,WAAO,KAAP;AACA;;AAED,SAAO3B,mBAAmB,CAAEQ,KAAF,EAASmB,YAAT,CAAnB,KAA+C,UAAtD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASgM,eAAT,CAA0BnN,KAA1B,EAAiC+B,SAAjC,EAA4CZ,YAAY,GAAG,IAA3D,EAAkE;AACxE,SAAOY,SAAS,CAACiL,KAAV,CAAmB/M,QAAF,IACvBgN,cAAc,CAAEjN,KAAF,EAASC,QAAT,EAAmBkB,YAAnB,CADR,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASiM,YAAT,CAAuBpN,KAAvB,EAA8BC,QAA9B,EAAwCkB,YAAY,GAAG,IAAvD,EAA8D;AACpE,QAAMV,UAAU,GAAGI,kBAAkB,CAAEb,KAAF,EAASC,QAAT,CAArC;;AACA,MAAKQ,UAAU,KAAK,IAApB,EAA2B;AAC1B,WAAO,IAAP;AACA;;AACD,MAAKA,UAAU,CAACyM,IAAX,EAAiBG,IAAjB,KAA0B3H,SAA/B,EAA2C;AAC1C,WAAO,CAAEjF,UAAU,CAACyM,IAAX,CAAgBG,IAAzB;AACA;;AACD,MAAKlC,eAAe,CAAEnL,KAAF,EAASmB,YAAT,CAAf,KAA2C,KAAhD,EAAwD;AACvD,WAAO,KAAP;AACA;;AAED,SAAO3B,mBAAmB,CAAEQ,KAAF,EAASmB,YAAT,CAAnB,KAA+C,UAAtD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASmM,aAAT,CAAwBtN,KAAxB,EAA+B+B,SAA/B,EAA0CZ,YAAY,GAAG,IAAzD,EAAgE;AACtE,SAAOY,SAAS,CAACiL,KAAV,CAAmB/M,QAAF,IACvBmN,YAAY,CAAEpN,KAAF,EAASC,QAAT,EAAmBkB,YAAnB,CADN,CAAP;AAGA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoM,YAAT,CAAuBvN,KAAvB,EAA8BC,QAA9B,EAAyC;AAC/C,QAAMQ,UAAU,GAAGI,kBAAkB,CAAEb,KAAF,EAASC,QAAT,CAArC;;AACA,MAAKQ,UAAU,KAAK,IAApB,EAA2B;AAC1B,WAAO,IAAP;AACA;;AAED,QAAM;AAAEyM,IAAAA;AAAF,MAAWzM,UAAjB,CAN+C,CAQ/C;;AACA,SAAO,CAAEyM,IAAI,EAAEM,IAAf;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BzN,KAA3B,EAAkC0N,UAAlC,EAA+C;AACrD,MAAK,CAAE/O,eAAe,CAAE+O,UAAF,EAAc,MAAd,EAAsB,IAAtB,CAAtB,EAAqD;AACpD,WAAO,KAAP;AACA,GAHoD,CAKrD;;;AACA,SAAO,CAAC,CAAE1N,KAAK,CAACkL,QAAN,EAAgByC,aAA1B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAyB5N,KAAzB,EAAgC2E,EAAhC,EAAqC;AAAA;;AACpC,kCAAO3E,KAAK,CAAC6N,WAAN,CAAkBC,WAAlB,GAAiCnJ,EAAjC,CAAP,yEAAgD,IAAhD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMoJ,6BAA6B,GAAG,CAAE/N,KAAF,EAAS4H,SAAT,EAAoBzG,YAApB,KAAsC;AAC3E,MAAK,CAAExC,eAAe,CAAEiJ,SAAF,EAAa,UAAb,EAAyB,IAAzB,CAAtB,EAAwD;AACvD,WAAO,KAAP;AACA;;AAED,SAAO8D,4BAA4B,CAAE1L,KAAF,EAAS4H,SAAS,CAACpH,IAAnB,EAAyBW,YAAzB,CAAnC;AACA,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAM6M,oBAAoB,GAAG,CAAEhO,KAAF,EAASwL,IAAT,KAAqByC,SAAF,IAAiB;AAChE,QAAMC,WAAW,GAAI,GAAG1C,IAAI,CAAC7G,EAAI,IAAIsJ,SAAS,CAACzN,IAAM,EAArD;AACA,QAAM;AAAE2N,IAAAA,IAAF;AAAQC,IAAAA,KAAK,GAAG;AAAhB,MAAsBR,cAAc,CAAE5N,KAAF,EAASkO,WAAT,CAAd,IAAwC,EAApE;AACA,SAAO,EACN,GAAG1C,IADG;AAEN7G,IAAAA,EAAE,EAAEuJ,WAFE;AAGNG,IAAAA,IAAI,EAAEJ,SAAS,CAACI,IAAV,IAAkB7C,IAAI,CAAC6C,IAHvB;AAINC,IAAAA,KAAK,EAAEL,SAAS,CAACK,KAAV,IAAmB9C,IAAI,CAAC8C,KAJzB;AAKNC,IAAAA,WAAW,EAAEN,SAAS,CAACM,WAAV,IAAyB/C,IAAI,CAAC+C,WALrC;AAMNC,IAAAA,QAAQ,EAAEP,SAAS,CAACO,QAAV,IAAsBhD,IAAI,CAACgD,QAN/B;AAON;AACAC,IAAAA,OAAO,EAAER,SAAS,CAACS,cAAV,CAA0B,SAA1B,IACNT,SAAS,CAACQ,OADJ,GAENjD,IAAI,CAACiD,OAVF;AAWNE,IAAAA,iBAAiB,EAAE,EAClB,GAAGnD,IAAI,CAACmD,iBADU;AAElB,SAAGV,SAAS,CAACxN;AAFK,KAXb;AAeNa,IAAAA,WAAW,EAAE2M,SAAS,CAAC3M,WAfjB;AAgBNsN,IAAAA,QAAQ,EAAEX,SAAS,CAACW,QAAV,IAAsBpD,IAAI,CAACoD,QAhB/B;AAiBNC,IAAAA,QAAQ,EAAEC,iBAAiB,CAAEX,IAAF,EAAQC,KAAR;AAjBrB,GAAP;AAmBA,CAtBD;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMU,iBAAiB,GAAG,CAAEX,IAAF,EAAQC,KAAR,KAAmB;AAC5C,MAAK,CAAED,IAAP,EAAc;AACb,WAAOC,KAAP;AACA,GAH2C,CAI5C;AACA;;;AACA,QAAMW,QAAQ,GAAGC,IAAI,CAACC,GAAL,KAAad,IAA9B;;AACA,UAAS,IAAT;AACC,SAAKY,QAAQ,GAAGtP,qBAAhB;AACC,aAAO2O,KAAK,GAAG,CAAf;;AACD,SAAKW,QAAQ,GAAGrP,oBAAhB;AACC,aAAO0O,KAAK,GAAG,CAAf;;AACD,SAAKW,QAAQ,GAAGpP,qBAAhB;AACC,aAAOyO,KAAK,GAAG,CAAf;;AACD;AACC,aAAOA,KAAK,GAAG,CAAf;AARF;AAUA,CAjBD;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMc,kBAAkB,GACvB,CAAElP,KAAF,EAAS;AAAEmP,EAAAA,UAAU,GAAG;AAAf,CAAT,KACEvH,SAAF,IAAiB;AAChB,QAAMjD,EAAE,GAAGiD,SAAS,CAACpH,IAArB;AAEA,MAAI4O,UAAU,GAAG,KAAjB;;AACA,MAAK,CAAEzQ,eAAe,CAAEiJ,SAAS,CAACpH,IAAZ,EAAkB,UAAlB,EAA8B,IAA9B,CAAtB,EAA6D;AAC5D4O,IAAAA,UAAU,GAAGlM,mBAAmB,CAC/BlD,KAD+B,EAE/BoC,2BAA2B,CAAEpC,KAAF,CAFI,CAAnB,CAGX2H,IAHW,CAGL,CAAE;AAAEnH,MAAAA;AAAF,KAAF,KAAgBA,IAAI,KAAKoH,SAAS,CAACpH,IAH9B,CAAb;AAIA;;AAED,QAAM;AAAE2N,IAAAA,IAAF;AAAQC,IAAAA,KAAK,GAAG;AAAhB,MAAsBR,cAAc,CAAE5N,KAAF,EAAS2E,EAAT,CAAd,IAA+B,EAA3D;AACA,QAAM0K,aAAa,GAAG;AACrB1K,IAAAA,EADqB;AAErBnE,IAAAA,IAAI,EAAEoH,SAAS,CAACpH,IAFK;AAGrB8N,IAAAA,KAAK,EAAE1G,SAAS,CAAC0G,KAHI;AAIrBD,IAAAA,IAAI,EAAEzG,SAAS,CAACyG,IAJK;AAKrBe,IAAAA,UALqB;AAMrBP,IAAAA,QAAQ,EAAEC,iBAAiB,CAAEX,IAAF,EAAQC,KAAR;AANN,GAAtB;AAQA,MAAKe,UAAU,KAAK,WAApB,EAAkC,OAAOE,aAAP;AAElC,QAAMC,kBAAkB,GAAG5Q,kBAAkB,CAC5CkJ,SAAS,CAACpH,IADkC,EAE5C,UAF4C,CAA7C;AAIA,SAAO,EACN,GAAG6O,aADG;AAENV,IAAAA,iBAAiB,EAAE,EAFb;AAGNJ,IAAAA,WAAW,EAAE3G,SAAS,CAAC2G,WAHjB;AAINC,IAAAA,QAAQ,EAAE5G,SAAS,CAAC4G,QAJd;AAKNI,IAAAA,QAAQ,EAAEhH,SAAS,CAACgH,QALd;AAMNW,IAAAA,UAAU,EAAED,kBANN;AAONb,IAAAA,OAAO,EAAE7G,SAAS,CAAC6G,OAPb;AAQNe,IAAAA,OAAO,EAAE,CARH,CAQM;;AARN,GAAP;AAUA,CAtCF;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,gBAAgB,GAAGlR,cAAc,CAC7C,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE,QAAMuO,oBAAoB,GACzB,iIADD;;AAGA,QAAMC,8BAA8B,GAAKC,aAAF,IAAqB;AAC3D,QAAIvB,IAAI,GAAGpP,MAAX;AAEA;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AACG,QAAKF,QAAQ,CAACwB,EAAT,KAAgB,KAArB,EAA6B;AAC5B,YAAMsP,OAAO,GACZ,OAAOD,aAAa,CAACC,OAAd,CAAsBC,GAA7B,KAAqC,QAArC,GACGF,aAAa,CAACC,OAAd,CAAsBC,GADzB,GAEGF,aAAa,CAACC,OAHlB;AAIA,YAAME,aAAa,GAAGF,OAAO,CAACG,KAAR,CAAeN,oBAAf,CAAtB;;AACA,UAAKK,aAAL,EAAqB;AACpB,cAAM,IAAME,SAAS,GAAG,OAAlB,EAA2B1N,SAA3B,IACLwN,aADD;AAEA,cAAMG,mBAAmB,GAAG1R,YAAY,CACvCyR,SAAS,GAAG1N,SAD2B,CAAxC;;AAGA,YAAK2N,mBAAL,EAA2B;AAC1B7B,UAAAA,IAAI,GAAG6B,mBAAmB,CAAC7B,IAA3B;AACA;AACD;AACD;;AAED,UAAM1J,EAAE,GAAI,cAAciL,aAAa,CAACjL,EAAI,EAA5C;AACA,UAAM;AAAEwJ,MAAAA,IAAF;AAAQC,MAAAA,KAAK,GAAG;AAAhB,QAAsBR,cAAc,CAAE5N,KAAF,EAAS2E,EAAT,CAAd,IAA+B,EAA3D;AACA,UAAMkK,QAAQ,GAAGC,iBAAiB,CAAEX,IAAF,EAAQC,KAAR,CAAlC;AAEA,WAAO;AACNzJ,MAAAA,EADM;AAENnE,MAAAA,IAAI,EAAE,YAFA;AAGNmO,MAAAA,iBAAiB,EAAE;AAAEwB,QAAAA,GAAG,EAAEP,aAAa,CAACjL;AAArB,OAHb;AAIN2J,MAAAA,KAAK,EAAEsB,aAAa,CAACtB,KAAd,CAAoBwB,GAJrB;AAKNzB,MAAAA,IALM;AAMNG,MAAAA,QAAQ,EAAE,UANJ;AAONI,MAAAA,QAAQ,EAAE,CAAE,UAAF,CAPJ;AAQNQ,MAAAA,UAAU,EAAE,KARN;AASNI,MAAAA,OAAO,EAAE,CATH;AASM;AACZX,MAAAA,QAVM;AAWNgB,MAAAA,OAAO,EAAED,aAAa,CAACC,OAAd,CAAsBC;AAXzB,KAAP;AAaA,GA9CD;;AAgDA,QAAMM,0BAA0B,GAAG1E,4BAA4B,CAC9D1L,KAD8D,EAE9D,YAF8D,EAG9DmB,YAH8D,CAA5B,GAKhCkP,iBAAiB,CAAErQ,KAAF,CAAjB,CACCgD,MADD,CAEG4M,aAAF,IACC;AACA;AACA;AACA;AACAA,EAAAA,aAAa,CAACU,sBAAd,KAAyC,OAAzC,IACAV,aAAa,CAACU,sBAAd,KAAyC,EADzC,IAEA,CAAEV,aAAa,CAACU,sBATlB,EAWCzO,GAXD,CAWM8N,8BAXN,CALgC,GAiBhC,EAjBH;AAmBA,QAAMY,0BAA0B,GAAGrB,kBAAkB,CAAElP,KAAF,EAAS;AAC7DmP,IAAAA,UAAU,EAAE;AADiD,GAAT,CAArD;AAIA,QAAMqB,sBAAsB,GAAG/R,aAAa,GAC1CuE,MAD6B,CACnB4E,SAAF,IACRmG,6BAA6B,CAAE/N,KAAF,EAAS4H,SAAT,EAAoBzG,YAApB,CAFA,EAI7BU,GAJ6B,CAIxB0O,0BAJwB,CAA/B;AAMA,QAAME,KAAK,GAAGD,sBAAsB,CAAC/N,MAAvB,CAA+B,CAAEC,WAAF,EAAe8I,IAAf,KAAyB;AACrE,UAAM;AAAE+D,MAAAA,UAAU,GAAG;AAAf,QAAsB/D,IAA5B,CADqE,CAErE;;AACA,QAAK,CAAE+D,UAAU,CAAC5H,IAAX,CAAiB,CAAE;AAAE+I,MAAAA;AAAF,KAAF,KAAqBA,SAAtC,CAAP,EAA2D;AAC1DhO,MAAAA,WAAW,CAACP,IAAZ,CAAkBqJ,IAAlB;AACA;;AACD,QAAK+D,UAAU,CAAC/M,MAAhB,EAAyB;AACxB,YAAMmO,eAAe,GAAG3C,oBAAoB,CAAEhO,KAAF,EAASwL,IAAT,CAA5C;AACA9I,MAAAA,WAAW,CAACP,IAAZ,CAAkB,GAAGoN,UAAU,CAAC1N,GAAX,CAAgB8O,eAAhB,CAArB;AACA;;AACD,WAAOjO,WAAP;AACA,GAXa,EAWX,EAXW,CAAd,CA9FiC,CA2GjC;AACA;AACA;AACA;AACA;;AACA,QAAMkO,WAAW,GAAG,CAAEzQ,MAAF,EAAUD,KAAV,KAAqB;AACxC,UAAM;AAAE2Q,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAoB3Q,MAA1B;AACA,UAAM4Q,IAAI,GAAG7Q,KAAK,CAACM,IAAN,CAAWwQ,UAAX,CAAuB,OAAvB,IAAmCH,IAAnC,GAA0CC,OAAvD;AAEAC,IAAAA,IAAI,CAAC5O,IAAL,CAAWjC,KAAX;AACA,WAAOC,MAAP;AACA,GAND;;AAOA,QAAM;AAAE0Q,IAAAA,IAAI,EAAEI,SAAR;AAAmBH,IAAAA,OAAO,EAAEI;AAA5B,MAA6CT,KAAK,CAAChO,MAAN,CAClDmO,WADkD,EAElD;AAAEC,IAAAA,IAAI,EAAE,EAAR;AAAYC,IAAAA,OAAO,EAAE;AAArB,GAFkD,CAAnD;AAIA,QAAMK,gBAAgB,GAAG,CAAE,GAAGF,SAAL,EAAgB,GAAGC,YAAnB,CAAzB;AACA,SAAO,CAAE,GAAGC,gBAAL,EAAuB,GAAGf,0BAA1B,CAAP;AACA,CA9H4C,EA+H7C,CAAEpQ,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAD0B,EAE1BnB,KAAK,CAACG,MAAN,CAAaC,UAFa,EAG1BJ,KAAK,CAACG,MAAN,CAAawB,KAHa,EAI1B3B,KAAK,CAAC6N,WAAN,CAAkBC,WAJQ,EAK1B9N,KAAK,CAACkL,QAAN,CAAeS,iBALW,EAM1B3L,KAAK,CAACkL,QAAN,CAAeE,YANW,EAO1BiF,iBAAiB,CAAErQ,KAAF,CAPS,EAQ1BvB,aAAa,EARa,CA/HkB,CAAvC;AA2IP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM2S,sBAAsB,GAAG7S,cAAc,CACnD,CAAEyB,KAAF,EAASG,MAAT,EAAiBgB,YAAY,GAAG,IAAhC,KAA0C;AACzC,QAAMkQ,gBAAgB,GAAGxO,KAAK,CAACC,OAAN,CAAe3C,MAAf,IAA0BA,MAA1B,GAAmC,CAAEA,MAAF,CAA5D;AACA,QAAMmR,2BAA2B,GAAGpC,kBAAkB,CAAElP,KAAF,EAAS;AAC9DmP,IAAAA,UAAU,EAAE;AADkD,GAAT,CAAtD;AAGA,QAAMoC,uBAAuB,GAAG9S,aAAa,GAC3CuE,MAD8B,CACpB4E,SAAF,IACRmG,6BAA6B,CAAE/N,KAAF,EAAS4H,SAAT,EAAoBzG,YAApB,CAFC,EAI9BU,GAJ8B,CAIzByP,2BAJyB,CAAhC;AAMA,QAAME,WAAW,GAAGC,MAAM,CAACC,WAAP,CACnBD,MAAM,CAACE,OAAP,CAAgBJ,uBAAhB,EAA0C1P,GAA1C,CAA+C,CAAE,GAAI0H,KAAJ,CAAF,KAAmB,CACjEA,KAAK,CAAC/I,IAD2D,EAEjE+I,KAFiE,CAAlE,CADmB,CAApB;AAOA,QAAMqI,kBAAkB,GAAGhT,+BAA+B,CACzDyS,gBADyD,CAA/B,CAEzB5O,MAFyB,CAEjB,CAAEC,WAAF,EAAexC,KAAf,KAA0B;AACnC,QAAKsR,WAAW,CAAEtR,KAAK,EAAEM,IAAT,CAAhB,EAAkC;AACjCkC,MAAAA,WAAW,CAACP,IAAZ,CAAkBqP,WAAW,CAAEtR,KAAK,CAACM,IAAR,CAA7B;AACA;;AACD,WAAOkC,WAAP;AACA,GAP0B,EAOxB,EAPwB,CAA3B;AAQA,SAAOnD,OAAO,CACbqS,kBADa,EAEX1R,KAAF,IAAasR,WAAW,CAAEtR,KAAK,CAACM,IAAR,CAAX,CAA0BqO,QAF1B,EAGb,MAHa,CAAd;AAKA,CAhCkD,EAiCnD,CAAE7O,KAAF,EAASG,MAAT,EAAiBgB,YAAjB,KAAmC,CAClCnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CADkC,EAElCnB,KAAK,CAACG,MAAN,CAAaC,UAFqB,EAGlCJ,KAAK,CAAC6N,WAAN,CAAkBC,WAHgB,EAIlC9N,KAAK,CAACkL,QAAN,CAAeS,iBAJmB,EAKlC3L,KAAK,CAACkL,QAAN,CAAeE,YALmB,EAMlC3M,aAAa,EANqB,CAjCgB,CAA7C;AA2CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMoT,gBAAgB,GAAGtT,cAAc,CAC7C,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC,QAAM2Q,YAAY,GAAGrT,aAAa,GAAGkJ,IAAhB,CAAwBC,SAAF,IAC1CmG,6BAA6B,CAAE/N,KAAF,EAAS4H,SAAT,EAAoBzG,YAApB,CADT,CAArB;;AAGA,MAAK2Q,YAAL,EAAoB;AACnB,WAAO,IAAP;AACA;;AACD,QAAMC,gBAAgB,GACrBrG,4BAA4B,CAAE1L,KAAF,EAAS,YAAT,EAAuBmB,YAAvB,CAA5B,IACAkP,iBAAiB,CAAErQ,KAAF,CAAjB,CAA2BwC,MAA3B,GAAoC,CAFrC;AAIA,SAAOuP,gBAAP;AACA,CAb4C,EAc7C,CAAE/R,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAD0B,EAE1BnB,KAAK,CAACG,MAAN,CAAaC,UAFa,EAG1BJ,KAAK,CAACkL,QAAN,CAAeS,iBAHW,EAI1B3L,KAAK,CAACkL,QAAN,CAAeE,YAJW,EAK1BiF,iBAAiB,CAAErQ,KAAF,CALS,EAM1BvB,aAAa,EANa,CAdkB,CAAvC;AAwBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMuT,gBAAgB,GAAGzT,cAAc,CAC7C,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC,MAAK,CAAEA,YAAP,EAAsB;AACrB;AACA;;AAED,QAAM8Q,UAAU,GAAGxT,aAAa,GAAGuE,MAAhB,CAA0B4E,SAAF,IAC1CmG,6BAA6B,CAAE/N,KAAF,EAAS4H,SAAT,EAAoBzG,YAApB,CADX,CAAnB;AAGA,QAAM4Q,gBAAgB,GACrBrG,4BAA4B,CAAE1L,KAAF,EAAS,YAAT,EAAuBmB,YAAvB,CAA5B,IACAkP,iBAAiB,CAAErQ,KAAF,CAAjB,CAA2BwC,MAA3B,GAAoC,CAFrC;AAIA,SAAO,CACN,GAAGyP,UADG,EAEN,IAAKF,gBAAgB,GAAG,CAAE,YAAF,CAAH,GAAsB,EAA3C,CAFM,CAAP;AAIA,CAjB4C,EAkB7C,CAAE/R,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAD0B,EAE1BnB,KAAK,CAACG,MAAN,CAAaC,UAFa,EAG1BJ,KAAK,CAACkL,QAAN,CAAeS,iBAHW,EAI1B3L,KAAK,CAACkL,QAAN,CAAeE,YAJW,EAK1BiF,iBAAiB,CAAErQ,KAAF,CALS,EAM1BvB,aAAa,EANa,CAlBkB,CAAvC;AA4BP,OAAO,MAAMyT,8BAA8B,GAAG3T,cAAc,CAC3D,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC9B,EAAAA,UAAU,CACT,sEADS,EAET;AACC8S,IAAAA,WAAW,EACV,wDAFF;AAGC3Q,IAAAA,KAAK,EAAE,KAHR;AAICC,IAAAA,OAAO,EAAE;AAJV,GAFS,CAAV;AASA,SAAOuQ,gBAAgB,CAAEhS,KAAF,EAASmB,YAAT,CAAvB;AACA,CAZ0D,EAa3D,CAAEnB,KAAF,EAASmB,YAAT,KAA2B,CAC1B,GAAG6Q,gBAAgB,CAACrL,aAAjB,CAAgC3G,KAAhC,EAAuCmB,YAAvC,CADuB,CAbgC,CAArD;AAkBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMiR,oBAAoB,GAAG7T,cAAc,CACjD,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC,MAAK,CAAEA,YAAP,EAAsB;AACrB;AACA;;AACD,QAAMkR,YAAY,GACjBrS,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,GAAyCkR,YAD1C;AAEA,QAAMC,YAAY,GACjBtS,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,GAAyCmR,YAD1C;;AAEA,MAAK,CAAED,YAAF,IAAkB,CAAEC,YAAzB,EAAwC;AACvC;AACA;;AACD,MAAK,OAAOA,YAAP,KAAwB,UAA7B,EAA0C;AACzC,WAAOA,YAAY,CAAExR,QAAQ,CAAEd,KAAF,EAASmB,YAAT,CAAV,CAAZ,GACJkR,YADI,GAEJ,IAFH;AAGA;;AACD,SAAOA,YAAP;AACA,CAlBgD,EAmBjD,CAAErS,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAD0B,EAE1BnB,KAAK,CAACG,MAAN,CAAaa,IAAb,CAAkBX,GAAlB,CAAuBc,YAAvB,CAF0B,CAnBsB,CAA3C;AAyBP,OAAO,MAAMoR,kCAAkC,GAAGhU,cAAc,CAC/D,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC9B,EAAAA,UAAU,CACT,0EADS,EAET;AACC8S,IAAAA,WAAW,EACV,4DAFF;AAGC3Q,IAAAA,KAAK,EAAE,KAHR;AAICC,IAAAA,OAAO,EAAE;AAJV,GAFS,CAAV;AASA,SAAO2Q,oBAAoB,CAAEpS,KAAF,EAASmB,YAAT,CAA3B;AACA,CAZ8D,EAa/D,CAAEnB,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAD0B,EAE1BnB,KAAK,CAACG,MAAN,CAAaa,IAAb,CAAkBX,GAAlB,CAAuBc,YAAvB,CAF0B,CAboC,CAAzD;;AAmBP,MAAMqR,uBAAuB,GAAG,CAAErS,MAAF,EAAUwL,iBAAV,KAAiC;AAChE,MAAK,OAAOA,iBAAP,KAA6B,SAAlC,EAA8C;AAC7C,WAAOA,iBAAP;AACA;;AAED,QAAM8G,WAAW,GAAG,CAAE,GAAGtS,MAAL,CAApB;;AACA,SAAQsS,WAAW,CAACjQ,MAAZ,GAAqB,CAA7B,EAAiC;AAChC,UAAMtC,KAAK,GAAGuS,WAAW,CAACC,KAAZ,EAAd;AAEA,UAAMC,SAAS,GAAGrH,cAAc,CAC/BK,iBAD+B,EAE/BzL,KAAK,CAACM,IAAN,IAAcN,KAAK,CAACqC,SAFW,EAG/B,IAH+B,CAAhC;;AAKA,QAAK,CAAEoQ,SAAP,EAAmB;AAClB,aAAO,KAAP;AACA;;AAEDzS,IAAAA,KAAK,CAACoB,WAAN,EAAmBsR,OAAnB,CAA8BC,UAAF,IAAkB;AAC7CJ,MAAAA,WAAW,CAACtQ,IAAZ,CAAkB0Q,UAAlB;AACA,KAFD;AAGA;;AAED,SAAO,IAAP;AACA,CAxBD;;AA0BA,SAASC,mBAAT,CAA8B9S,KAA9B,EAAsC;AAAA;;AACrC,QAAM+S,cAAc,4BACnB/S,KAAK,EAAEkL,QAAP,EAAiB8H,4BADE,yEAC8BpT,WADlD;AAGA,SAAOmT,cAAc,CACnB/P,MADK,CAEH4M,aAAF,IACCA,aAAa,CAACU,sBAAd,KAAyC,UAHrC,EAKLzO,GALK,CAKE+N,aAAF,IAAqB;AAC1B,WAAO;AACNpP,MAAAA,IAAI,EAAG,cAAcoP,aAAa,CAACjL,EAAI,EADjC;AAEN2J,MAAAA,KAAK,EAAEsB,aAAa,CAACtB,KAAd,CAAoBwB,GAFrB;AAGNmD,MAAAA,UAAU,EAAE,CAAE,QAAF,CAHN;AAINpD,MAAAA,OAAO,EAAED,aAAa,CAACC,OAAd,CAAsBC;AAJzB,KAAP;AAMA,GAZK,CAAP;AAaA;;AAED,OAAO,MAAMoD,8BAA8B,GAAG3U,cAAc,CAC3D,CAAEyB,KAAF,EAASmT,WAAT,KAA0B;AACzB,QAAMC,QAAQ,GAAGpT,KAAK,CAACkL,QAAN,CAAemI,2BAAhC;AACA,QAAMC,gBAAgB,GAAGR,mBAAmB,CAAE9S,KAAF,CAA5C;AAEA,QAAMuT,OAAO,GAAG,CAAE,GAAGH,QAAL,EAAe,GAAGE,gBAAlB,EAAqCE,IAArC,CACf,CAAE;AAAEhT,IAAAA;AAAF,GAAF,KAAgBA,IAAI,KAAK2S,WADV,CAAhB;;AAGA,MAAK,CAAEI,OAAP,EAAiB;AAChB,WAAO,IAAP;AACA;;AACD,SAAO,EACN,GAAGA,OADG;AAENpT,IAAAA,MAAM,EAAEtB,KAAK,CAAE0U,OAAO,CAAC1D,OAAV,EAAmB;AAC/B4D,MAAAA,2BAA2B,EAAE;AADE,KAAnB;AAFP,GAAP;AAMA,CAjB0D,EAkBzDzT,KAAF,IAAa,CACZA,KAAK,CAACkL,QAAN,CAAemI,2BADH,EAEZrT,KAAK,CAACkL,QAAN,CAAe8H,4BAFH,CAlB8C,CAArD;AAwBP,MAAMU,qBAAqB,GAAGnV,cAAc,CACzCyB,KAAF,IAAa;AACZ,QAAMoT,QAAQ,GAAGpT,KAAK,CAACkL,QAAN,CAAemI,2BAAhC;AACA,QAAMC,gBAAgB,GAAGR,mBAAmB,CAAE9S,KAAF,CAA5C;AAEA,QAAM;AAAE2L,IAAAA;AAAF,MAAwBC,WAAW,CAAE5L,KAAF,CAAzC;AAEA,QAAM2T,cAAc,GAAG,CAAE,GAAGP,QAAL,EAAe,GAAGE,gBAAlB,EACrBtQ,MADqB,CACb,CAAE;AAAE4Q,IAAAA,QAAQ,GAAG;AAAb,GAAF,KAA2B,CAAC,CAAEA,QADjB,EAErB/R,GAFqB,CAEhB,CAAE;AAAErB,IAAAA;AAAF,GAAF,KACL0S,8BAA8B,CAAElT,KAAF,EAASQ,IAAT,CAHT,CAAvB;AAKA,QAAMqT,eAAe,GAAGF,cAAc,CAAC3Q,MAAf,CAAuB,CAAE;AAAE7C,IAAAA;AAAF,GAAF,KAC9CqS,uBAAuB,CAAErS,MAAF,EAAUwL,iBAAV,CADA,CAAxB;AAGA,SAAOkI,eAAP;AACA,CAhB0C,EAiBzC7T,KAAF,IAAa,CACZA,KAAK,CAACkL,QAAN,CAAemI,2BADH,EAEZrT,KAAK,CAACkL,QAAN,CAAe8H,4BAFH,EAGZhT,KAAK,CAACkL,QAAN,CAAeS,iBAHH,CAjB8B,CAA5C;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMmI,gCAAgC,GAAGvV,cAAc,CAC7D,CAAEyB,KAAF,EAASmB,YAAY,GAAG,IAAxB,KAAkC;AACjC,QAAM4S,uBAAuB,GAAGL,qBAAqB,CAAE1T,KAAF,CAArD;AACA,QAAMgU,eAAe,GAAGD,uBAAuB,CAAC/Q,MAAxB,CACvB,CAAE;AAAE7C,IAAAA;AAAF,GAAF,KACCA,MAAM,CAAC6M,KAAP,CAAc,CAAE;AAAExM,IAAAA;AAAF,GAAF,KACboM,kBAAkB,CAAE5M,KAAF,EAASQ,IAAT,EAAeW,YAAf,CADnB,CAFsB,CAAxB;AAOA,SAAO6S,eAAP;AACA,CAX4D,EAY7D,CAAEhU,KAAF,EAASmB,YAAT,KAA2B,CAC1BnB,KAAK,CAACkL,QAAN,CAAemI,2BADW,EAE1BrT,KAAK,CAACkL,QAAN,CAAe8H,4BAFW,EAG1BhT,KAAK,CAACkL,QAAN,CAAeS,iBAHW,EAI1B3L,KAAK,CAACkL,QAAN,CAAeE,YAJW,EAK1BpL,KAAK,CAAC6M,iBAAN,CAAyB1L,YAAzB,CAL0B,EAM1BnB,KAAK,CAACG,MAAN,CAAaC,UAAb,CAAwBC,GAAxB,CAA6Bc,YAA7B,CAN0B,CAZkC,CAAvD;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM8S,uBAAuB,GAAG1V,cAAc,CACpD,CAAEyB,KAAF,EAAS4C,UAAT,EAAqBzB,YAAY,GAAG,IAApC,KAA8C;AAC7C,MAAK,CAAEyB,UAAP,EAAoB,OAAOhD,WAAP;;AACpB,QAAMwT,QAAQ,GAAGU,gCAAgC,CAChD9T,KADgD,EAEhDmB,YAFgD,CAAjD;;AAIA,QAAM+S,oBAAoB,GAAGrR,KAAK,CAACC,OAAN,CAAeF,UAAf,IAC1BA,UAD0B,GAE1B,CAAEA,UAAF,CAFH;AAGA,QAAMuR,gBAAgB,GAAGf,QAAQ,CAACpQ,MAAT,CAAmBuQ,OAAF,IACzCA,OAAO,EAAEtB,UAAT,EAAqBtK,IAArB,GAA+BpF,SAAF,IAC5B2R,oBAAoB,CAACjR,QAArB,CAA+BV,SAA/B,CADD,CADwB,CAAzB;;AAKA,MAAK4R,gBAAgB,CAAC3R,MAAjB,KAA4B,CAAjC,EAAqC;AACpC,WAAO5C,WAAP;AACA;;AACD,SAAOuU,gBAAP;AACA,CAnBmD,EAoBpD,CAAEnU,KAAF,EAAS4C,UAAT,EAAqBzB,YAArB,KAAuC,CACtC,GAAG2S,gCAAgC,CAACnN,aAAjC,CACF3G,KADE,EAEFmB,YAFE,CADmC,CApBa,CAA9C;AA4BP,OAAO,MAAMiT,qCAAqC,GAAG7V,cAAc,CAClE,CAAEyB,KAAF,EAAS4C,UAAT,EAAqBzB,YAAY,GAAG,IAApC,KAA8C;AAC7C9B,EAAAA,UAAU,CACT,6EADS,EAET;AACC8S,IAAAA,WAAW,EACV,+DAFF;AAGC3Q,IAAAA,KAAK,EAAE,KAHR;AAICC,IAAAA,OAAO,EAAE;AAJV,GAFS,CAAV;AASA,SAAOwS,uBAAuB,CAAEjU,KAAF,EAAS4C,UAAT,EAAqBzB,YAArB,CAA9B;AACA,CAZiE,EAalE,CAAEnB,KAAF,EAAS4C,UAAT,EAAqBzB,YAArB,KAAuC,CACtC,GAAG2S,gCAAgC,CAACnN,aAAjC,CACF3G,KADE,EAEFmB,YAFE,CADmC,CAb2B,CAA5D;AAqBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMkT,sCAAsC,GAAG9V,cAAc,CACnE,CAAEyB,KAAF,EAASG,MAAT,EAAiBgB,YAAY,GAAG,IAAhC,KAA0C;AACzC,MAAK,CAAEhB,MAAP,EAAgB,OAAOP,WAAP;AAChB;AACF;AACA;AACA;AACA;AACA;AACA;;AACE,MACCO,MAAM,CAACwH,IAAP,CACC,CAAE;AAAE1H,IAAAA,QAAF;AAAYqB,IAAAA;AAAZ,GAAF,KACCA,WAAW,CAACkB,MAAZ,IACAnB,wBAAwB,CAAErB,KAAF,EAASC,QAAT,CAH1B,CADD,EAME;AACD,WAAOL,WAAP;AACA,GAjBwC,CAmBzC;;;AACA,QAAM0U,kBAAkB,GAAGzR,KAAK,CAAC0R,IAAN,CAC1B,IAAIzU,GAAJ,CAASK,MAAM,CAAC0B,GAAP,CAAY,CAAE;AAAErB,IAAAA;AAAF,GAAF,KAAgBA,IAA5B,CAAT,CAD0B,CAA3B;AAGA;AACF;AACA;AACA;AACA;AACA;;AACE,SAAOyT,uBAAuB,CAC7BjU,KAD6B,EAE7BsU,kBAF6B,EAG7BnT,YAH6B,CAA9B;AAKA,CAnCkE,EAoCnE,CAAEnB,KAAF,EAASG,MAAT,EAAiBgB,YAAjB,KAAmC,CAClC,GAAG8S,uBAAuB,CAACtN,aAAxB,CAAuC3G,KAAvC,EAA8CmB,YAA9C,CAD+B,CApCgC,CAA7D;AAyCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASkK,oBAAT,CAA+BrL,KAA/B,EAAsCC,QAAtC,EAAiD;AACvD,SAAOD,KAAK,CAAC6M,iBAAN,CAAyB5M,QAAzB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS2L,WAAT,CAAsB5L,KAAtB,EAA8B;AACpC,SAAOA,KAAK,CAACkL,QAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASsJ,YAAT,CAAuBxU,KAAvB,EAA+B;AACrC,SAAOA,KAAK,CAACkL,QAAN,CAAeuJ,SAAtB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,2BAAT,CAAsC1U,KAAtC,EAA8C;AACpD,SAAOA,KAAK,CAACG,MAAN,CAAawU,kBAApB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,2CAA2C,GAAGrW,cAAc,CACxE,CAAEyB,KAAF,EAAS+B,SAAS,GAAG,EAArB,KAA6B;AAC5B,SAAOA,SAAS,CAACU,MAAV,CAAkB,CAAEoS,0BAAF,EAA8B5U,QAA9B,KAA4C;AACpE,QAAK,CAAED,KAAK,CAAC6M,iBAAN,CAAyB5M,QAAzB,CAAP,EAA6C;AAC5C,aAAO4U,0BAAP;AACA;;AAED,WAAO,EACN,GAAGA,0BADG;AAEN,OAAE5U,QAAF,GAAcD,KAAK,CAAC6M,iBAAN,CAAyB5M,QAAzB;AAFR,KAAP;AAIA,GATM,EASJ,EATI,CAAP;AAUA,CAZuE,EAatED,KAAF,IAAa,CAAEA,KAAK,CAAC6M,iBAAR,CAb2D,CAAlE;AAgBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMiI,mCAAmC,GAAGvW,cAAc,CAChE,CAAEyB,KAAF,EAASmQ,GAAT,KAAkB;AACjB,QAAMP,aAAa,GAAGS,iBAAiB,CAAErQ,KAAF,CAAjB,CAA2BwT,IAA3B,CACnBtT,KAAF,IAAaA,KAAK,CAACyE,EAAN,KAAawL,GADL,CAAtB;;AAGA,MAAK,CAAEP,aAAP,EAAuB;AACtB,WAAO,IAAP;AACA;;AAED,SAAOA,aAAa,CAACtB,KAAd,EAAqBwB,GAA5B;AACA,CAV+D,EAW9D9P,KAAF,IAAa,CAAEqQ,iBAAiB,CAAErQ,KAAF,CAAnB,CAXmD,CAA1D;AAcP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAAS+U,kCAAT,CAA6C/U,KAA7C,EAAqD;AAC3D;AACA;AACA;AACA;AACA;AACA,SAAOA,KAAK,CAACG,MAAN,CAAa6U,eAApB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0CAAT,CAAqDjV,KAArD,EAA6D;AACnE,SAAOA,KAAK,CAACkV,yBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAAS7E,iBAAT,CAA4BrQ,KAA5B,EAAoC;AAAA;;AACnC,mCAAOA,KAAK,EAAEkL,QAAP,EAAiB8H,4BAAxB,2EAAwDpT,WAAxD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASuV,gBAAT,CAA2BnV,KAA3B,EAAmC;AACzC,SAAOA,KAAK,CAACoV,UAAN,KAAqB,YAA5B;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,uBAAT,CAAkCrV,KAAlC,EAA0C;AAChD,SAAOA,KAAK,CAACoV,UAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,sBAAT,CAAiCtV,KAAjC,EAAyC;AAC/C,SAAOA,KAAK,CAACsV,sBAAb;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6BvV,KAA7B,EAAqC;AAC3C,SAAO,CAAC,CAAEA,KAAK,CAACwV,qBAAhB;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,kBAAT,CAA6BzV,KAA7B,EAAoCC,QAApC,EAA+C;AACrD,SAAOD,KAAK,CAAC0V,gBAAN,KAA2BzV,QAAlC;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASoB,wBAAT,CAAmCrB,KAAnC,EAA0CC,QAA1C,EAAqD;AAC3D,SAAO,CAAC,CAAED,KAAK,CAACG,MAAN,CAAawV,qBAAb,CAAoC1V,QAApC,CAAV;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAM2V,0CAA0C,GAAG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","sourcesContent":["/**\n * External dependencies\n */\nimport createSelector from 'rememo';\n\n/**\n * WordPress dependencies\n */\nimport {\n\tgetBlockType,\n\tgetBlockTypes,\n\tgetBlockVariations,\n\thasBlockSupport,\n\tgetPossibleBlockTransformations,\n\tparse,\n\tswitchToBlockType,\n} from '@wordpress/blocks';\nimport { Platform } from '@wordpress/element';\nimport { applyFilters } from '@wordpress/hooks';\nimport { symbol } from '@wordpress/icons';\nimport { create, remove, toHTMLString } from '@wordpress/rich-text';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { mapRichTextSettings } from './utils';\nimport { orderBy } from '../utils/sorting';\nimport { getBlockEditingMode } from './private-selectors';\n\n/**\n * A block selection object.\n *\n * @typedef {Object} WPBlockSelection\n *\n * @property {string} clientId     A block client ID.\n * @property {string} attributeKey A block attribute key.\n * @property {number} offset       An attribute value offset, based on the rich\n *                                 text value. See `wp.richText.create`.\n */\n\n// Module constants.\nconst MILLISECONDS_PER_HOUR = 3600 * 1000;\nconst MILLISECONDS_PER_DAY = 24 * 3600 * 1000;\nconst MILLISECONDS_PER_WEEK = 7 * 24 * 3600 * 1000;\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shared reference to an empty Set for cases where it is important to avoid\n * returning a new Set reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Set}\n */\nconst EMPTY_SET = new Set();\n\n/**\n * Returns a block's name given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {string} Block name.\n */\nexport function getBlockName( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tconst socialLinkName = 'core/social-link';\n\n\tif ( Platform.OS !== 'web' && block?.name === socialLinkName ) {\n\t\tconst attributes = state.blocks.attributes.get( clientId );\n\t\tconst { service } = attributes ?? {};\n\n\t\treturn service ? `${ socialLinkName }-${ service }` : socialLinkName;\n\t}\n\treturn block ? block.name : null;\n}\n\n/**\n * Returns whether a block is valid or not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Is Valid.\n */\nexport function isBlockValid( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\treturn !! block && block.isValid;\n}\n\n/**\n * Returns a block's attributes given its client ID, or null if no block exists with\n * the client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object?} Block attributes.\n */\nexport function getBlockAttributes( state, clientId ) {\n\tconst block = state.blocks.byClientId.get( clientId );\n\tif ( ! block ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.attributes.get( clientId );\n}\n\n/**\n * Returns a block given its client ID. This is a parsed copy of the block,\n * containing its `blockName`, `clientId`, and current `attributes` state. This\n * is not the block's registration settings, which must be retrieved from the\n * blocks module registration store.\n *\n * getBlock recurses through its inner blocks until all its children blocks have\n * been retrieved. Note that getBlock will not return the child inner blocks of\n * an inner block controller. This is because an inner block controller syncs\n * itself with its own entity, and should therefore not be included with the\n * blocks of a different entity. For example, say you call `getBlocks( TP )` to\n * get the blocks of a template part. If another template part is a child of TP,\n * then the nested template part's child blocks will not be returned. This way,\n * the template block itself is considered part of the parent, but the children\n * are not.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Parsed block object.\n */\nexport function getBlock( state, clientId ) {\n\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\treturn null;\n\t}\n\n\treturn state.blocks.tree.get( clientId );\n}\n\nexport const __unstableGetBlockWithoutInnerBlocks = createSelector(\n\t( state, clientId ) => {\n\t\tif ( ! state.blocks.byClientId.has( clientId ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn {\n\t\t\t...state.blocks.byClientId.get( clientId ),\n\t\t\tattributes: getBlockAttributes( state, clientId ),\n\t\t};\n\t},\n\t( state, clientId ) => [\n\t\tstate.blocks.byClientId.get( clientId ),\n\t\tstate.blocks.attributes.get( clientId ),\n\t]\n);\n\n/**\n * Returns all block objects for the current post being edited as an array in\n * the order they appear in the post. Note that this will exclude child blocks\n * of nested inner block controllers.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Post blocks.\n */\nexport function getBlocks( state, rootClientId ) {\n\tconst treeKey =\n\t\t! rootClientId || ! areInnerBlocksControlled( state, rootClientId )\n\t\t\t? rootClientId || ''\n\t\t\t: 'controlled||' + rootClientId;\n\treturn state.blocks.tree.get( treeKey )?.innerBlocks || EMPTY_ARRAY;\n}\n\n/**\n * Returns a stripped down block object containing only its client ID,\n * and its inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Client ID of the block to get.\n *\n * @return {Object} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdWithClientIdsTree = createSelector(\n\t( state, clientId ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdWithClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn {\n\t\t\tclientId,\n\t\t\tinnerBlocks: __unstableGetClientIdsTree( state, clientId ),\n\t\t};\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the block tree represented in the block-editor store from the\n * given root, consisting of stripped down block objects containing only\n * their client IDs, and their inner blocks' client IDs.\n *\n * @deprecated\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Client IDs of the post blocks.\n */\nexport const __unstableGetClientIdsTree = createSelector(\n\t( state, rootClientId = '' ) => {\n\t\tdeprecated(\n\t\t\t\"wp.data.select( 'core/block-editor' ).__unstableGetClientIdsTree\",\n\t\t\t{\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.5',\n\t\t\t}\n\t\t);\n\t\treturn getBlockOrder( state, rootClientId ).map( ( clientId ) =>\n\t\t\t__unstableGetClientIdWithClientIdsTree( state, clientId )\n\t\t);\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of all descendants of the blocks\n * given. Returned ids are ordered first by the order of the ids given, then\n * by the order that they appear in the editor.\n *\n * @param {Object} state     Global application state.\n * @param {Array}  clientIds Array of blocks to inspect.\n *\n * @return {Array} ids of descendants.\n */\nexport const getClientIdsOfDescendants = createSelector(\n\t( state, clientIds ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const givenId of clientIds ) {\n\t\t\tfor ( const descendantId of getBlockOrder( state, givenId ) ) {\n\t\t\t\tcollectedIds.push(\n\t\t\t\t\tdescendantId,\n\t\t\t\t\t...getClientIdsOfDescendants( state, [ descendantId ] )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns an array containing the clientIds of the top-level blocks and\n * their descendants of any depth (for nested blocks). Ids are returned\n * in the same order that they appear in the editor.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} ids of top-level and descendant blocks.\n */\nexport const getClientIdsWithDescendants = createSelector(\n\t( state ) => {\n\t\tconst collectedIds = [];\n\t\tfor ( const topLevelId of getBlockOrder( state ) ) {\n\t\t\tcollectedIds.push(\n\t\t\t\ttopLevelId,\n\t\t\t\t...getClientIdsOfDescendants( state, [ topLevelId ] )\n\t\t\t);\n\t\t}\n\t\treturn collectedIds;\n\t},\n\t( state ) => [ state.blocks.order ]\n);\n\n/**\n * Returns the total number of blocks, or the total number of blocks with a specific name in a post.\n * The number returned includes nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if specified only blocks of that type will be counted.\n *\n * @return {number} Number of blocks in the post, or number of blocks with name equal to blockName.\n */\nexport const getGlobalBlockCount = createSelector(\n\t( state, blockName ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tif ( ! blockName ) {\n\t\t\treturn clientIds.length;\n\t\t}\n\t\treturn clientIds.reduce( ( accumulator, clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn block.name === blockName ? accumulator + 1 : accumulator;\n\t\t}, 0 );\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Returns all global blocks that match a blockName. Results include nested blocks.\n *\n * @param {Object}  state     Global application state.\n * @param {?string} blockName Optional block name, if not specified, returns an empty array.\n *\n * @return {Array} Array of clientIds of blocks with name equal to blockName.\n */\nexport const __experimentalGetGlobalBlocksByName = createSelector(\n\t( state, blockName ) => {\n\t\tif ( ! blockName ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\tconst blockNames = Array.isArray( blockName )\n\t\t\t? blockName\n\t\t\t: [ blockName ];\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst foundBlocks = clientIds.filter( ( clientId ) => {\n\t\t\tconst block = state.blocks.byClientId.get( clientId );\n\t\t\treturn blockNames.includes( block.name );\n\t\t} );\n\t\treturn foundBlocks.length > 0 ? foundBlocks : EMPTY_ARRAY;\n\t},\n\t( state ) => [ state.blocks.order, state.blocks.byClientId ]\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * objects.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which blocks are to be returned.\n *\n * @return {WPBlock[]} Block objects.\n */\nexport const getBlocksByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => getBlock( state, clientId )\n\t\t),\n\t( state, clientIds ) =>\n\t\t( Array.isArray( clientIds ) ? clientIds : [ clientIds ] ).map(\n\t\t\t( clientId ) => state.blocks.tree.get( clientId )\n\t\t)\n);\n\n/**\n * Given an array of block client IDs, returns the corresponding array of block\n * names.\n *\n * @param {Object}   state     Editor state.\n * @param {string[]} clientIds Client IDs for which block names are to be returned.\n *\n * @return {string[]} Block names.\n */\nexport const getBlockNamesByClientId = createSelector(\n\t( state, clientIds ) =>\n\t\tgetBlocksByClientId( state, clientIds )\n\t\t\t.filter( Boolean )\n\t\t\t.map( ( block ) => block.name ),\n\t( state, clientIds ) => getBlocksByClientId( state, clientIds )\n);\n\n/**\n * Returns the number of blocks currently present in the post.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {number} Number of blocks in the post.\n */\nexport function getBlockCount( state, rootClientId ) {\n\treturn getBlockOrder( state, rootClientId ).length;\n}\n\n/**\n * Returns the current selection start block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection start information.\n */\nexport function getSelectionStart( state ) {\n\treturn state.selection.selectionStart;\n}\n\n/**\n * Returns the current selection end block client ID, attribute key and text\n * offset.\n *\n * @param {Object} state Block editor state.\n *\n * @return {WPBlockSelection} Selection end information.\n */\nexport function getSelectionEnd( state ) {\n\treturn state.selection.selectionEnd;\n}\n\n/**\n * Returns the current block selection start. This value may be null, and it\n * may represent either a singular block selection or multi-selection start.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection start.\n */\nexport function getBlockSelectionStart( state ) {\n\treturn state.selection.selectionStart.clientId;\n}\n\n/**\n * Returns the current block selection end. This value may be null, and it\n * may represent either a singular block selection or multi-selection end.\n * A selection is singular if its start and end match.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} Client ID of block selection end.\n */\nexport function getBlockSelectionEnd( state ) {\n\treturn state.selection.selectionEnd.clientId;\n}\n\n/**\n * Returns the number of blocks currently selected in the post.\n *\n * @param {Object} state Global application state.\n *\n * @return {number} Number of blocks selected in the post.\n */\nexport function getSelectedBlockCount( state ) {\n\tconst multiSelectedBlockCount =\n\t\tgetMultiSelectedBlockClientIds( state ).length;\n\n\tif ( multiSelectedBlockCount ) {\n\t\treturn multiSelectedBlockCount;\n\t}\n\n\treturn state.selection.selectionStart.clientId ? 1 : 0;\n}\n\n/**\n * Returns true if there is a single selected block, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether a single block is selected.\n */\nexport function hasSelectedBlock( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn (\n\t\t!! selectionStart.clientId &&\n\t\tselectionStart.clientId === selectionEnd.clientId\n\t);\n}\n\n/**\n * Returns the currently selected block client ID, or null if there is no\n * selected block.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Selected block client ID.\n */\nexport function getSelectedBlockClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\tconst { clientId } = selectionStart;\n\n\tif ( ! clientId || clientId !== selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn clientId;\n}\n\n/**\n * Returns the currently selected block, or null if there is no selected block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?Object} Selected block.\n */\nexport function getSelectedBlock( state ) {\n\tconst clientId = getSelectedBlockClientId( state );\n\treturn clientId ? getBlock( state, clientId ) : null;\n}\n\n/**\n * Given a block client ID, returns the root block from which the block is\n * nested, an empty string for top-level blocks, or null if the block does not\n * exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {?string} Root client ID, if exists\n */\nexport function getBlockRootClientId( state, clientId ) {\n\treturn state.blocks.parents.has( clientId )\n\t\t? state.blocks.parents.get( clientId )\n\t\t: null;\n}\n\n/**\n * Given a block client ID, returns the list of all its parents from top to bottom.\n *\n * @param {Object}  state     Editor state.\n * @param {string}  clientId  Block from which to find root client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\tconst parents = [];\n\t\tlet current = clientId;\n\t\twhile ( !! state.blocks.parents.get( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tparents.push( current );\n\t\t}\n\n\t\tif ( ! parents.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn ascending ? parents : parents.reverse();\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n\n/**\n * Given a block client ID and a block name, returns the list of all its parents\n * from top to bottom, filtered by the given name(s). For example, if passed\n * 'core/group' as the blockName, it will only return parents which are group\n * blocks. If passed `[ 'core/group', 'core/cover']`, as the blockName, it will\n * return parents which are group blocks and parents which are cover blocks.\n *\n * @param {Object}          state     Editor state.\n * @param {string}          clientId  Block from which to find root client ID.\n * @param {string|string[]} blockName Block name(s) to filter.\n * @param {boolean}         ascending Order results from bottom to top (true) or top to bottom (false).\n *\n * @return {Array} ClientIDs of the parent blocks.\n */\nexport const getBlockParentsByBlockName = createSelector(\n\t( state, clientId, blockName, ascending = false ) => {\n\t\tconst parents = getBlockParents( state, clientId, ascending );\n\t\tconst hasName = Array.isArray( blockName )\n\t\t\t? ( name ) => blockName.includes( name )\n\t\t\t: ( name ) => blockName === name;\n\t\treturn parents.filter( ( id ) => hasName( getBlockName( state, id ) ) );\n\t},\n\t( state ) => [ state.blocks.parents ]\n);\n/**\n * Given a block client ID, returns the root of the hierarchy from which the block is nested, return the block itself for root level blocks.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find root client ID.\n *\n * @return {string} Root client ID\n */\nexport function getBlockHierarchyRootClientId( state, clientId ) {\n\tlet current = clientId;\n\tlet parent;\n\tdo {\n\t\tparent = current;\n\t\tcurrent = state.blocks.parents.get( current );\n\t} while ( current );\n\treturn parent;\n}\n\n/**\n * Given a block client ID, returns the lowest common ancestor with selected client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block from which to find common ancestor client ID.\n *\n * @return {string} Common ancestor client ID or undefined\n */\nexport function getLowestCommonAncestorWithSelectedBlock( state, clientId ) {\n\tconst selectedId = getSelectedBlockClientId( state );\n\tconst clientParents = [ ...getBlockParents( state, clientId ), clientId ];\n\tconst selectedParents = [\n\t\t...getBlockParents( state, selectedId ),\n\t\tselectedId,\n\t];\n\n\tlet lowestCommonAncestor;\n\n\tconst maxDepth = Math.min( clientParents.length, selectedParents.length );\n\tfor ( let index = 0; index < maxDepth; index++ ) {\n\t\tif ( clientParents[ index ] === selectedParents[ index ] ) {\n\t\t\tlowestCommonAncestor = clientParents[ index ];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn lowestCommonAncestor;\n}\n\n/**\n * Returns the client ID of the block adjacent one at the given reference\n * startClientId and modifier directionality. Defaults start startClientId to\n * the selected block, and direction as next block. Returns null if there is no\n * adjacent block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n * @param {?number} modifier      Directionality multiplier (1 next, -1\n *                                previous).\n *\n * @return {?string} Return the client ID of the block, or null if none exists.\n */\nexport function getAdjacentBlockClientId( state, startClientId, modifier = 1 ) {\n\t// Default to selected block.\n\tif ( startClientId === undefined ) {\n\t\tstartClientId = getSelectedBlockClientId( state );\n\t}\n\n\t// Try multi-selection starting at extent based on modifier.\n\tif ( startClientId === undefined ) {\n\t\tif ( modifier < 0 ) {\n\t\t\tstartClientId = getFirstMultiSelectedBlockClientId( state );\n\t\t} else {\n\t\t\tstartClientId = getLastMultiSelectedBlockClientId( state );\n\t\t}\n\t}\n\n\t// Validate working start client ID.\n\tif ( ! startClientId ) {\n\t\treturn null;\n\t}\n\n\t// Retrieve start block root client ID, being careful to allow the falsey\n\t// empty string top-level root by explicitly testing against null.\n\tconst rootClientId = getBlockRootClientId( state, startClientId );\n\tif ( rootClientId === null ) {\n\t\treturn null;\n\t}\n\n\tconst { order } = state.blocks;\n\tconst orderSet = order.get( rootClientId );\n\tconst index = orderSet.indexOf( startClientId );\n\tconst nextIndex = index + 1 * modifier;\n\n\t// Block was first in set and we're attempting to get previous.\n\tif ( nextIndex < 0 ) {\n\t\treturn null;\n\t}\n\n\t// Block was last in set and we're attempting to get next.\n\tif ( nextIndex === orderSet.length ) {\n\t\treturn null;\n\t}\n\n\t// Assume incremented index is within the set.\n\treturn orderSet[ nextIndex ];\n}\n\n/**\n * Returns the previous block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no previous\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getPreviousBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, -1 );\n}\n\n/**\n * Returns the next block's client ID from the given reference start ID.\n * Defaults start to the selected block. Returns null if there is no next\n * block.\n *\n * @param {Object}  state         Editor state.\n * @param {?string} startClientId Optional client ID of block from which to\n *                                search.\n *\n * @return {?string} Adjacent block's client ID, or null if none exists.\n */\nexport function getNextBlockClientId( state, startClientId ) {\n\treturn getAdjacentBlockClientId( state, startClientId, 1 );\n}\n\n/* eslint-disable jsdoc/valid-types */\n/**\n * Returns the initial caret position for the selected block.\n * This position is to used to position the caret properly when the selected block changes.\n * If the current block is not a RichText, having initial position set to 0 means \"focus block\"\n *\n * @param {Object} state Global application state.\n *\n * @return {0|-1|null} Initial position.\n */\nexport function getSelectedBlocksInitialCaretPosition( state ) {\n\t/* eslint-enable jsdoc/valid-types */\n\treturn state.initialPosition;\n}\n\n/**\n * Returns the current selection set of block client IDs (multiselection or single selection).\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport const getSelectedBlockClientIds = createSelector(\n\t( state ) => {\n\t\tconst { selectionStart, selectionEnd } = state.selection;\n\n\t\tif ( ! selectionStart.clientId || ! selectionEnd.clientId ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\t\treturn [ selectionStart.clientId ];\n\t\t}\n\n\t\t// Retrieve root client ID to aid in retrieving relevant nested block\n\t\t// order, being careful to allow the falsey empty string top-level root\n\t\t// by explicitly testing against null.\n\t\tconst rootClientId = getBlockRootClientId(\n\t\t\tstate,\n\t\t\tselectionStart.clientId\n\t\t);\n\n\t\tif ( rootClientId === null ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\tconst blockOrder = getBlockOrder( state, rootClientId );\n\t\tconst startIndex = blockOrder.indexOf( selectionStart.clientId );\n\t\tconst endIndex = blockOrder.indexOf( selectionEnd.clientId );\n\n\t\tif ( startIndex > endIndex ) {\n\t\t\treturn blockOrder.slice( endIndex, startIndex + 1 );\n\t\t}\n\n\t\treturn blockOrder.slice( startIndex, endIndex + 1 );\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the current multi-selection set of block client IDs, or an empty\n * array if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block client IDs.\n */\nexport function getMultiSelectedBlockClientIds( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\treturn getSelectedBlockClientIds( state );\n}\n\n/**\n * Returns the current multi-selection set of blocks, or an empty array if\n * there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Array} Multi-selected block objects.\n */\nexport const getMultiSelectedBlocks = createSelector(\n\t( state ) => {\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tif ( ! multiSelectedBlockClientIds.length ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\treturn multiSelectedBlockClientIds.map( ( clientId ) =>\n\t\t\tgetBlock( state, clientId )\n\t\t);\n\t},\n\t( state ) => [\n\t\t...getSelectedBlockClientIds.getDependants( state ),\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.blocks.attributes,\n\t]\n);\n\n/**\n * Returns the client ID of the first block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} First block client ID in the multi-selection set.\n */\nexport function getFirstMultiSelectedBlockClientId( state ) {\n\treturn getMultiSelectedBlockClientIds( state )[ 0 ] || null;\n}\n\n/**\n * Returns the client ID of the last block in the multi-selection set, or null\n * if there is no multi-selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Last block client ID in the multi-selection set.\n */\nexport function getLastMultiSelectedBlockClientId( state ) {\n\tconst selectedClientIds = getMultiSelectedBlockClientIds( state );\n\treturn selectedClientIds[ selectedClientIds.length - 1 ] || null;\n}\n\n/**\n * Returns true if a multi-selection exists, and the block corresponding to the\n * specified client ID is the first block of the multi-selection set, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is first in multi-selection.\n */\nexport function isFirstMultiSelectedBlock( state, clientId ) {\n\treturn getFirstMultiSelectedBlockClientId( state ) === clientId;\n}\n\n/**\n * Returns true if the client ID occurs within the block multi-selection, or\n * false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is in multi-selection set.\n */\nexport function isBlockMultiSelected( state, clientId ) {\n\treturn getMultiSelectedBlockClientIds( state ).indexOf( clientId ) !== -1;\n}\n\n/**\n * Returns true if an ancestor of the block is multi-selected, or false\n * otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether an ancestor of the block is in multi-selection\n *                   set.\n */\nexport const isAncestorMultiSelected = createSelector(\n\t( state, clientId ) => {\n\t\tlet ancestorClientId = clientId;\n\t\tlet isMultiSelected = false;\n\t\twhile ( ancestorClientId && ! isMultiSelected ) {\n\t\t\tancestorClientId = getBlockRootClientId( state, ancestorClientId );\n\t\t\tisMultiSelected = isBlockMultiSelected( state, ancestorClientId );\n\t\t}\n\t\treturn isMultiSelected;\n\t},\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t]\n);\n\n/**\n * Returns the client ID of the block which begins the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the first client ID in the selection.\n *\n * @see getFirstMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block beginning multi-selection.\n */\nexport function getMultiSelectedBlocksStartClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionStart.clientId || null;\n}\n\n/**\n * Returns the client ID of the block which ends the multi-selection set, or\n * null if there is no multi-selection.\n *\n * This is not necessarily the last client ID in the selection.\n *\n * @see getLastMultiSelectedBlockClientId\n *\n * @param {Object} state Editor state.\n *\n * @return {?string} Client ID of block ending multi-selection.\n */\nexport function getMultiSelectedBlocksEndClientId( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId === selectionEnd.clientId ) {\n\t\treturn null;\n\t}\n\n\treturn selectionEnd.clientId || null;\n}\n\n/**\n * Returns true if the selection is not partial.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsFullySelected( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t! selectionAnchor.attributeKey &&\n\t\t! selectionFocus.attributeKey &&\n\t\ttypeof selectionAnchor.offset === 'undefined' &&\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t);\n}\n\n/**\n * Returns true if the selection is collapsed.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether the selection is collapsed.\n */\nexport function __unstableIsSelectionCollapsed( state ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\treturn (\n\t\t!! selectionAnchor &&\n\t\t!! selectionFocus &&\n\t\tselectionAnchor.clientId === selectionFocus.clientId &&\n\t\tselectionAnchor.attributeKey === selectionFocus.attributeKey &&\n\t\tselectionAnchor.offset === selectionFocus.offset\n\t);\n}\n\nexport function __unstableSelectionHasUnmergeableBlock( state ) {\n\treturn getSelectedBlockClientIds( state ).some( ( clientId ) => {\n\t\tconst blockName = getBlockName( state, clientId );\n\t\tconst blockType = getBlockType( blockName );\n\t\treturn ! blockType.merge;\n\t} );\n}\n\n/**\n * Check whether the selection is mergeable.\n *\n * @param {Object}  state     Editor state.\n * @param {boolean} isForward Whether to merge forwards.\n *\n * @return {boolean} Whether the selection is mergeable.\n */\nexport function __unstableIsSelectionMergeable( state, isForward ) {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\t// It's not mergeable if the start and end are within the same block.\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) return false;\n\n\t// It's not mergeable if there's no rich text selection.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t)\n\t\treturn false;\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not mergeable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn false;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tlet selectionStart, selectionEnd;\n\n\tif ( anchorIndex > focusIndex ) {\n\t\tselectionStart = selectionFocus;\n\t\tselectionEnd = selectionAnchor;\n\t} else {\n\t\tselectionStart = selectionAnchor;\n\t\tselectionEnd = selectionFocus;\n\t}\n\n\tconst targetBlockClientId = isForward\n\t\t? selectionEnd.clientId\n\t\t: selectionStart.clientId;\n\tconst blockToMergeClientId = isForward\n\t\t? selectionStart.clientId\n\t\t: selectionEnd.clientId;\n\n\tconst targetBlockName = getBlockName( state, targetBlockClientId );\n\tconst targetBlockType = getBlockType( targetBlockName );\n\n\tif ( ! targetBlockType.merge ) return false;\n\n\tconst blockToMerge = getBlock( state, blockToMergeClientId );\n\n\t// It's mergeable if the blocks are of the same type.\n\tif ( blockToMerge.name === targetBlockName ) return true;\n\n\t// If the blocks are of a different type, try to transform the block being\n\t// merged into the same type of block.\n\tconst blocksToMerge = switchToBlockType( blockToMerge, targetBlockName );\n\n\treturn blocksToMerge && blocksToMerge.length;\n}\n\n/**\n * Get partial selected blocks with their content updated\n * based on the selection.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object[]} Updated partial selected blocks.\n */\nexport const __unstableGetSelectedBlocksWithPartialSelection = ( state ) => {\n\tconst selectionAnchor = getSelectionStart( state );\n\tconst selectionFocus = getSelectionEnd( state );\n\n\tif ( selectionAnchor.clientId === selectionFocus.clientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\t// Can't split if the selection is not set.\n\tif (\n\t\t! selectionAnchor.attributeKey ||\n\t\t! selectionFocus.attributeKey ||\n\t\ttypeof selectionAnchor.offset === 'undefined' ||\n\t\ttypeof selectionFocus.offset === 'undefined'\n\t) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst anchorRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionAnchor.clientId\n\t);\n\tconst focusRootClientId = getBlockRootClientId(\n\t\tstate,\n\t\tselectionFocus.clientId\n\t);\n\n\t// It's not splittable if the selection doesn't start and end in the same\n\t// block list. Maybe in the future it should be allowed.\n\tif ( anchorRootClientId !== focusRootClientId ) {\n\t\treturn EMPTY_ARRAY;\n\t}\n\n\tconst blockOrder = getBlockOrder( state, anchorRootClientId );\n\tconst anchorIndex = blockOrder.indexOf( selectionAnchor.clientId );\n\tconst focusIndex = blockOrder.indexOf( selectionFocus.clientId );\n\n\t// Reassign selection start and end based on order.\n\tconst [ selectionStart, selectionEnd ] =\n\t\tanchorIndex > focusIndex\n\t\t\t? [ selectionFocus, selectionAnchor ]\n\t\t\t: [ selectionAnchor, selectionFocus ];\n\n\tconst blockA = getBlock( state, selectionStart.clientId );\n\tconst blockAType = getBlockType( blockA.name );\n\n\tconst blockB = getBlock( state, selectionEnd.clientId );\n\tconst blockBType = getBlockType( blockB.name );\n\n\tconst htmlA = blockA.attributes[ selectionStart.attributeKey ];\n\tconst htmlB = blockB.attributes[ selectionEnd.attributeKey ];\n\n\tconst attributeDefinitionA =\n\t\tblockAType.attributes[ selectionStart.attributeKey ];\n\tconst attributeDefinitionB =\n\t\tblockBType.attributes[ selectionEnd.attributeKey ];\n\n\tlet valueA = create( {\n\t\thtml: htmlA,\n\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t} );\n\tlet valueB = create( {\n\t\thtml: htmlB,\n\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t} );\n\n\tvalueA = remove( valueA, 0, selectionStart.offset );\n\tvalueB = remove( valueB, selectionEnd.offset, valueB.text.length );\n\n\treturn [\n\t\t{\n\t\t\t...blockA,\n\t\t\tattributes: {\n\t\t\t\t...blockA.attributes,\n\t\t\t\t[ selectionStart.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueA,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionA ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\t...blockB,\n\t\t\tattributes: {\n\t\t\t\t...blockB.attributes,\n\t\t\t\t[ selectionEnd.attributeKey ]: toHTMLString( {\n\t\t\t\t\tvalue: valueB,\n\t\t\t\t\t...mapRichTextSettings( attributeDefinitionB ),\n\t\t\t\t} ),\n\t\t\t},\n\t\t},\n\t];\n};\n\n/**\n * Returns an array containing all block client IDs in the editor in the order\n * they appear. Optionally accepts a root client ID of the block list for which\n * the order should be returned, defaulting to the top-level block order.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array} Ordered client IDs of editor blocks.\n */\nexport function getBlockOrder( state, rootClientId ) {\n\treturn state.blocks.order.get( rootClientId || '' ) || EMPTY_ARRAY;\n}\n\n/**\n * Returns the index at which the block corresponding to the specified client\n * ID occurs within the block order, or `-1` if the block does not exist.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {number} Index at which block exists in order.\n */\nexport function getBlockIndex( state, clientId ) {\n\tconst rootClientId = getBlockRootClientId( state, clientId );\n\treturn getBlockOrder( state, rootClientId ).indexOf( clientId );\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected and no multi-selection exists, or false otherwise.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and multi-selection exists.\n */\nexport function isBlockSelected( state, clientId ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\n\tif ( selectionStart.clientId !== selectionEnd.clientId ) {\n\t\treturn false;\n\t}\n\n\treturn selectionStart.clientId === clientId;\n}\n\n/**\n * Returns true if one of the block's inner blocks is selected.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block selected\n */\nexport function hasSelectedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockSelected( state, innerClientId ) ||\n\t\t\tisBlockMultiSelected( state, innerClientId ) ||\n\t\t\t( deep && hasSelectedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if one of the block's inner blocks is dragged.\n *\n * @param {Object}  state    Editor state.\n * @param {string}  clientId Block client ID.\n * @param {boolean} deep     Perform a deep check.\n *\n * @return {boolean} Whether the block has an inner block dragged\n */\nexport function hasDraggedInnerBlock( state, clientId, deep = false ) {\n\treturn getBlockOrder( state, clientId ).some(\n\t\t( innerClientId ) =>\n\t\t\tisBlockBeingDragged( state, innerClientId ) ||\n\t\t\t( deep && hasDraggedInnerBlock( state, innerClientId, deep ) )\n\t);\n}\n\n/**\n * Returns true if the block corresponding to the specified client ID is\n * currently selected but isn't the last of the selected blocks. Here \"last\"\n * refers to the block sequence in the document, _not_ the sequence of\n * multi-selection, which is why `state.selectionEnd` isn't used.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {boolean} Whether block is selected and not the last in the\n *                   selection.\n */\nexport function isBlockWithinSelection( state, clientId ) {\n\tif ( ! clientId ) {\n\t\treturn false;\n\t}\n\n\tconst clientIds = getMultiSelectedBlockClientIds( state );\n\tconst index = clientIds.indexOf( clientId );\n\treturn index > -1 && index < clientIds.length - 1;\n}\n\n/**\n * Returns true if a multi-selection has been made, or false otherwise.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Whether multi-selection has been made.\n */\nexport function hasMultiSelection( state ) {\n\tconst { selectionStart, selectionEnd } = state.selection;\n\treturn selectionStart.clientId !== selectionEnd.clientId;\n}\n\n/**\n * Whether in the process of multi-selecting or not. This flag is only true\n * while the multi-selection is being selected (by mouse move), and is false\n * once the multi-selection has been settled.\n *\n * @see hasMultiSelection\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if multi-selecting, false if not.\n */\nexport function isMultiSelecting( state ) {\n\treturn state.isMultiSelecting;\n}\n\n/**\n * Selector that returns if multi-selection is enabled or not.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} True if it should be possible to multi-select blocks, false if multi-selection is disabled.\n */\nexport function isSelectionEnabled( state ) {\n\treturn state.isSelectionEnabled;\n}\n\n/**\n * Returns the block's editing mode, defaulting to \"visual\" if not explicitly\n * assigned.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId Block client ID.\n *\n * @return {Object} Block editing mode.\n */\nexport function getBlockMode( state, clientId ) {\n\treturn state.blocksMode[ clientId ] || 'visual';\n}\n\n/**\n * Returns true if the user is typing, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is typing.\n */\nexport function isTyping( state ) {\n\treturn state.isTyping;\n}\n\n/**\n * Returns true if the user is dragging blocks, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging blocks.\n */\nexport function isDraggingBlocks( state ) {\n\treturn !! state.draggedBlocks.length;\n}\n\n/**\n * Returns the client ids of any blocks being directly dragged.\n *\n * This does not include children of a parent being dragged.\n *\n * @param {Object} state Global application state.\n *\n * @return {string[]} Array of dragged block client ids.\n */\nexport function getDraggedBlockClientIds( state ) {\n\treturn state.draggedBlocks;\n}\n\n/**\n * Returns whether the block is being dragged.\n *\n * Only returns true if the block is being directly dragged,\n * not if the block is a child of a parent being dragged.\n * See `isAncestorBeingDragged` for child blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block is being dragged.\n */\nexport function isBlockBeingDragged( state, clientId ) {\n\treturn state.draggedBlocks.includes( clientId );\n}\n\n/**\n * Returns whether a parent/ancestor of the block is being dragged.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId Client id for block to check.\n *\n * @return {boolean} Whether the block's ancestor is being dragged.\n */\nexport function isAncestorBeingDragged( state, clientId ) {\n\t// Return early if no blocks are being dragged rather than\n\t// the more expensive check for parents.\n\tif ( ! isDraggingBlocks( state ) ) {\n\t\treturn false;\n\t}\n\n\tconst parents = getBlockParents( state, clientId );\n\treturn parents.some( ( parentClientId ) =>\n\t\tisBlockBeingDragged( state, parentClientId )\n\t);\n}\n\n/**\n * Returns true if the caret is within formatted text, or false otherwise.\n *\n * @deprecated\n *\n * @return {boolean} Whether the caret is within formatted text.\n */\nexport function isCaretWithinFormattedText() {\n\tdeprecated(\n\t\t'wp.data.select( \"core/block-editor\" ).isCaretWithinFormattedText',\n\t\t{\n\t\t\tsince: '6.1',\n\t\t\tversion: '6.3',\n\t\t}\n\t);\n\n\treturn false;\n}\n\n/**\n * Returns the insertion point, the index at which the new inserted block would\n * be placed. Defaults to the last index.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} Insertion point object with `rootClientId`, `index`.\n */\nexport const getBlockInsertionPoint = createSelector(\n\t( state ) => {\n\t\tlet rootClientId, index;\n\n\t\tconst {\n\t\t\tinsertionPoint,\n\t\t\tselection: { selectionEnd },\n\t\t} = state;\n\t\tif ( insertionPoint !== null ) {\n\t\t\treturn insertionPoint;\n\t\t}\n\n\t\tconst { clientId } = selectionEnd;\n\n\t\tif ( clientId ) {\n\t\t\trootClientId = getBlockRootClientId( state, clientId ) || undefined;\n\t\t\tindex = getBlockIndex( state, selectionEnd.clientId ) + 1;\n\t\t} else {\n\t\t\tindex = getBlockOrder( state ).length;\n\t\t}\n\n\t\treturn { rootClientId, index };\n\t},\n\t( state ) => [\n\t\tstate.insertionPoint,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tstate.blocks.parents,\n\t\tstate.blocks.order,\n\t]\n);\n\n/**\n * Returns true if we should show the block insertion point.\n *\n * @param {Object} state Global application state.\n *\n * @return {?boolean} Whether the insertion point is visible or not.\n */\nexport function isBlockInsertionPointVisible( state ) {\n\treturn state.insertionPoint !== null;\n}\n\n/**\n * Returns whether the blocks matches the template or not.\n *\n * @param {boolean} state\n * @return {?boolean} Whether the template is valid or not.\n */\nexport function isValidTemplate( state ) {\n\treturn state.template.isValid;\n}\n\n/**\n * Returns the defined block template\n *\n * @param {boolean} state\n *\n * @return {?Array} Block Template.\n */\nexport function getTemplate( state ) {\n\treturn state.settings.template;\n}\n\n/**\n * Returns the defined block template lock. Optionally accepts a root block\n * client ID as context, otherwise defaulting to the global context.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional block root client ID.\n *\n * @return {string|false} Block Template Lock\n */\nexport function getTemplateLock( state, rootClientId ) {\n\tif ( ! rootClientId ) {\n\t\treturn state.settings.templateLock ?? false;\n\t}\n\n\treturn getBlockListSettings( state, rootClientId )?.templateLock ?? false;\n}\n\nconst checkAllowList = ( list, item, defaultResult = null ) => {\n\tif ( typeof list === 'boolean' ) {\n\t\treturn list;\n\t}\n\tif ( Array.isArray( list ) ) {\n\t\t// TODO: when there is a canonical way to detect that we are editing a post\n\t\t// the following check should be changed to something like:\n\t\t// if ( list.includes( 'core/post-content' ) && getEditorMode() === 'post-content' && item === null )\n\t\tif ( list.includes( 'core/post-content' ) && item === null ) {\n\t\t\treturn true;\n\t\t}\n\t\treturn list.includes( item );\n\t}\n\treturn defaultResult;\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n * This function is not exported and not memoized because using a memoized selector\n * inside another memoized selector is just a waste of time.\n *\n * @param {Object}        state        Editor state.\n * @param {string|Object} blockName    The block type object, e.g., the response\n *                                     from the block directory; or a string name of\n *                                     an installed block type, e.g.' core/paragraph'.\n * @param {?string}       rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nconst canInsertBlockTypeUnmemoized = (\n\tstate,\n\tblockName,\n\trootClientId = null\n) => {\n\tlet blockType;\n\tif ( blockName && 'object' === typeof blockName ) {\n\t\tblockType = blockName;\n\t\tblockName = blockType.name;\n\t} else {\n\t\tblockType = getBlockType( blockName );\n\t}\n\tif ( ! blockType ) {\n\t\treturn false;\n\t}\n\n\tconst { allowedBlockTypes } = getSettings( state );\n\n\tconst isBlockAllowedInEditor = checkAllowList(\n\t\tallowedBlockTypes,\n\t\tblockName,\n\t\ttrue\n\t);\n\tif ( ! isBlockAllowedInEditor ) {\n\t\treturn false;\n\t}\n\n\tconst isLocked = !! getTemplateLock( state, rootClientId );\n\tif ( isLocked ) {\n\t\treturn false;\n\t}\n\n\tif ( getBlockEditingMode( state, rootClientId ?? '' ) === 'disabled' ) {\n\t\treturn false;\n\t}\n\n\tconst parentBlockListSettings = getBlockListSettings( state, rootClientId );\n\n\t// The parent block doesn't have settings indicating it doesn't support\n\t// inner blocks, return false.\n\tif ( rootClientId && parentBlockListSettings === undefined ) {\n\t\treturn false;\n\t}\n\n\tconst parentAllowedBlocks = parentBlockListSettings?.allowedBlocks;\n\tconst hasParentAllowedBlock = checkAllowList(\n\t\tparentAllowedBlocks,\n\t\tblockName\n\t);\n\n\tconst blockAllowedParentBlocks = blockType.parent;\n\tconst parentName = getBlockName( state, rootClientId );\n\tconst hasBlockAllowedParent = checkAllowList(\n\t\tblockAllowedParentBlocks,\n\t\tparentName\n\t);\n\n\tlet hasBlockAllowedAncestor = true;\n\tconst blockAllowedAncestorBlocks = blockType.ancestor;\n\tif ( blockAllowedAncestorBlocks ) {\n\t\tconst ancestors = [\n\t\t\trootClientId,\n\t\t\t...getBlockParents( state, rootClientId ),\n\t\t];\n\n\t\thasBlockAllowedAncestor = ancestors.some( ( ancestorClientId ) =>\n\t\t\tcheckAllowList(\n\t\t\t\tblockAllowedAncestorBlocks,\n\t\t\t\tgetBlockName( state, ancestorClientId )\n\t\t\t)\n\t\t);\n\t}\n\n\tconst canInsert =\n\t\thasBlockAllowedAncestor &&\n\t\t( ( hasParentAllowedBlock === null &&\n\t\t\thasBlockAllowedParent === null ) ||\n\t\t\thasParentAllowedBlock === true ||\n\t\t\thasBlockAllowedParent === true );\n\n\tif ( ! canInsert ) {\n\t\treturn canInsert;\n\t}\n\n\t/**\n\t * This filter is an ad-hoc solution to prevent adding template parts inside post content.\n\t * Conceptually, having a filter inside a selector is bad pattern so this code will be\n\t * replaced by a declarative API that doesn't the following drawbacks:\n\t *\n\t * Filters are not reactive: Upon switching between \"template mode\" and non \"template mode\",\n\t * the filter and selector won't necessarily be executed again. For now, it doesn't matter much\n\t * because you can't switch between the two modes while the inserter stays open.\n\t *\n\t * Filters are global: Once they're defined, they will affect all editor instances and all registries.\n\t * An ideal API would only affect specific editor instances.\n\t */\n\treturn applyFilters(\n\t\t'blockEditor.__unstableCanInsertBlockType',\n\t\tcanInsert,\n\t\tblockType,\n\t\trootClientId,\n\t\t{\n\t\t\t// Pass bound selectors of the current registry. If we're in a nested\n\t\t\t// context, the data will differ from the one selected from the root\n\t\t\t// registry.\n\t\t\tgetBlock: getBlock.bind( null, state ),\n\t\t\tgetBlockParentsByBlockName: getBlockParentsByBlockName.bind(\n\t\t\t\tnull,\n\t\t\t\tstate\n\t\t\t),\n\t\t}\n\t);\n};\n\n/**\n * Determines if the given block type is allowed to be inserted into the block list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  blockName    The name of the block type, e.g.' core/paragraph'.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be inserted.\n */\nexport const canInsertBlockType = createSelector(\n\tcanInsertBlockTypeUnmemoized,\n\t( state, blockName, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockEditingModes,\n\t]\n);\n\n/**\n * Determines if the given blocks are allowed to be inserted into the block\n * list.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be inserted.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be inserted.\n */\nexport function canInsertBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( id ) =>\n\t\tcanInsertBlockType( state, getBlockName( state, id ), rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be deleted.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block is allowed to be removed.\n */\nexport function canRemoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.remove !== undefined ) {\n\t\treturn ! attributes.lock.remove;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be removed.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be removed.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be removed.\n */\nexport function canRemoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanRemoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientId     The block client Id.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean | undefined} Whether the given block is allowed to be moved.\n */\nexport function canMoveBlock( state, clientId, rootClientId = null ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\tif ( attributes.lock?.move !== undefined ) {\n\t\treturn ! attributes.lock.move;\n\t}\n\tif ( getTemplateLock( state, rootClientId ) === 'all' ) {\n\t\treturn false;\n\t}\n\n\treturn getBlockEditingMode( state, rootClientId ) !== 'disabled';\n}\n\n/**\n * Determines if the given blocks are allowed to be moved.\n *\n * @param {Object}  state        Editor state.\n * @param {string}  clientIds    The block client IDs to be moved.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given blocks are allowed to be moved.\n */\nexport function canMoveBlocks( state, clientIds, rootClientId = null ) {\n\treturn clientIds.every( ( clientId ) =>\n\t\tcanMoveBlock( state, clientId, rootClientId )\n\t);\n}\n\n/**\n * Determines if the given block is allowed to be edited.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The block client Id.\n *\n * @return {boolean} Whether the given block is allowed to be edited.\n */\nexport function canEditBlock( state, clientId ) {\n\tconst attributes = getBlockAttributes( state, clientId );\n\tif ( attributes === null ) {\n\t\treturn true;\n\t}\n\n\tconst { lock } = attributes;\n\n\t// When the edit is true, we cannot edit the block.\n\treturn ! lock?.edit;\n}\n\n/**\n * Determines if the given block type can be locked/unlocked by a user.\n *\n * @param {Object}          state      Editor state.\n * @param {(string|Object)} nameOrType Block name or type object.\n *\n * @return {boolean} Whether a given block type can be locked/unlocked.\n */\nexport function canLockBlockType( state, nameOrType ) {\n\tif ( ! hasBlockSupport( nameOrType, 'lock', true ) ) {\n\t\treturn false;\n\t}\n\n\t// Use block editor settings as the default value.\n\treturn !! state.settings?.canLockBlocks;\n}\n\n/**\n * Returns information about how recently and frequently a block has been inserted.\n *\n * @param {Object} state Global application state.\n * @param {string} id    A string which identifies the insert, e.g. 'core/block/12'\n *\n * @return {?{ time: number, count: number }} An object containing `time` which is when the last\n *                                            insert occurred as a UNIX epoch, and `count` which is\n *                                            the number of inserts that have occurred.\n */\nfunction getInsertUsage( state, id ) {\n\treturn state.preferences.insertUsage?.[ id ] ?? null;\n}\n\n/**\n * Returns whether we can show a block type in the inserter\n *\n * @param {Object}  state        Global State\n * @param {Object}  blockType    BlockType\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Whether the given block type is allowed to be shown in the inserter.\n */\nconst canIncludeBlockTypeInInserter = ( state, blockType, rootClientId ) => {\n\tif ( ! hasBlockSupport( blockType, 'inserter', true ) ) {\n\t\treturn false;\n\t}\n\n\treturn canInsertBlockTypeUnmemoized( state, blockType.name, rootClientId );\n};\n\n/**\n * Return a function to be used to tranform a block variation to an inserter item\n *\n * @param {Object} state Global State\n * @param {Object} item  Denormalized inserter item\n * @return {Function} Function to transform a block variation to inserter item\n */\nconst getItemFromVariation = ( state, item ) => ( variation ) => {\n\tconst variationId = `${ item.id }/${ variation.name }`;\n\tconst { time, count = 0 } = getInsertUsage( state, variationId ) || {};\n\treturn {\n\t\t...item,\n\t\tid: variationId,\n\t\ticon: variation.icon || item.icon,\n\t\ttitle: variation.title || item.title,\n\t\tdescription: variation.description || item.description,\n\t\tcategory: variation.category || item.category,\n\t\t// If `example` is explicitly undefined for the variation, the preview will not be shown.\n\t\texample: variation.hasOwnProperty( 'example' )\n\t\t\t? variation.example\n\t\t\t: item.example,\n\t\tinitialAttributes: {\n\t\t\t...item.initialAttributes,\n\t\t\t...variation.attributes,\n\t\t},\n\t\tinnerBlocks: variation.innerBlocks,\n\t\tkeywords: variation.keywords || item.keywords,\n\t\tfrecency: calculateFrecency( time, count ),\n\t};\n};\n\n/**\n * Returns the calculated frecency.\n *\n * 'frecency' is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * @param {number} time  When the last insert occurred as a UNIX epoch\n * @param {number} count The number of inserts that have occurred.\n *\n * @return {number} The calculated frecency.\n */\nconst calculateFrecency = ( time, count ) => {\n\tif ( ! time ) {\n\t\treturn count;\n\t}\n\t// The selector is cached, which means Date.now() is the last time that the\n\t// relevant state changed. This suits our needs.\n\tconst duration = Date.now() - time;\n\tswitch ( true ) {\n\t\tcase duration < MILLISECONDS_PER_HOUR:\n\t\t\treturn count * 4;\n\t\tcase duration < MILLISECONDS_PER_DAY:\n\t\t\treturn count * 2;\n\t\tcase duration < MILLISECONDS_PER_WEEK:\n\t\t\treturn count / 2;\n\t\tdefault:\n\t\t\treturn count / 4;\n\t}\n};\n\n/**\n * Returns a function that accepts a block type and builds an item to be shown\n * in a specific context. It's used for building items for Inserter and available\n * block Transfroms list.\n *\n * @param {Object} state              Editor state.\n * @param {Object} options            Options object for handling the building of a block type.\n * @param {string} options.buildScope The scope for which the item is going to be used.\n * @return {Function} Function returns an item to be shown in a specific context (Inserter|Transforms list).\n */\nconst buildBlockTypeItem =\n\t( state, { buildScope = 'inserter' } ) =>\n\t( blockType ) => {\n\t\tconst id = blockType.name;\n\n\t\tlet isDisabled = false;\n\t\tif ( ! hasBlockSupport( blockType.name, 'multiple', true ) ) {\n\t\t\tisDisabled = getBlocksByClientId(\n\t\t\t\tstate,\n\t\t\t\tgetClientIdsWithDescendants( state )\n\t\t\t).some( ( { name } ) => name === blockType.name );\n\t\t}\n\n\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\tconst blockItemBase = {\n\t\t\tid,\n\t\t\tname: blockType.name,\n\t\t\ttitle: blockType.title,\n\t\t\ticon: blockType.icon,\n\t\t\tisDisabled,\n\t\t\tfrecency: calculateFrecency( time, count ),\n\t\t};\n\t\tif ( buildScope === 'transform' ) return blockItemBase;\n\n\t\tconst inserterVariations = getBlockVariations(\n\t\t\tblockType.name,\n\t\t\t'inserter'\n\t\t);\n\t\treturn {\n\t\t\t...blockItemBase,\n\t\t\tinitialAttributes: {},\n\t\t\tdescription: blockType.description,\n\t\t\tcategory: blockType.category,\n\t\t\tkeywords: blockType.keywords,\n\t\t\tvariations: inserterVariations,\n\t\t\texample: blockType.example,\n\t\t\tutility: 1, // Deprecated.\n\t\t};\n\t};\n\n/**\n * Determines the items that appear in the inserter. Includes both static\n * items (e.g. a regular block type) and dynamic items (e.g. a reusable block).\n *\n * Each item object contains what's necessary to display a button in the\n * inserter and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'utility' and 'frecency'.\n *\n * @param    {Object}   state             Editor state.\n * @param    {?string}  rootClientId      Optional root client ID of block list.\n *\n * @return {WPEditorInserterItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorInserterItem\n * @property {string}   id                Unique identifier for the item.\n * @property {string}   name              The type of block to create.\n * @property {Object}   initialAttributes Attributes to pass to the newly created block.\n * @property {string}   title             Title of the item, as it appears in the inserter.\n * @property {string}   icon              Dashicon for the item, as it appears in the inserter.\n * @property {string}   category          Block category that the item is associated with.\n * @property {string[]} keywords          Keywords that can be searched to find this item.\n * @property {boolean}  isDisabled        Whether or not the user should be prevented from inserting\n *                                        this item.\n * @property {number}   frecency          Heuristic that combines frequency and recency.\n */\nexport const getInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\t/*\n\t\t * Matches block comment delimiters amid serialized content.\n\t\t *\n\t\t * @see `tokenizer` in `@wordpress/block-serialization-default-parser`\n\t\t * package\n\t\t *\n\t\t * blockParserTokenizer differs from the original tokenizer in the\n\t\t * following ways:\n\t\t *\n\t\t * - removed global flag (/g)\n\t\t * - prepended ^\\s*\n\t\t *\n\t\t */\n\t\tconst blockParserTokenizer =\n\t\t\t/^\\s*<!--\\s+(\\/)?wp:([a-z][a-z0-9_-]*\\/)?([a-z][a-z0-9_-]*)\\s+({(?:(?=([^}]+|}+(?=})|(?!}\\s+\\/?-->)[^])*)\\5|[^]*?)}\\s+)?(\\/)?-->/;\n\n\t\tconst buildReusableBlockInserterItem = ( reusableBlock ) => {\n\t\t\tlet icon = symbol;\n\n\t\t\t/*\n\t\t\t * Instead of always displaying a generic \"symbol\" icon for every\n\t\t\t * reusable block, try to use an icon that represents the first\n\t\t\t * outermost block contained in the reusable block. This requires\n\t\t\t * scanning the serialized form of the reusable block to find its\n\t\t\t * first block delimiter, then looking up the corresponding block\n\t\t\t * type, if available.\n\t\t\t */\n\t\t\tif ( Platform.OS === 'web' ) {\n\t\t\t\tconst content =\n\t\t\t\t\ttypeof reusableBlock.content.raw === 'string'\n\t\t\t\t\t\t? reusableBlock.content.raw\n\t\t\t\t\t\t: reusableBlock.content;\n\t\t\t\tconst rawBlockMatch = content.match( blockParserTokenizer );\n\t\t\t\tif ( rawBlockMatch ) {\n\t\t\t\t\tconst [ , , namespace = 'core/', blockName ] =\n\t\t\t\t\t\trawBlockMatch;\n\t\t\t\t\tconst referencedBlockType = getBlockType(\n\t\t\t\t\t\tnamespace + blockName\n\t\t\t\t\t);\n\t\t\t\t\tif ( referencedBlockType ) {\n\t\t\t\t\t\ticon = referencedBlockType.icon;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst id = `core/block/${ reusableBlock.id }`;\n\t\t\tconst { time, count = 0 } = getInsertUsage( state, id ) || {};\n\t\t\tconst frecency = calculateFrecency( time, count );\n\n\t\t\treturn {\n\t\t\t\tid,\n\t\t\t\tname: 'core/block',\n\t\t\t\tinitialAttributes: { ref: reusableBlock.id },\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\ticon,\n\t\t\t\tcategory: 'reusable',\n\t\t\t\tkeywords: [ 'reusable' ],\n\t\t\t\tisDisabled: false,\n\t\t\t\tutility: 1, // Deprecated.\n\t\t\t\tfrecency,\n\t\t\t\tcontent: reusableBlock.content.raw,\n\t\t\t};\n\t\t};\n\n\t\tconst syncedPatternInserterItems = canInsertBlockTypeUnmemoized(\n\t\t\tstate,\n\t\t\t'core/block',\n\t\t\trootClientId\n\t\t)\n\t\t\t? getReusableBlocks( state )\n\t\t\t\t\t.filter(\n\t\t\t\t\t\t( reusableBlock ) =>\n\t\t\t\t\t\t\t// Reusable blocks that are fully synced should have no sync status set\n\t\t\t\t\t\t\t// for backwards compat between patterns and old reusable blocks, but\n\t\t\t\t\t\t\t// some in release 16.1 may have had sync status inadvertantly set to\n\t\t\t\t\t\t\t// 'fully' if created in the site editor.\n\t\t\t\t\t\t\treusableBlock.wp_pattern_sync_status === 'fully' ||\n\t\t\t\t\t\t\treusableBlock.wp_pattern_sync_status === '' ||\n\t\t\t\t\t\t\t! reusableBlock.wp_pattern_sync_status\n\t\t\t\t\t)\n\t\t\t\t\t.map( buildReusableBlockInserterItem )\n\t\t\t: [];\n\n\t\tconst buildBlockTypeInserterItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'inserter',\n\t\t} );\n\n\t\tconst blockTypeInserterItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeInserterItem );\n\n\t\tconst items = blockTypeInserterItems.reduce( ( accumulator, item ) => {\n\t\t\tconst { variations = [] } = item;\n\t\t\t// Exclude any block type item that is to be replaced by a default variation.\n\t\t\tif ( ! variations.some( ( { isDefault } ) => isDefault ) ) {\n\t\t\t\taccumulator.push( item );\n\t\t\t}\n\t\t\tif ( variations.length ) {\n\t\t\t\tconst variationMapper = getItemFromVariation( state, item );\n\t\t\t\taccumulator.push( ...variations.map( variationMapper ) );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\n\t\t// Ensure core blocks are prioritized in the returned results,\n\t\t// because third party blocks can be registered earlier than\n\t\t// the core blocks (usually by using the `init` action),\n\t\t// thus affecting the display order.\n\t\t// We don't sort reusable blocks as they are handled differently.\n\t\tconst groupByType = ( blocks, block ) => {\n\t\t\tconst { core, noncore } = blocks;\n\t\t\tconst type = block.name.startsWith( 'core/' ) ? core : noncore;\n\n\t\t\ttype.push( block );\n\t\t\treturn blocks;\n\t\t};\n\t\tconst { core: coreItems, noncore: nonCoreItems } = items.reduce(\n\t\t\tgroupByType,\n\t\t\t{ core: [], noncore: [] }\n\t\t);\n\t\tconst sortedBlockTypes = [ ...coreItems, ...nonCoreItems ];\n\t\treturn [ ...sortedBlockTypes, ...syncedPatternInserterItems ];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.blocks.order,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines the items that appear in the available block transforms list.\n *\n * Each item object contains what's necessary to display a menu item in the\n * transform list and handle its selection.\n *\n * The 'frecency' property is a heuristic (https://en.wikipedia.org/wiki/Frecency)\n * that combines block usage frequenty and recency.\n *\n * Items are returned ordered descendingly by their 'frecency'.\n *\n * @param    {Object}          state        Editor state.\n * @param    {Object|Object[]} blocks       Block object or array objects.\n * @param    {?string}         rootClientId Optional root client ID of block list.\n *\n * @return {WPEditorTransformItem[]} Items that appear in inserter.\n *\n * @typedef {Object} WPEditorTransformItem\n * @property {string}          id           Unique identifier for the item.\n * @property {string}          name         The type of block to create.\n * @property {string}          title        Title of the item, as it appears in the inserter.\n * @property {string}          icon         Dashicon for the item, as it appears in the inserter.\n * @property {boolean}         isDisabled   Whether or not the user should be prevented from inserting\n *                                          this item.\n * @property {number}          frecency     Heuristic that combines frequency and recency.\n */\nexport const getBlockTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tconst normalizedBlocks = Array.isArray( blocks ) ? blocks : [ blocks ];\n\t\tconst buildBlockTypeTransformItem = buildBlockTypeItem( state, {\n\t\t\tbuildScope: 'transform',\n\t\t} );\n\t\tconst blockTypeTransformItems = getBlockTypes()\n\t\t\t.filter( ( blockType ) =>\n\t\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t\t)\n\t\t\t.map( buildBlockTypeTransformItem );\n\n\t\tconst itemsByName = Object.fromEntries(\n\t\t\tObject.entries( blockTypeTransformItems ).map( ( [ , value ] ) => [\n\t\t\t\tvalue.name,\n\t\t\t\tvalue,\n\t\t\t] )\n\t\t);\n\n\t\tconst possibleTransforms = getPossibleBlockTransformations(\n\t\t\tnormalizedBlocks\n\t\t).reduce( ( accumulator, block ) => {\n\t\t\tif ( itemsByName[ block?.name ] ) {\n\t\t\t\taccumulator.push( itemsByName[ block.name ] );\n\t\t\t}\n\t\t\treturn accumulator;\n\t\t}, [] );\n\t\treturn orderBy(\n\t\t\tpossibleTransforms,\n\t\t\t( block ) => itemsByName[ block.name ].frecency,\n\t\t\t'desc'\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.preferences.insertUsage,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Determines whether there are items to show in the inserter.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {boolean} Items that appear in inserter.\n */\nexport const hasInserterItems = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst hasBlockType = getBlockTypes().some( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tif ( hasBlockType ) {\n\t\t\treturn true;\n\t\t}\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn hasReusableBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\n/**\n * Returns the list of allowed inserter blocks for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Array?} The list of allowed block types.\n */\nexport const getAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst blockTypes = getBlockTypes().filter( ( blockType ) =>\n\t\t\tcanIncludeBlockTypeInInserter( state, blockType, rootClientId )\n\t\t);\n\t\tconst hasReusableBlock =\n\t\t\tcanInsertBlockTypeUnmemoized( state, 'core/block', rootClientId ) &&\n\t\t\tgetReusableBlocks( state ).length > 0;\n\n\t\treturn [\n\t\t\t...blockTypes,\n\t\t\t...( hasReusableBlock ? [ 'core/block' ] : [] ),\n\t\t];\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tgetReusableBlocks( state ),\n\t\tgetBlockTypes(),\n\t]\n);\n\nexport const __experimentalGetAllowedBlocks = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetAllowedBlocks',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getAllowedBlocks',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getAllowedBlocks( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\t...getAllowedBlocks.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the block to be directly inserted by the block appender.\n *\n * @param    {Object}         state            Editor state.\n * @param    {?string}        rootClientId     Optional root client ID of block list.\n *\n * @return {?WPDirectInsertBlock}              The block type to be directly inserted.\n *\n * @typedef {Object} WPDirectInsertBlock\n * @property {string}         name             The type of block.\n * @property {?Object}        attributes       Attributes to pass to the newly created block.\n * @property {?Array<string>} attributesToCopy Attributes to be copied from adjecent blocks when inserted.\n */\nexport const getDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tif ( ! rootClientId ) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultBlock =\n\t\t\tstate.blockListSettings[ rootClientId ]?.defaultBlock;\n\t\tconst directInsert =\n\t\t\tstate.blockListSettings[ rootClientId ]?.directInsert;\n\t\tif ( ! defaultBlock || ! directInsert ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( typeof directInsert === 'function' ) {\n\t\t\treturn directInsert( getBlock( state, rootClientId ) )\n\t\t\t\t? defaultBlock\n\t\t\t\t: null;\n\t\t}\n\t\treturn defaultBlock;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nexport const __experimentalGetDirectInsertBlock = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetDirectInsertBlock',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getDirectInsertBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getDirectInsertBlock( state, rootClientId );\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.tree.get( rootClientId ),\n\t]\n);\n\nconst checkAllowListRecursive = ( blocks, allowedBlockTypes ) => {\n\tif ( typeof allowedBlockTypes === 'boolean' ) {\n\t\treturn allowedBlockTypes;\n\t}\n\n\tconst blocksQueue = [ ...blocks ];\n\twhile ( blocksQueue.length > 0 ) {\n\t\tconst block = blocksQueue.shift();\n\n\t\tconst isAllowed = checkAllowList(\n\t\t\tallowedBlockTypes,\n\t\t\tblock.name || block.blockName,\n\t\t\ttrue\n\t\t);\n\t\tif ( ! isAllowed ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tblock.innerBlocks?.forEach( ( innerBlock ) => {\n\t\t\tblocksQueue.push( innerBlock );\n\t\t} );\n\t}\n\n\treturn true;\n};\n\nfunction getUnsyncedPatterns( state ) {\n\tconst reusableBlocks =\n\t\tstate?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n\n\treturn reusableBlocks\n\t\t.filter(\n\t\t\t( reusableBlock ) =>\n\t\t\t\treusableBlock.wp_pattern_sync_status === 'unsynced'\n\t\t)\n\t\t.map( ( reusableBlock ) => {\n\t\t\treturn {\n\t\t\t\tname: `core/block/${ reusableBlock.id }`,\n\t\t\t\ttitle: reusableBlock.title.raw,\n\t\t\t\tcategories: [ 'custom' ],\n\t\t\t\tcontent: reusableBlock.content.raw,\n\t\t\t};\n\t\t} );\n}\n\nexport const __experimentalGetParsedPattern = createSelector(\n\t( state, patternName ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst unsyncedPatterns = getUnsyncedPatterns( state );\n\n\t\tconst pattern = [ ...patterns, ...unsyncedPatterns ].find(\n\t\t\t( { name } ) => name === patternName\n\t\t);\n\t\tif ( ! pattern ) {\n\t\t\treturn null;\n\t\t}\n\t\treturn {\n\t\t\t...pattern,\n\t\t\tblocks: parse( pattern.content, {\n\t\t\t\t__unstableSkipMigrationLogs: true,\n\t\t\t} ),\n\t\t};\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t]\n);\n\nconst getAllAllowedPatterns = createSelector(\n\t( state ) => {\n\t\tconst patterns = state.settings.__experimentalBlockPatterns;\n\t\tconst unsyncedPatterns = getUnsyncedPatterns( state );\n\n\t\tconst { allowedBlockTypes } = getSettings( state );\n\n\t\tconst parsedPatterns = [ ...patterns, ...unsyncedPatterns ]\n\t\t\t.filter( ( { inserter = true } ) => !! inserter )\n\t\t\t.map( ( { name } ) =>\n\t\t\t\t__experimentalGetParsedPattern( state, name )\n\t\t\t);\n\t\tconst allowedPatterns = parsedPatterns.filter( ( { blocks } ) =>\n\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes )\n\t\t);\n\t\treturn allowedPatterns;\n\t},\n\t( state ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t]\n);\n\n/**\n * Returns the list of allowed patterns for inner blocks children.\n *\n * @param {Object}  state        Editor state.\n * @param {?string} rootClientId Optional target root client ID.\n *\n * @return {Array?} The list of allowed patterns.\n */\nexport const __experimentalGetAllowedPatterns = createSelector(\n\t( state, rootClientId = null ) => {\n\t\tconst availableParsedPatterns = getAllAllowedPatterns( state );\n\t\tconst patternsAllowed = availableParsedPatterns.filter(\n\t\t\t( { blocks } ) =>\n\t\t\t\tblocks.every( ( { name } ) =>\n\t\t\t\t\tcanInsertBlockType( state, name, rootClientId )\n\t\t\t\t)\n\t\t);\n\n\t\treturn patternsAllowed;\n\t},\n\t( state, rootClientId ) => [\n\t\tstate.settings.__experimentalBlockPatterns,\n\t\tstate.settings.__experimentalReusableBlocks,\n\t\tstate.settings.allowedBlockTypes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings[ rootClientId ],\n\t\tstate.blocks.byClientId.get( rootClientId ),\n\t]\n);\n\n/**\n * Returns the list of patterns based on their declared `blockTypes`\n * and a block's name.\n * Patterns can use `blockTypes` to integrate in work flows like\n * suggesting appropriate patterns in a Placeholder state(during insertion)\n * or blocks transformations.\n *\n * @param {Object}          state        Editor state.\n * @param {string|string[]} blockNames   Block's name or array of block names to find matching pattens.\n * @param {?string}         rootClientId Optional target root client ID.\n *\n * @return {Array} The list of matched block patterns based on declared `blockTypes` and block name.\n */\nexport const getPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tif ( ! blockNames ) return EMPTY_ARRAY;\n\t\tconst patterns = __experimentalGetAllowedPatterns(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t);\n\t\tconst normalizedBlockNames = Array.isArray( blockNames )\n\t\t\t? blockNames\n\t\t\t: [ blockNames ];\n\t\tconst filteredPatterns = patterns.filter( ( pattern ) =>\n\t\t\tpattern?.blockTypes?.some?.( ( blockName ) =>\n\t\t\t\tnormalizedBlockNames.includes( blockName )\n\t\t\t)\n\t\t);\n\t\tif ( filteredPatterns.length === 0 ) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\t\treturn filteredPatterns;\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\nexport const __experimentalGetPatternsByBlockTypes = createSelector(\n\t( state, blockNames, rootClientId = null ) => {\n\t\tdeprecated(\n\t\t\t'wp.data.select( \"core/block-editor\" ).__experimentalGetPatternsByBlockTypes',\n\t\t\t{\n\t\t\t\talternative:\n\t\t\t\t\t'wp.data.select( \"core/block-editor\" ).getPatternsByBlockTypes',\n\t\t\t\tsince: '6.2',\n\t\t\t\tversion: '6.4',\n\t\t\t}\n\t\t);\n\t\treturn getPatternsByBlockTypes( state, blockNames, rootClientId );\n\t},\n\t( state, blockNames, rootClientId ) => [\n\t\t...__experimentalGetAllowedPatterns.getDependants(\n\t\t\tstate,\n\t\t\trootClientId\n\t\t),\n\t]\n);\n\n/**\n * Determines the items that appear in the available pattern transforms list.\n *\n * For now we only handle blocks without InnerBlocks and take into account\n * the `__experimentalRole` property of blocks' attributes for the transformation.\n *\n * We return the first set of possible eligible block patterns,\n * by checking the `blockTypes` property. We still have to recurse through\n * block pattern's blocks and try to find matches from the selected blocks.\n * Now this happens in the consumer to avoid heavy operations in the selector.\n *\n * @param {Object}   state        Editor state.\n * @param {Object[]} blocks       The selected blocks.\n * @param {?string}  rootClientId Optional root client ID of block list.\n *\n * @return {WPBlockPattern[]} Items that are eligible for a pattern transformation.\n */\nexport const __experimentalGetPatternTransformItems = createSelector(\n\t( state, blocks, rootClientId = null ) => {\n\t\tif ( ! blocks ) return EMPTY_ARRAY;\n\t\t/**\n\t\t * For now we only handle blocks without InnerBlocks and take into account\n\t\t * the `__experimentalRole` property of blocks' attributes for the transformation.\n\t\t * Note that the blocks have been retrieved through `getBlock`, which doesn't\n\t\t * return the inner blocks of an inner block controller, so we still need\n\t\t * to check for this case too.\n\t\t */\n\t\tif (\n\t\t\tblocks.some(\n\t\t\t\t( { clientId, innerBlocks } ) =>\n\t\t\t\t\tinnerBlocks.length ||\n\t\t\t\t\tareInnerBlocksControlled( state, clientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn EMPTY_ARRAY;\n\t\t}\n\n\t\t// Create a Set of the selected block names that is used in patterns filtering.\n\t\tconst selectedBlockNames = Array.from(\n\t\t\tnew Set( blocks.map( ( { name } ) => name ) )\n\t\t);\n\t\t/**\n\t\t * Here we will return first set of possible eligible block patterns,\n\t\t * by checking the `blockTypes` property. We still have to recurse through\n\t\t * block pattern's blocks and try to find matches from the selected blocks.\n\t\t * Now this happens in the consumer to avoid heavy operations in the selector.\n\t\t */\n\t\treturn getPatternsByBlockTypes(\n\t\t\tstate,\n\t\t\tselectedBlockNames,\n\t\t\trootClientId\n\t\t);\n\t},\n\t( state, blocks, rootClientId ) => [\n\t\t...getPatternsByBlockTypes.getDependants( state, rootClientId ),\n\t]\n);\n\n/**\n * Returns the Block List settings of a block, if any exist.\n *\n * @param {Object}  state    Editor state.\n * @param {?string} clientId Block client ID.\n *\n * @return {?Object} Block settings of the block if set.\n */\nexport function getBlockListSettings( state, clientId ) {\n\treturn state.blockListSettings[ clientId ];\n}\n\n/**\n * Returns the editor settings.\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor settings object.\n */\nexport function getSettings( state ) {\n\treturn state.settings;\n}\n\n/**\n * Returns the behaviors registered with the editor.\n *\n * Behaviors are named, reusable pieces of functionality that can be\n * attached to blocks. They are registered with the editor using the\n * `theme.json` file.\n *\n * @example\n *\n * ```js\n * const behaviors = select( blockEditorStore ).getBehaviors();\n * if ( behaviors?.lightbox ) {\n * \t // Do something with the lightbox.\n * }\n *```\n *\n * @param {Object} state Editor state.\n *\n * @return {Object} The editor behaviors object.\n */\nexport function getBehaviors( state ) {\n\treturn state.settings.behaviors;\n}\n\n/**\n * Returns true if the most recent block change is be considered persistent, or\n * false otherwise. A persistent change is one committed by BlockEditorProvider\n * via its `onChange` callback, in addition to `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was persistent.\n */\nexport function isLastBlockChangePersistent( state ) {\n\treturn state.blocks.isPersistentChange;\n}\n\n/**\n * Returns the block list settings for an array of blocks, if any exist.\n *\n * @param {Object} state     Editor state.\n * @param {Array}  clientIds Block client IDs.\n *\n * @return {Object} An object where the keys are client ids and the values are\n *                  a block list setting object.\n */\nexport const __experimentalGetBlockListSettingsForBlocks = createSelector(\n\t( state, clientIds = [] ) => {\n\t\treturn clientIds.reduce( ( blockListSettingsForBlocks, clientId ) => {\n\t\t\tif ( ! state.blockListSettings[ clientId ] ) {\n\t\t\t\treturn blockListSettingsForBlocks;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...blockListSettingsForBlocks,\n\t\t\t\t[ clientId ]: state.blockListSettings[ clientId ],\n\t\t\t};\n\t\t}, {} );\n\t},\n\t( state ) => [ state.blockListSettings ]\n);\n\n/**\n * Returns the title of a given reusable block\n *\n * @param {Object}        state Global application state.\n * @param {number|string} ref   The shared block's ID.\n *\n * @return {string} The reusable block saved title.\n */\nexport const __experimentalGetReusableBlockTitle = createSelector(\n\t( state, ref ) => {\n\t\tconst reusableBlock = getReusableBlocks( state ).find(\n\t\t\t( block ) => block.id === ref\n\t\t);\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn reusableBlock.title?.raw;\n\t},\n\t( state ) => [ getReusableBlocks( state ) ]\n);\n\n/**\n * Returns true if the most recent block change is be considered ignored, or\n * false otherwise. An ignored change is one not to be committed by\n * BlockEditorProvider, neither via `onChange` nor `onInput`.\n *\n * @param {Object} state Block editor state.\n *\n * @return {boolean} Whether the most recent block change was ignored.\n */\nexport function __unstableIsLastBlockChangeIgnored( state ) {\n\t// TODO: Removal Plan: Changes incurred by RECEIVE_BLOCKS should not be\n\t// ignored if in-fact they result in a change in blocks state. The current\n\t// need to ignore changes not a result of user interaction should be\n\t// accounted for in the refactoring of reusable blocks as occurring within\n\t// their own separate block editor / state (#7119).\n\treturn state.blocks.isIgnoredChange;\n}\n\n/**\n * Returns the block attributes changed as a result of the last dispatched\n * action.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object<string,Object>} Subsets of block attributes changed, keyed\n *                                 by block client ID.\n */\nexport function __experimentalGetLastBlockAttributeChanges( state ) {\n\treturn state.lastBlockAttributesChange;\n}\n\n/**\n * Returns the available reusable blocks\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} Reusable blocks\n */\nfunction getReusableBlocks( state ) {\n\treturn state?.settings?.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns whether the navigation mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {boolean} Is navigation mode enabled.\n */\nexport function isNavigationMode( state ) {\n\treturn state.editorMode === 'navigation';\n}\n\n/**\n * Returns the current editor mode.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} the editor mode.\n */\nexport function __unstableGetEditorMode( state ) {\n\treturn state.editorMode;\n}\n\n/**\n * Returns whether block moving mode is enabled.\n *\n * @param {Object} state Editor state.\n *\n * @return {string} Client Id of moving block.\n */\nexport function hasBlockMovingClientId( state ) {\n\treturn state.hasBlockMovingClientId;\n}\n\n/**\n * Returns true if the last change was an automatic change, false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the last change was automatic.\n */\nexport function didAutomaticChange( state ) {\n\treturn !! state.automaticChangeStatus;\n}\n\n/**\n * Returns true if the current highlighted block matches the block clientId.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} Whether the block is currently highlighted.\n */\nexport function isBlockHighlighted( state, clientId ) {\n\treturn state.highlightedBlock === clientId;\n}\n\n/**\n * Checks if a given block has controlled inner blocks.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block to check.\n *\n * @return {boolean} True if the block has controlled inner blocks.\n */\nexport function areInnerBlocksControlled( state, clientId ) {\n\treturn !! state.blocks.controlledInnerBlocks[ clientId ];\n}\n\n/**\n * Returns the clientId for the first 'active' block of a given array of block names.\n * A block is 'active' if it (or a child) is the selected block.\n * Returns the first match moving up the DOM from the selected block.\n *\n * @param {Object}   state            Global application state.\n * @param {string[]} validBlocksNames The names of block types to check for.\n *\n * @return {string} The matching block's clientId.\n */\nexport const __experimentalGetActiveBlockIdByBlockNames = createSelector(\n\t( state, validBlockNames ) => {\n\t\tif ( ! validBlockNames.length ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Check if selected block is a valid entity area.\n\t\tconst selectedBlockClientId = getSelectedBlockClientId( state );\n\t\tif (\n\t\t\tvalidBlockNames.includes(\n\t\t\t\tgetBlockName( state, selectedBlockClientId )\n\t\t\t)\n\t\t) {\n\t\t\treturn selectedBlockClientId;\n\t\t}\n\t\t// Check if first selected block is a child of a valid entity area.\n\t\tconst multiSelectedBlockClientIds =\n\t\t\tgetMultiSelectedBlockClientIds( state );\n\t\tconst entityAreaParents = getBlockParentsByBlockName(\n\t\t\tstate,\n\t\t\tselectedBlockClientId || multiSelectedBlockClientIds[ 0 ],\n\t\t\tvalidBlockNames\n\t\t);\n\t\tif ( entityAreaParents ) {\n\t\t\t// Last parent closest/most interior.\n\t\t\treturn entityAreaParents[ entityAreaParents.length - 1 ];\n\t\t}\n\t\treturn null;\n\t},\n\t( state, validBlockNames ) => [\n\t\tstate.selection.selectionStart.clientId,\n\t\tstate.selection.selectionEnd.clientId,\n\t\tvalidBlockNames,\n\t]\n);\n\n/**\n * Tells if the block with the passed clientId was just inserted.\n *\n * @param {Object}  state    Global application state.\n * @param {Object}  clientId Client Id of the block.\n * @param {?string} source   Optional insertion source of the block.\n * @return {boolean} True if the block matches the last block inserted from the specified source.\n */\nexport function wasBlockJustInserted( state, clientId, source ) {\n\tconst { lastBlockInserted } = state;\n\treturn (\n\t\tlastBlockInserted.clientIds?.includes( clientId ) &&\n\t\tlastBlockInserted.source === source\n\t);\n}\n\n/**\n * Tells if the block is visible on the canvas or not.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n * @return {boolean} True if the block is visible.\n */\nexport function isBlockVisible( state, clientId ) {\n\treturn state.blockVisibility?.[ clientId ] ?? true;\n}\n\n/**\n * Returns the list of all hidden blocks.\n *\n * @param {Object} state Global application state.\n * @return {[string]} List of hidden blocks.\n */\nexport const __unstableGetVisibleBlocks = createSelector(\n\t( state ) => {\n\t\tconst visibleBlocks = new Set(\n\t\t\tObject.keys( state.blockVisibility ).filter(\n\t\t\t\t( key ) => state.blockVisibility[ key ]\n\t\t\t)\n\t\t);\n\t\tif ( visibleBlocks.size === 0 ) {\n\t\t\treturn EMPTY_SET;\n\t\t}\n\t\treturn visibleBlocks;\n\t},\n\t( state ) => [ state.blockVisibility ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n */\nexport const __unstableGetContentLockingParent = createSelector(\n\t( state, clientId ) => {\n\t\tlet current = clientId;\n\t\tlet result;\n\t\twhile ( state.blocks.parents.has( current ) ) {\n\t\t\tcurrent = state.blocks.parents.get( current );\n\t\t\tif (\n\t\t\t\tcurrent &&\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\n\t\t\t) {\n\t\t\t\tresult = current;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\n);\n\n/**\n * DO-NOT-USE in production.\n * This selector is created for internal/experimental only usage and may be\n * removed anytime without any warning, causing breakage on any plugin or theme invoking it.\n *\n * @param {Object} state Global application state.\n */\nexport function __unstableGetTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\nexport function __unstableHasActiveBlockOverlayActive( state, clientId ) {\n\t// Prevent overlay on blocks with a non-default editing mode. If the mdoe is\n\t// 'disabled' then the overlay is redundant since the block can't be\n\t// selected. If the mode is 'contentOnly' then the overlay is redundant\n\t// since there will be no controls to interact with once selected.\n\tif ( getBlockEditingMode( state, clientId ) !== 'default' ) {\n\t\treturn false;\n\t}\n\n\t// If the block editing is locked, the block overlay is always active.\n\tif ( ! canEditBlock( state, clientId ) ) {\n\t\treturn true;\n\t}\n\n\tconst editorMode = __unstableGetEditorMode( state );\n\n\t// In zoom-out mode, the block overlay is always active for top level blocks.\n\tif (\n\t\teditorMode === 'zoom-out' &&\n\t\tclientId &&\n\t\t! getBlockRootClientId( state, clientId )\n\t) {\n\t\treturn true;\n\t}\n\n\t// In navigation mode, the block overlay is active when the block is not\n\t// selected (and doesn't contain a selected child). The same behavior is\n\t// also enabled in all modes for blocks that have controlled children\n\t// (reusable block, template part, navigation), unless explicitly disabled\n\t// with `supports.__experimentalDisableBlockOverlay`.\n\tconst blockSupportDisable = hasBlockSupport(\n\t\tgetBlockName( state, clientId ),\n\t\t'__experimentalDisableBlockOverlay',\n\t\tfalse\n\t);\n\tconst shouldEnableIfUnselected =\n\t\teditorMode === 'navigation' ||\n\t\t( blockSupportDisable\n\t\t\t? false\n\t\t\t: areInnerBlocksControlled( state, clientId ) );\n\n\treturn (\n\t\tshouldEnableIfUnselected &&\n\t\t! isBlockSelected( state, clientId ) &&\n\t\t! hasSelectedInnerBlock( state, clientId, true )\n\t);\n}\n\nexport function __unstableIsWithinBlockOverlay( state, clientId ) {\n\tlet parent = state.blocks.parents.get( clientId );\n\twhile ( !! parent ) {\n\t\tif ( __unstableHasActiveBlockOverlayActive( state, parent ) ) {\n\t\t\treturn true;\n\t\t}\n\t\tparent = state.blocks.parents.get( parent );\n\t}\n\treturn false;\n}\n"]}