import {
  isBackdrop
} from "./IXXFVVA2.js";
import {
  setProperty
} from "./FW6QFGFT.js";
import {
  walkTreeOutside
} from "./FV23EKJL.js";

// src/dialog/utils/mark-tree-outside.ts
import { chain } from "@ariakit/core/utils/misc";
function getPropertyName(id = "", ancestor = false) {
  return `__ariakit-dialog-${ancestor ? "ancestor" : "outside"}${id ? `-${id}` : ""}`;
}
function markElement(element, id = "") {
  return chain(
    setProperty(element, getPropertyName(), true),
    setProperty(element, getPropertyName(id), true)
  );
}
function markAncestor(element, id = "") {
  return chain(
    setProperty(element, getPropertyName("", true), true),
    setProperty(element, getPropertyName(id, true), true)
  );
}
function isElementMarked(element, id) {
  const ancestorProperty = getPropertyName(id, true);
  if (element[ancestorProperty])
    return true;
  const elementProperty = getPropertyName(id);
  do {
    if (element[elementProperty])
      return true;
    if (!element.parentElement)
      return false;
    element = element.parentElement;
  } while (true);
}
function markTreeOutside(dialogId, ...elements) {
  const cleanups = [];
  const ids = elements.map((el) => el == null ? void 0 : el.id);
  walkTreeOutside(
    elements,
    (element) => {
      if (isBackdrop(element, ...ids))
        return;
      cleanups.unshift(markElement(element, dialogId));
    },
    (ancestor) => cleanups.unshift(markAncestor(ancestor, dialogId))
  );
  const restoreAccessibilityTree = () => {
    cleanups.forEach((fn) => fn());
  };
  return restoreAccessibilityTree;
}

export {
  markElement,
  markAncestor,
  isElementMarked,
  markTreeOutside
};
