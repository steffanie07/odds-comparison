import {
  useFocusable
} from "./MYID4V27.js";
import {
  createComponent,
  createElement,
  createHook
} from "./NQJBHION.js";
import {
  useBooleanEvent,
  useEvent,
  useIsMouseMoving,
  useMergeRefs
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/hovercard/hovercard-anchor.ts
import { useEffect, useRef } from "react";
import { addGlobalEventListener } from "@ariakit/core/utils/events";
var useHovercardAnchor = createHook(
  (_a) => {
    var _b = _a, { store, showOnHover = true } = _b, props = __objRest(_b, ["store", "showOnHover"]);
    const disabled = props.disabled || props["aria-disabled"] === true || props["aria-disabled"] === "true";
    const showTimeoutRef = useRef(0);
    useEffect(() => () => window.clearTimeout(showTimeoutRef.current), []);
    useEffect(() => {
      const onMouseLeave = (event) => {
        const { anchorElement } = store.getState();
        if (!anchorElement)
          return;
        if (event.target !== anchorElement)
          return;
        window.clearTimeout(showTimeoutRef.current);
        showTimeoutRef.current = 0;
      };
      return addGlobalEventListener("mouseleave", onMouseLeave, true);
    }, [store]);
    const onMouseMoveProp = props.onMouseMove;
    const showOnHoverProp = useBooleanEvent(showOnHover);
    const isMouseMoving = useIsMouseMoving();
    const onMouseMove = useEvent(
      (event) => {
        store.setAnchorElement(event.currentTarget);
        onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);
        if (disabled)
          return;
        if (event.defaultPrevented)
          return;
        if (showTimeoutRef.current)
          return;
        if (!isMouseMoving())
          return;
        if (!showOnHoverProp(event))
          return;
        const { showTimeout, timeout } = store.getState();
        showTimeoutRef.current = window.setTimeout(() => {
          showTimeoutRef.current = 0;
          if (!isMouseMoving())
            return;
          store.show();
        }, showTimeout != null ? showTimeout : timeout);
      }
    );
    props = __spreadProps(__spreadValues({}, props), {
      ref: useMergeRefs(store.setAnchorElement, props.ref),
      onMouseMove
    });
    props = useFocusable(props);
    return props;
  }
);
var HovercardAnchor = createComponent(
  (props) => {
    const htmlProps = useHovercardAnchor(props);
    return createElement("a", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  HovercardAnchor.displayName = "HovercardAnchor";
}

export {
  useHovercardAnchor,
  HovercardAnchor
};
