"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _classnames = _interopRequireDefault(require("classnames"));

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _blocks = require("@wordpress/blocks");

var _components = require("@wordpress/components");

var _blockMover = _interopRequireDefault(require("../block-mover"));

var _blockParentSelector = _interopRequireDefault(require("../block-parent-selector"));

var _blockSwitcher = _interopRequireDefault(require("../block-switcher"));

var _blockControls = _interopRequireDefault(require("../block-controls"));

var _blockToolbarLastItem = _interopRequireDefault(require("./block-toolbar-last-item"));

var _blockSettingsMenu = _interopRequireDefault(require("../block-settings-menu"));

var _blockLock = require("../block-lock");

var _convertToGroupButtons = require("../convert-to-group-buttons");

var _blockEditVisuallyButton = _interopRequireDefault(require("../block-edit-visually-button"));

var _utils = require("./utils");

var _store = require("../../store");

var _blockNameContext = _interopRequireDefault(require("./block-name-context"));

var _lockUnlock = require("../../lock-unlock");

/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const BlockToolbar = ({
  hideDragHandle
}) => {
  const {
    getSelectedBlockClientId
  } = (0, _data.useSelect)(_store.store);
  const {
    blockClientIds,
    blockType,
    hasFixedToolbar,
    isDistractionFree,
    isValid,
    isVisual,
    blockEditingMode
  } = (0, _data.useSelect)(select => {
    const {
      getBlockName,
      getBlockMode,
      getSelectedBlockClientIds,
      isBlockValid,
      getBlockRootClientId,
      getSettings,
      getBlockEditingMode
    } = (0, _lockUnlock.unlock)(select(_store.store));
    const selectedBlockClientIds = getSelectedBlockClientIds();
    const selectedBlockClientId = selectedBlockClientIds[0];
    const blockRootClientId = getBlockRootClientId(selectedBlockClientId);
    const settings = getSettings();
    return {
      blockClientIds: selectedBlockClientIds,
      blockType: selectedBlockClientId && (0, _blocks.getBlockType)(getBlockName(selectedBlockClientId)),
      hasFixedToolbar: settings.hasFixedToolbar,
      isDistractionFree: settings.isDistractionFree,
      rootClientId: blockRootClientId,
      isValid: selectedBlockClientIds.every(id => isBlockValid(id)),
      isVisual: selectedBlockClientIds.every(id => getBlockMode(id) === 'visual'),
      blockEditingMode: getBlockEditingMode(selectedBlockClientId)
    };
  }, []);
  const toolbarWrapperRef = (0, _element.useRef)(null); // Handles highlighting the current block outline on hover or focus of the
  // block type toolbar area.

  const {
    toggleBlockHighlight
  } = (0, _data.useDispatch)(_store.store);
  const nodeRef = (0, _element.useRef)();
  const {
    showMovers,
    gestures: showMoversGestures
  } = (0, _utils.useShowMoversGestures)({
    ref: nodeRef,

    onChange(isFocused) {
      if (isFocused && isDistractionFree) {
        return;
      }

      toggleBlockHighlight(getSelectedBlockClientId(), isFocused);
    }

  }); // Account for the cases where the block toolbar is rendered within the
  // header area and not contextually to the block.

  const displayHeaderToolbar = (0, _compose.useViewportMatch)('medium', '<') || hasFixedToolbar;
  const isLargeViewport = !(0, _compose.useViewportMatch)('medium', '<');

  if (blockType) {
    if (!(0, _blocks.hasBlockSupport)(blockType, '__experimentalToolbar', true)) {
      return null;
    }
  }

  const shouldShowMovers = displayHeaderToolbar || showMovers;

  if (blockClientIds.length === 0) {
    return null;
  }

  const shouldShowVisualToolbar = isValid && isVisual;
  const isMultiToolbar = blockClientIds.length > 1;
  const isSynced = (0, _blocks.isReusableBlock)(blockType) || (0, _blocks.isTemplatePart)(blockType);
  const classes = (0, _classnames.default)('block-editor-block-toolbar', {
    'is-showing-movers': shouldShowMovers,
    'is-synced': isSynced
  });
  return (0, _element.createElement)("div", {
    className: classes,
    ref: toolbarWrapperRef
  }, !isMultiToolbar && isLargeViewport && blockEditingMode === 'default' && (0, _element.createElement)(_blockParentSelector.default, null), (shouldShowVisualToolbar || isMultiToolbar) && blockEditingMode === 'default' && (0, _element.createElement)("div", {
    ref: nodeRef,
    ...showMoversGestures
  }, (0, _element.createElement)(_components.ToolbarGroup, {
    className: "block-editor-block-toolbar__block-controls"
  }, (0, _element.createElement)(_blockSwitcher.default, {
    clientIds: blockClientIds
  }), !isMultiToolbar && (0, _element.createElement)(_blockLock.BlockLockToolbar, {
    clientId: blockClientIds[0],
    wrapperRef: toolbarWrapperRef
  }), (0, _element.createElement)(_blockMover.default, {
    clientIds: blockClientIds,
    hideDragHandle: hideDragHandle
  }))), shouldShowVisualToolbar && isMultiToolbar && (0, _element.createElement)(_convertToGroupButtons.BlockGroupToolbar, null), shouldShowVisualToolbar && (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_blockControls.default.Slot, {
    group: "parent",
    className: "block-editor-block-toolbar__slot"
  }), (0, _element.createElement)(_blockControls.default.Slot, {
    group: "block",
    className: "block-editor-block-toolbar__slot"
  }), (0, _element.createElement)(_blockControls.default.Slot, {
    className: "block-editor-block-toolbar__slot"
  }), (0, _element.createElement)(_blockControls.default.Slot, {
    group: "inline",
    className: "block-editor-block-toolbar__slot"
  }), (0, _element.createElement)(_blockControls.default.Slot, {
    group: "other",
    className: "block-editor-block-toolbar__slot"
  }), (0, _element.createElement)(_blockNameContext.default.Provider, {
    value: blockType?.name
  }, (0, _element.createElement)(_blockToolbarLastItem.default.Slot, null))), (0, _element.createElement)(_blockEditVisuallyButton.default, {
    clientIds: blockClientIds
  }), blockEditingMode === 'default' && (0, _element.createElement)(_blockSettingsMenu.default, {
    clientIds: blockClientIds
  }));
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-toolbar/README.md
 */


var _default = BlockToolbar;
exports.default = _default;
//# sourceMappingURL=index.js.map