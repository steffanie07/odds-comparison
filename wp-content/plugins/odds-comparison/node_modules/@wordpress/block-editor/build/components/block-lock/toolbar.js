"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BlockLockToolbar;

var _element = require("@wordpress/element");

var _i18n = require("@wordpress/i18n");

var _components = require("@wordpress/components");

var _dom = require("@wordpress/dom");

var _icons = require("@wordpress/icons");

var _modal = _interopRequireDefault(require("./modal"));

var _useBlockLock = _interopRequireDefault(require("./use-block-lock"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
function BlockLockToolbar({
  clientId,
  wrapperRef
}) {
  const {
    canEdit,
    canMove,
    canRemove,
    canLock
  } = (0, _useBlockLock.default)(clientId);
  const [isModalOpen, toggleModal] = (0, _element.useReducer)(isActive => !isActive, false);
  const lockButtonRef = (0, _element.useRef)(null);
  const isFirstRender = (0, _element.useRef)(true);
  const shouldHideBlockLockUI = !canLock || canEdit && canMove && canRemove; // Restore focus manually on the first focusable element in the toolbar
  // when the block lock modal is closed and the block is not locked anymore.
  // See https://github.com/WordPress/gutenberg/issues/51447

  (0, _element.useEffect)(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }

    if (!isModalOpen && shouldHideBlockLockUI) {
      _dom.focus.focusable.find(wrapperRef.current, {
        sequential: false
      }).find(element => element.tagName === 'BUTTON' && element !== lockButtonRef.current)?.focus();
    } // wrapperRef is a reference object and should be stable

  }, [isModalOpen, shouldHideBlockLockUI, wrapperRef]);

  if (shouldHideBlockLockUI) {
    return null;
  }

  return (0, _element.createElement)(_element.Fragment, null, (0, _element.createElement)(_components.ToolbarGroup, {
    className: "block-editor-block-lock-toolbar"
  }, (0, _element.createElement)(_components.ToolbarButton, {
    icon: _icons.lock,
    label: (0, _i18n.__)('Unlock'),
    onClick: toggleModal,
    ref: lockButtonRef
  })), isModalOpen && (0, _element.createElement)(_modal.default, {
    clientId: clientId,
    onClose: toggleModal
  }));
}
//# sourceMappingURL=toolbar.js.map