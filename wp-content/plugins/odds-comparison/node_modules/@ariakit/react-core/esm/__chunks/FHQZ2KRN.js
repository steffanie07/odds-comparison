import {
  useLazyValue,
  useLiveRef,
  useSafeLayoutEffect
} from "./J7Q2EO23.js";
import {
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/utils/store.tsx
import { useCallback, useMemo } from "react";
import { hasOwnProperty, identity } from "@ariakit/core/utils/misc";
import { useSyncExternalStore } from "use-sync-external-store/shim/index.js";
var noopSubscribe = () => () => {
};
function useStoreState(store, keyOrSelector = identity) {
  const getSnapshot = () => {
    if (!store)
      return;
    const state = store.getState();
    const selector = typeof keyOrSelector === "function" ? keyOrSelector : null;
    const key = typeof keyOrSelector === "string" ? keyOrSelector : null;
    if (selector)
      return selector(state);
    if (!key)
      return;
    if (!hasOwnProperty(state, key))
      return;
    return state[key];
  };
  return useSyncExternalStore(
    (store == null ? void 0 : store.subscribe) || noopSubscribe,
    getSnapshot,
    getSnapshot
  );
}
function useStoreProps(store, props, key, setKey) {
  const value = hasOwnProperty(props, key) ? props[key] : void 0;
  const propsRef = useLiveRef({
    value,
    setValue: setKey ? props[setKey] : void 0
  });
  useSafeLayoutEffect(() => {
    return store.sync(
      (state, prev) => {
        const { value: value2, setValue } = propsRef.current;
        if (!setValue)
          return;
        if (state[key] === prev[key])
          return;
        if (state[key] === value2)
          return;
        setValue(state[key]);
      },
      [key]
    );
  }, [store, key]);
  useSafeLayoutEffect(() => {
    return store.sync(() => {
      if (value === void 0)
        return;
      store.setState(key, value);
    }, [key]);
  }, [store, key, value]);
}
function useStore(createStore) {
  const store = useLazyValue(createStore);
  useSafeLayoutEffect(() => store.init(), [store]);
  const useState = useCallback(
    (keyOrSelector) => useStoreState(store, keyOrSelector),
    [store]
  );
  return useMemo(() => __spreadProps(__spreadValues({}, store), { useState }), [store, useState]);
}

export {
  useStoreState,
  useStoreProps,
  useStore
};
