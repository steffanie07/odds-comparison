{"version":3,"sources":["@wordpress/block-editor/src/layouts/grid.js"],"names":["__","BaseControl","Flex","FlexItem","RangeControl","__experimentalUnitControl","UnitControl","__experimentalParseQuantityAndUnitFromRawValue","parseQuantityAndUnitFromRawValue","appendSelectors","getBlockGapCSS","getGapCSSValue","shouldSkipSerialization","LAYOUT_DEFINITIONS","RANGE_CONTROL_MAX_VALUES","px","vw","vh","em","rem","name","label","inspectorControls","GridLayoutInspectorControls","layout","onChange","columnCount","toolBarControls","DefaultLayoutToolbarControls","getLayoutStyle","selector","style","blockName","hasBlockGapSupport","layoutDefinitions","minimumColumnWidth","blockGapValue","spacing","blockGap","undefined","output","rules","push","length","join","getOrientation","getAlignments","GridLayoutMinimumWidthControl","value","quantity","unit","handleSliderChange","next","handleUnitChange","newUnit","newValue","includes","toFixed","Math","round","GridLayoutColumnsControl"],"mappings":";;AAAA;AACA;AACA;AACA,SAASA,EAAT,QAAmB,iBAAnB;AAEA,SACCC,WADD,EAECC,IAFD,EAGCC,QAHD,EAICC,YAJD,EAKCC,yBAAyB,IAAIC,WAL9B,EAMCC,8CAA8C,IAAIC,gCANnD,QAOO,uBAPP;AASA;AACA;AACA;;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,SAAhD;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AACA,SAASC,kBAAT,QAAmC,eAAnC;AAEA,MAAMC,wBAAwB,GAAG;AAChCC,EAAAA,EAAE,EAAE,GAD4B;AAEhC,OAAK,GAF2B;AAGhCC,EAAAA,EAAE,EAAE,GAH4B;AAIhCC,EAAAA,EAAE,EAAE,GAJ4B;AAKhCC,EAAAA,EAAE,EAAE,EAL4B;AAMhCC,EAAAA,GAAG,EAAE;AAN2B,CAAjC;AASA,eAAe;AACdC,EAAAA,IAAI,EAAE,MADQ;AAEdC,EAAAA,KAAK,EAAErB,EAAE,CAAE,MAAF,CAFK;AAGdsB,EAAAA,iBAAiB,EAAE,SAASC,2BAAT,CAAsC;AACxDC,IAAAA,MAAM,GAAG,EAD+C;AAExDC,IAAAA;AAFwD,GAAtC,EAGf;AACH,WAAOD,MAAM,EAAEE,WAAR,GACN,cAAC,wBAAD;AAA0B,MAAA,MAAM,EAAGF,MAAnC;AAA4C,MAAA,QAAQ,EAAGC;AAAvD,MADM,GAGN,cAAC,6BAAD;AACC,MAAA,MAAM,EAAGD,MADV;AAEC,MAAA,QAAQ,EAAGC;AAFZ,MAHD;AAQA,GAfa;AAgBdE,EAAAA,eAAe,EAAE,SAASC,4BAAT,GAAwC;AACxD,WAAO,IAAP;AACA,GAlBa;AAmBdC,EAAAA,cAAc,EAAE,SAASA,cAAT,CAAyB;AACxCC,IAAAA,QADwC;AAExCN,IAAAA,MAFwC;AAGxCO,IAAAA,KAHwC;AAIxCC,IAAAA,SAJwC;AAKxCC,IAAAA,kBALwC;AAMxCC,IAAAA,iBAAiB,GAAGrB;AANoB,GAAzB,EAOZ;AACH,UAAM;AAAEsB,MAAAA,kBAAkB,GAAG,OAAvB;AAAgCT,MAAAA,WAAW,GAAG;AAA9C,QAAuDF,MAA7D,CADG,CAGH;AACA;;AACA,UAAMY,aAAa,GAClBL,KAAK,EAAEM,OAAP,EAAgBC,QAAhB,IACA,CAAE1B,uBAAuB,CAAEoB,SAAF,EAAa,SAAb,EAAwB,UAAxB,CADzB,GAEGrB,cAAc,CAAEoB,KAAK,EAAEM,OAAP,EAAgBC,QAAlB,EAA4B,OAA5B,CAFjB,GAGGC,SAJJ;AAMA,QAAIC,MAAM,GAAG,EAAb;AACA,UAAMC,KAAK,GAAG,EAAd;;AAEA,QAAKf,WAAL,EAAmB;AAClBe,MAAAA,KAAK,CAACC,IAAN,CACE,iCAAiChB,WAAa,mBADhD;AAGA,KAJD,MAIO,IAAKS,kBAAL,EAA0B;AAChCM,MAAAA,KAAK,CAACC,IAAN,CACE,uDAAuDP,kBAAoB,gBAD7E;AAGA;;AAED,QAAKM,KAAK,CAACE,MAAX,EAAoB;AACnB;AACA;AACAH,MAAAA,MAAM,GAAI,GAAG/B,eAAe,CAAEqB,QAAF,CAAc,MAAMW,KAAK,CAACG,IAAN,CAC/C,IAD+C,CAE7C,KAFH;AAGA,KA9BE,CAgCH;;;AACA,QAAKX,kBAAkB,IAAIG,aAA3B,EAA2C;AAC1CI,MAAAA,MAAM,IAAI9B,cAAc,CACvBoB,QADuB,EAEvBI,iBAFuB,EAGvB,MAHuB,EAIvBE,aAJuB,CAAxB;AAMA;;AACD,WAAOI,MAAP;AACA,GApEa;;AAqEdK,EAAAA,cAAc,GAAG;AAChB,WAAO,YAAP;AACA,GAvEa;;AAwEdC,EAAAA,aAAa,GAAG;AACf,WAAO,EAAP;AACA;;AA1Ea,CAAf,C,CA6EA;;AACA,SAASC,6BAAT,CAAwC;AAAEvB,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAxC,EAA+D;AAC9D,QAAM;AAAEU,IAAAA,kBAAkB,EAAEa,KAAK,GAAG;AAA9B,MAA0CxB,MAAhD;AACA,QAAM,CAAEyB,QAAF,EAAYC,IAAZ,IAAqB1C,gCAAgC,CAAEwC,KAAF,CAA3D;;AAEA,QAAMG,kBAAkB,GAAKC,IAAF,IAAY;AACtC3B,IAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETW,MAAAA,kBAAkB,EAAE,CAAEiB,IAAF,EAAQF,IAAR,EAAeN,IAAf,CAAqB,EAArB;AAFX,KAAF,CAAR;AAIA,GALD,CAJ8D,CAW9D;;;AACA,QAAMS,gBAAgB,GAAKC,OAAF,IAAe;AACvC;AACA;AACA,QAAIC,QAAJ;;AAEA,QAAK,CAAE,IAAF,EAAQ,KAAR,EAAgBC,QAAhB,CAA0BF,OAA1B,KAAuCJ,IAAI,KAAK,IAArD,EAA4D;AAC3D;AACAK,MAAAA,QAAQ,GAAG,CAAEN,QAAQ,GAAG,EAAb,EAAkBQ,OAAlB,CAA2B,CAA3B,IAAiCH,OAA5C;AACA,KAHD,MAGO,IAAK,CAAE,IAAF,EAAQ,KAAR,EAAgBE,QAAhB,CAA0BN,IAA1B,KAAoCI,OAAO,KAAK,IAArD,EAA4D;AAClE;AACAC,MAAAA,QAAQ,GAAGG,IAAI,CAACC,KAAL,CAAYV,QAAQ,GAAG,EAAvB,IAA8BK,OAAzC;AACA,KAHM,MAGA,IACN,CAAE,IAAF,EAAQ,IAAR,EAAc,GAAd,EAAoBE,QAApB,CAA8BF,OAA9B,KACAL,QAAQ,GAAG,GAFL,EAGL;AACD;AACAM,MAAAA,QAAQ,GAAG,MAAMD,OAAjB;AACA;;AAED7B,IAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETW,MAAAA,kBAAkB,EAAEoB;AAFX,KAAF,CAAR;AAIA,GAvBD;;AAyBA,SACC,gCACC,cAAC,WAAD,CAAa,WAAb;AAAyB,IAAA,EAAE,EAAC;AAA5B,KACGvD,EAAE,CAAE,sBAAF,CADL,CADD,EAIC,cAAC,IAAD;AAAM,IAAA,GAAG,EAAG;AAAZ,KACC,cAAC,QAAD;AAAU,IAAA,OAAO;AAAjB,KACC,cAAC,WAAD;AACC,IAAA,IAAI,EAAG,kBADR;AAEC,IAAA,QAAQ,EAAKuD,QAAF,IAAgB;AAC1B9B,MAAAA,QAAQ,CAAE,EACT,GAAGD,MADM;AAETW,QAAAA,kBAAkB,EAAEoB;AAFX,OAAF,CAAR;AAIA,KAPF;AAQC,IAAA,YAAY,EAAGF,gBARhB;AASC,IAAA,KAAK,EAAGL,KATT;AAUC,IAAA,GAAG,EAAG;AAVP,IADD,CADD,EAeC,cAAC,QAAD;AAAU,IAAA,OAAO;AAAjB,KACC,cAAC,YAAD;AACC,IAAA,QAAQ,EAAGG,kBADZ;AAEC,IAAA,KAAK,EAAGF,QAFT;AAGC,IAAA,GAAG,EAAG,CAHP;AAIC,IAAA,GAAG,EAAGnC,wBAAwB,CAAEoC,IAAF,CAAxB,IAAoC,GAJ3C;AAKC,IAAA,cAAc,EAAG;AALlB,IADD,CAfD,CAJD,CADD;AAgCA,C,CAED;;;AACA,SAASU,wBAAT,CAAmC;AAAEpC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAnC,EAA0D;AACzD,QAAM;AAAEC,IAAAA,WAAW,GAAG;AAAhB,MAAsBF,MAA5B;AAEA,SACC,cAAC,YAAD;AACC,IAAA,KAAK,EAAGxB,EAAE,CAAE,SAAF,CADX;AAEC,IAAA,KAAK,EAAG0B,WAFT;AAGC,IAAA,QAAQ,EAAKsB,KAAF,IACVvB,QAAQ,CAAE,EACT,GAAGD,MADM;AAETE,MAAAA,WAAW,EAAEsB;AAFJ,KAAF,CAJV;AASC,IAAA,GAAG,EAAG,CATP;AAUC,IAAA,GAAG,EAAG;AAVP,IADD;AAcA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\nimport {\n\tBaseControl,\n\tFlex,\n\tFlexItem,\n\tRangeControl,\n\t__experimentalUnitControl as UnitControl,\n\t__experimentalParseQuantityAndUnitFromRawValue as parseQuantityAndUnitFromRawValue,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport { appendSelectors, getBlockGapCSS } from './utils';\nimport { getGapCSSValue } from '../hooks/gap';\nimport { shouldSkipSerialization } from '../hooks/utils';\nimport { LAYOUT_DEFINITIONS } from './definitions';\n\nconst RANGE_CONTROL_MAX_VALUES = {\n\tpx: 600,\n\t'%': 100,\n\tvw: 100,\n\tvh: 100,\n\tem: 38,\n\trem: 38,\n};\n\nexport default {\n\tname: 'grid',\n\tlabel: __( 'Grid' ),\n\tinspectorControls: function GridLayoutInspectorControls( {\n\t\tlayout = {},\n\t\tonChange,\n\t} ) {\n\t\treturn layout?.columnCount ? (\n\t\t\t<GridLayoutColumnsControl layout={ layout } onChange={ onChange } />\n\t\t) : (\n\t\t\t<GridLayoutMinimumWidthControl\n\t\t\t\tlayout={ layout }\n\t\t\t\tonChange={ onChange }\n\t\t\t/>\n\t\t);\n\t},\n\ttoolBarControls: function DefaultLayoutToolbarControls() {\n\t\treturn null;\n\t},\n\tgetLayoutStyle: function getLayoutStyle( {\n\t\tselector,\n\t\tlayout,\n\t\tstyle,\n\t\tblockName,\n\t\thasBlockGapSupport,\n\t\tlayoutDefinitions = LAYOUT_DEFINITIONS,\n\t} ) {\n\t\tconst { minimumColumnWidth = '12rem', columnCount = null } = layout;\n\n\t\t// If a block's block.json skips serialization for spacing or spacing.blockGap,\n\t\t// don't apply the user-defined value to the styles.\n\t\tconst blockGapValue =\n\t\t\tstyle?.spacing?.blockGap &&\n\t\t\t! shouldSkipSerialization( blockName, 'spacing', 'blockGap' )\n\t\t\t\t? getGapCSSValue( style?.spacing?.blockGap, '0.5em' )\n\t\t\t\t: undefined;\n\n\t\tlet output = '';\n\t\tconst rules = [];\n\n\t\tif ( columnCount ) {\n\t\t\trules.push(\n\t\t\t\t`grid-template-columns: repeat(${ columnCount }, minmax(0, 1fr))`\n\t\t\t);\n\t\t} else if ( minimumColumnWidth ) {\n\t\t\trules.push(\n\t\t\t\t`grid-template-columns: repeat(auto-fill, minmax(min(${ minimumColumnWidth }, 100%), 1fr))`\n\t\t\t);\n\t\t}\n\n\t\tif ( rules.length ) {\n\t\t\t// Reason to disable: the extra line breaks added by prettier mess with the unit tests.\n\t\t\t// eslint-disable-next-line prettier/prettier\n\t\t\toutput = `${ appendSelectors( selector ) } { ${ rules.join(\n\t\t\t\t'; '\n\t\t\t) }; }`;\n\t\t}\n\n\t\t// Output blockGap styles based on rules contained in layout definitions in theme.json.\n\t\tif ( hasBlockGapSupport && blockGapValue ) {\n\t\t\toutput += getBlockGapCSS(\n\t\t\t\tselector,\n\t\t\t\tlayoutDefinitions,\n\t\t\t\t'grid',\n\t\t\t\tblockGapValue\n\t\t\t);\n\t\t}\n\t\treturn output;\n\t},\n\tgetOrientation() {\n\t\treturn 'horizontal';\n\t},\n\tgetAlignments() {\n\t\treturn [];\n\t},\n};\n\n// Enables setting minimum width of grid items.\nfunction GridLayoutMinimumWidthControl( { layout, onChange } ) {\n\tconst { minimumColumnWidth: value = '12rem' } = layout;\n\tconst [ quantity, unit ] = parseQuantityAndUnitFromRawValue( value );\n\n\tconst handleSliderChange = ( next ) => {\n\t\tonChange( {\n\t\t\t...layout,\n\t\t\tminimumColumnWidth: [ next, unit ].join( '' ),\n\t\t} );\n\t};\n\n\t// Mostly copied from HeightControl.\n\tconst handleUnitChange = ( newUnit ) => {\n\t\t// Attempt to smooth over differences between currentUnit and newUnit.\n\t\t// This should slightly improve the experience of switching between unit types.\n\t\tlet newValue;\n\n\t\tif ( [ 'em', 'rem' ].includes( newUnit ) && unit === 'px' ) {\n\t\t\t// Convert pixel value to an approximate of the new unit, assuming a root size of 16px.\n\t\t\tnewValue = ( quantity / 16 ).toFixed( 2 ) + newUnit;\n\t\t} else if ( [ 'em', 'rem' ].includes( unit ) && newUnit === 'px' ) {\n\t\t\t// Convert to pixel value assuming a root size of 16px.\n\t\t\tnewValue = Math.round( quantity * 16 ) + newUnit;\n\t\t} else if (\n\t\t\t[ 'vh', 'vw', '%' ].includes( newUnit ) &&\n\t\t\tquantity > 100\n\t\t) {\n\t\t\t// When converting to `vh`, `vw`, or `%` units, cap the new value at 100.\n\t\t\tnewValue = 100 + newUnit;\n\t\t}\n\n\t\tonChange( {\n\t\t\t...layout,\n\t\t\tminimumColumnWidth: newValue,\n\t\t} );\n\t};\n\n\treturn (\n\t\t<fieldset>\n\t\t\t<BaseControl.VisualLabel as=\"legend\">\n\t\t\t\t{ __( 'Minimum column width' ) }\n\t\t\t</BaseControl.VisualLabel>\n\t\t\t<Flex gap={ 4 }>\n\t\t\t\t<FlexItem isBlock>\n\t\t\t\t\t<UnitControl\n\t\t\t\t\t\tsize={ '__unstable-large' }\n\t\t\t\t\t\tonChange={ ( newValue ) => {\n\t\t\t\t\t\t\tonChange( {\n\t\t\t\t\t\t\t\t...layout,\n\t\t\t\t\t\t\t\tminimumColumnWidth: newValue,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} }\n\t\t\t\t\t\tonUnitChange={ handleUnitChange }\n\t\t\t\t\t\tvalue={ value }\n\t\t\t\t\t\tmin={ 0 }\n\t\t\t\t\t/>\n\t\t\t\t</FlexItem>\n\t\t\t\t<FlexItem isBlock>\n\t\t\t\t\t<RangeControl\n\t\t\t\t\t\tonChange={ handleSliderChange }\n\t\t\t\t\t\tvalue={ quantity }\n\t\t\t\t\t\tmin={ 0 }\n\t\t\t\t\t\tmax={ RANGE_CONTROL_MAX_VALUES[ unit ] || 600 }\n\t\t\t\t\t\twithInputField={ false }\n\t\t\t\t\t/>\n\t\t\t\t</FlexItem>\n\t\t\t</Flex>\n\t\t</fieldset>\n\t);\n}\n\n// Enables setting number of grid columns\nfunction GridLayoutColumnsControl( { layout, onChange } ) {\n\tconst { columnCount = 3 } = layout;\n\n\treturn (\n\t\t<RangeControl\n\t\t\tlabel={ __( 'Columns' ) }\n\t\t\tvalue={ columnCount }\n\t\t\tonChange={ ( value ) =>\n\t\t\t\tonChange( {\n\t\t\t\t\t...layout,\n\t\t\t\t\tcolumnCount: value,\n\t\t\t\t} )\n\t\t\t}\n\t\t\tmin={ 1 }\n\t\t\tmax={ 6 }\n\t\t/>\n\t);\n}\n"]}