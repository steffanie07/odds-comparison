"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValueFromObjectPath = void 0;
exports.kebabCase = kebabCase;
exports.setImmutably = setImmutably;

var _changeCase = require("change-case");

/**
 * External dependencies
 */

/**
 * Converts a path to an array of its fragments.
 * Supports strings, numbers and arrays:
 *
 * 'foo' => [ 'foo' ]
 * 2 => [ '2' ]
 * [ 'foo', 'bar' ] => [ 'foo', 'bar' ]
 *
 * @param {string|number|Array} path Path
 * @return {Array} Normalized path.
 */
function normalizePath(path) {
  if (Array.isArray(path)) {
    return path;
  } else if (typeof path === 'number') {
    return [path.toString()];
  }

  return [path];
}
/**
 * Converts any string to kebab case.
 * Backwards compatible with Lodash's `_.kebabCase()`.
 * Backwards compatible with `_wp_to_kebab_case()`.
 *
 * @see https://lodash.com/docs/4.17.15#kebabCase
 * @see https://developer.wordpress.org/reference/functions/_wp_to_kebab_case/
 *
 * @param {string} str String to convert.
 * @return {string} Kebab-cased string
 */


function kebabCase(str) {
  let input = str;

  if (typeof str !== 'string') {
    var _str$toString;

    input = (_str$toString = str?.toString?.()) !== null && _str$toString !== void 0 ? _str$toString : '';
  } // See https://github.com/lodash/lodash/blob/b185fcee26b2133bd071f4aaca14b455c2ed1008/lodash.js#L4970


  input = input.replace(/['\u2019]/, '');
  return (0, _changeCase.paramCase)(input, {
    splitRegexp: [/(?!(?:1ST|2ND|3RD|[4-9]TH)(?![a-z]))([a-z0-9])([A-Z])/g, // fooBar => foo-bar, 3Bar => 3-bar
    /(?!(?:1st|2nd|3rd|[4-9]th)(?![a-z]))([0-9])([a-z])/g, // 3bar => 3-bar
    /([A-Za-z])([0-9])/g, // Foo3 => foo-3, foo3 => foo-3
    /([A-Z])([A-Z][a-z])/g // FOOBar => foo-bar
    ]
  });
}
/**
 * Clones an object.
 * Arrays are also cloned as arrays.
 * Non-object values are returned unchanged.
 *
 * @param {*} object Object to clone.
 * @return {*} Cloned object, or original literal non-object value.
 */


function cloneObject(object) {
  if (Array.isArray(object)) {
    return object.map(cloneObject);
  }

  if (object && typeof object === 'object') {
    return { ...Object.fromEntries(Object.entries(object).map(([key, value]) => [key, cloneObject(value)]))
    };
  }

  return object;
}
/**
 * Immutably sets a value inside an object. Like `lodash#set`, but returning a
 * new object. Treats nullish initial values as empty objects. Clones any
 * nested objects. Supports arrays, too.
 *
 * @param {Object}              object Object to set a value in.
 * @param {number|string|Array} path   Path in the object to modify.
 * @param {*}                   value  New value to set.
 * @return {Object} Cloned object with the new value set.
 */


function setImmutably(object, path, value) {
  const normalizedPath = normalizePath(path);
  const newObject = object ? cloneObject(object) : {};
  normalizedPath.reduce((acc, key, i) => {
    if (acc[key] === undefined) {
      if (Number.isInteger(path[i + 1])) {
        acc[key] = [];
      } else {
        acc[key] = {};
      }
    }

    if (i === normalizedPath.length - 1) {
      acc[key] = value;
    }

    return acc[key];
  }, newObject);
  return newObject;
}
/**
 * Helper util to return a value from a certain path of the object.
 * Path is specified as either:
 * - a string of properties, separated by dots, for example: "x.y".
 * - an array of properties, for example `[ 'x', 'y' ]`.
 * You can also specify a default value in case the result is nullish.
 *
 * @param {Object}       object       Input object.
 * @param {string|Array} path         Path to the object property.
 * @param {*}            defaultValue Default value if the value at the specified path is nullish.
 * @return {*} Value of the object property at the specified path.
 */


const getValueFromObjectPath = (object, path, defaultValue) => {
  var _value;

  const normalizedPath = Array.isArray(path) ? path : path.split('.');
  let value = object;
  normalizedPath.forEach(fieldName => {
    value = value?.[fieldName];
  });
  return (_value = value) !== null && _value !== void 0 ? _value : defaultValue;
};

exports.getValueFromObjectPath = getValueFromObjectPath;
//# sourceMappingURL=object.js.map