"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _blocks = require("@wordpress/blocks");

var _data = require("@wordpress/data");

var _draggableChip = _interopRequireDefault(require("../block-draggable/draggable-chip"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const InserterDraggableBlocks = ({
  isEnabled,
  blocks,
  icon,
  children,
  isPattern
}) => {
  const transferData = {
    type: 'inserter',
    blocks
  };
  const blockTypeIcon = (0, _data.useSelect)(select => {
    const {
      getBlockType
    } = select(_blocks.store);
    return blocks.length === 1 && getBlockType(blocks[0].name)?.icon;
  }, [blocks]);
  return (0, _element.createElement)(_components.Draggable, {
    __experimentalTransferDataType: "wp-blocks",
    transferData: transferData,
    onDragStart: event => {
      event.dataTransfer.setData('text/html', (0, _blocks.serialize)(blocks));
    },
    __experimentalDragComponent: (0, _element.createElement)(_draggableChip.default, {
      count: blocks.length,
      icon: icon || !isPattern && blockTypeIcon,
      isPattern: isPattern
    })
  }, ({
    onDraggableStart,
    onDraggableEnd
  }) => {
    return children({
      draggable: isEnabled,
      onDragStart: isEnabled ? onDraggableStart : undefined,
      onDragEnd: isEnabled ? onDraggableEnd : undefined
    });
  });
};

var _default = InserterDraggableBlocks;
exports.default = _default;
//# sourceMappingURL=index.js.map