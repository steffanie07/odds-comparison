"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _components = require("@wordpress/components");

var _data = require("@wordpress/data");

var _compose = require("@wordpress/compose");

var _i18n = require("@wordpress/i18n");

var _convertToGroupButtons = require("../convert-to-group-buttons");

var _blockLock = require("../block-lock");

var _store = require("../../store");

var _blockModeToggle = _interopRequireDefault(require("../block-settings-menu/block-mode-toggle"));

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */
const {
  Fill,
  Slot
} = (0, _components.createSlotFill)('BlockSettingsMenuControls');

const BlockSettingsMenuControlsSlot = ({
  fillProps,
  clientIds = null,
  __unstableDisplayLocation
}) => {
  const {
    selectedBlocks,
    selectedClientIds,
    canRemove
  } = (0, _data.useSelect)(select => {
    const {
      getBlockNamesByClientId,
      getSelectedBlockClientIds,
      canRemoveBlocks
    } = select(_store.store);
    const ids = clientIds !== null ? clientIds : getSelectedBlockClientIds();
    return {
      selectedBlocks: getBlockNamesByClientId(ids),
      selectedClientIds: ids,
      canRemove: canRemoveBlocks(ids)
    };
  }, [clientIds]);
  const {
    canLock
  } = (0, _blockLock.useBlockLock)(selectedClientIds[0]);
  const showLockButton = selectedClientIds.length === 1 && canLock; // Check if current selection of blocks is Groupable or Ungroupable
  // and pass this props down to ConvertToGroupButton.

  const convertToGroupButtonProps = (0, _convertToGroupButtons.useConvertToGroupButtonProps)(selectedClientIds);
  const {
    isGroupable,
    isUngroupable
  } = convertToGroupButtonProps;
  const showConvertToGroupButton = (isGroupable || isUngroupable) && canRemove;
  return (0, _element.createElement)(Slot, {
    fillProps: { ...fillProps,
      __unstableDisplayLocation,
      selectedBlocks,
      selectedClientIds
    }
  }, fills => {
    if (!fills?.length > 0 && !showConvertToGroupButton && !showLockButton) {
      return null;
    }

    return (0, _element.createElement)(_components.MenuGroup, null, showConvertToGroupButton && (0, _element.createElement)(_convertToGroupButtons.ConvertToGroupButton, { ...convertToGroupButtonProps,
      onClose: fillProps?.onClose
    }), showLockButton && (0, _element.createElement)(_blockLock.BlockLockMenuItem, {
      clientId: selectedClientIds[0]
    }), fills, fillProps?.canMove && !fillProps?.onlyBlock && (0, _element.createElement)(_components.MenuItem, {
      onClick: (0, _compose.pipe)(fillProps?.onClose, fillProps?.onMoveTo)
    }, (0, _i18n.__)('Move to')), fillProps?.count === 1 && (0, _element.createElement)(_blockModeToggle.default, {
      clientId: fillProps?.firstBlockClientId,
      onToggle: fillProps?.onClose
    }));
  });
};
/**
 * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/block-editor/src/components/block-settings-menu-controls/README.md
 *
 * @param {Object} props Fill props.
 * @return {WPElement} Element.
 */


function BlockSettingsMenuControls({ ...props
}) {
  return (0, _element.createElement)(_components.__experimentalStyleProvider, {
    document: document
  }, (0, _element.createElement)(Fill, { ...props
  }));
}

BlockSettingsMenuControls.Slot = BlockSettingsMenuControlsSlot;
var _default = BlockSettingsMenuControls;
exports.default = _default;
//# sourceMappingURL=index.js.map