{"version":3,"sources":["@wordpress/block-editor/src/hooks/use-editor-wrapper-styles.native.js"],"names":["ALIGNMENT_MAX_WIDTH","full","wide","wideMedium","wideLandscape","BLOCK_DEFAULT_MARGIN","getWideWidthStyles","align","isLandscape","width","WIDE_ALIGNMENTS","alignments","ALIGNMENT_BREAKPOINTS","large","maxWidth","small","medium","getFullWidthStyles","blockName","hasParents","parentBlockName","isContainerRelated","isFullWidth","alignmentHelpers","fullWidthStyles","paddingHorizontal","getBlockMargin","blockWidth","marginHorizontal","parentBlockAlignment","parentWidth","isWider","isWideWidth","isScreenWidthEqual","useEditorWrapperStyles","contentResizeMode","reversed","height","blockMargin","wrapperStyles","canvasStyles","flex","styles","alignmentStyles"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport { useWindowDimensions } from 'react-native';\n\n/**\n * WordPress dependencies\n */\nimport { useMemo } from '@wordpress/element';\nimport {\n\tALIGNMENT_BREAKPOINTS,\n\tWIDE_ALIGNMENTS,\n\talignmentHelpers,\n} from '@wordpress/components';\n\n/**\n * Internal dependencies\n */\nimport styles from './use-editor-wrapper-styles.scss';\n\nconst ALIGNMENT_MAX_WIDTH = {\n\tfull: '100%',\n\twide: 1054,\n\twideMedium: 770,\n\twideLandscape: 662,\n};\n\nconst BLOCK_DEFAULT_MARGIN = 16;\n\n/**\n * Get the styles for the wide width alignment.\n *\n * @param {Object}  [options]           The options for the helper.\n * @param {string}  options.align       The alignment value.\n * @param {boolean} options.isLandscape Whether the screen is in landscape mode.\n * @param {number}  options.width       The width of the screen.\n * @return {Object} An object containing the styles for the wide width alignment.\n */\nfunction getWideWidthStyles( { align, isLandscape, width } = {} ) {\n\tif ( align !== WIDE_ALIGNMENTS.alignments.wide ) {\n\t\treturn {};\n\t}\n\n\tif ( isLandscape && width < ALIGNMENT_BREAKPOINTS.large ) {\n\t\treturn { maxWidth: ALIGNMENT_MAX_WIDTH.wideLandscape };\n\t}\n\n\tif ( width <= ALIGNMENT_BREAKPOINTS.small ) {\n\t\treturn { maxWidth: width };\n\t}\n\n\tif (\n\t\twidth >= ALIGNMENT_BREAKPOINTS.medium &&\n\t\twidth < ALIGNMENT_BREAKPOINTS.wide\n\t) {\n\t\treturn { maxWidth: ALIGNMENT_MAX_WIDTH.wideMedium };\n\t}\n\n\treturn { maxWidth: ALIGNMENT_MAX_WIDTH.wide };\n}\n\n/**\n * Get the styles for the full width alignment.\n *\n * @param {Object}  [options]               The options for the helper.\n * @param {string}  options.align           The alignment value.\n * @param {string}  options.blockName       The name of the block.\n * @param {boolean} options.hasParents      Whether the block has parents.\n * @param {string}  options.parentBlockName The name of the parent block.\n * @return {Object} An object containing the styles for the full width alignment.\n */\nfunction getFullWidthStyles( {\n\talign,\n\tblockName,\n\thasParents,\n\tparentBlockName,\n} = {} ) {\n\tconst { isContainerRelated, isFullWidth } = alignmentHelpers;\n\tconst fullWidthStyles = isFullWidth( align )\n\t\t? { maxWidth: ALIGNMENT_MAX_WIDTH.full }\n\t\t: {};\n\n\tif (\n\t\t! align &&\n\t\thasParents &&\n\t\t! isContainerRelated( parentBlockName ) &&\n\t\tisContainerRelated( blockName )\n\t) {\n\t\tfullWidthStyles.paddingHorizontal = BLOCK_DEFAULT_MARGIN;\n\t}\n\n\treturn fullWidthStyles;\n}\n\n/**\n * Get the block margin based on various conditions.\n *\n * @param {Object}  [options]                    The options for the helper.\n * @param {string}  options.align                The alignment value.\n * @param {string}  options.blockName            The name of the block.\n * @param {number}  options.blockWidth           The width of the block.\n * @param {boolean} options.hasParents           Whether the block has parents.\n * @param {number}  options.marginHorizontal     Default horizontal margin.\n * @param {string}  options.parentBlockAlignment The alignment of the parent block.\n * @param {string}  options.parentBlockName      The name of the parent block.\n * @param {number}  options.parentWidth          The width of the parent block.\n * @param {number}  options.width                The width of the screen.\n * @return {number} The calculated block margin.\n */\nfunction getBlockMargin( {\n\talign,\n\tblockName,\n\tblockWidth,\n\thasParents,\n\tmarginHorizontal,\n\tparentBlockAlignment,\n\tparentBlockName,\n\tparentWidth,\n\twidth,\n} = {} ) {\n\tconst { isContainerRelated, isWider, isWideWidth, isFullWidth } =\n\t\talignmentHelpers;\n\n\tif ( isFullWidth( align ) ) {\n\t\tif ( ! hasParents ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn marginHorizontal;\n\t}\n\n\tif ( isWideWidth( align ) ) {\n\t\treturn marginHorizontal;\n\t}\n\n\tif (\n\t\tisFullWidth( parentBlockAlignment ) &&\n\t\t! isWider( blockWidth, 'medium' )\n\t) {\n\t\tif ( isContainerRelated( blockName ) || isWider( width, 'mobile' ) ) {\n\t\t\treturn marginHorizontal;\n\t\t}\n\t\treturn marginHorizontal * 2;\n\t}\n\n\tif (\n\t\tisContainerRelated( parentBlockName ) &&\n\t\t! isContainerRelated( blockName )\n\t) {\n\t\tconst isScreenWidthEqual = parentWidth === width;\n\t\tif ( isScreenWidthEqual || isWider( width, 'mobile' ) ) {\n\t\t\treturn marginHorizontal;\n\t\t}\n\t}\n\n\treturn marginHorizontal;\n}\n\n/**\n * Custom hook to get the styles and margin for the editor wrapper.\n *\n * @param {Object}  [props]                    The props for the hook.\n * @param {string}  props.align                The alignment value.\n * @param {string}  props.blockName            The name of the block.\n * @param {number}  props.blockWidth           The width of the block.\n * @param {string}  props.contentResizeMode    The content resize mode.\n * @param {boolean} props.hasParents           Whether the block has parents.\n * @param {number}  props.marginHorizontal     Default horizontal margin.\n * @param {string}  props.parentBlockAlignment The alignment of the parent block.\n * @param {string}  props.parentBlockName      The name of the parent block.\n * @param {number}  props.parentWidth          The width of the parent block.\n * @param {boolean} [props.reversed=false]     Whether the flex direction should be reversed.\n * @return {[Array, number]} An array containing the wrapper styles and block margin.\n */\nexport function useEditorWrapperStyles( {\n\talign,\n\tblockName,\n\tblockWidth,\n\tcontentResizeMode,\n\thasParents,\n\tmarginHorizontal,\n\tparentBlockAlignment,\n\tparentBlockName,\n\tparentWidth,\n\treversed = false,\n} = {} ) {\n\tconst { width, height } = useWindowDimensions();\n\tconst isLandscape = width >= height;\n\n\tconst blockMargin = useMemo(\n\t\t() =>\n\t\t\tgetBlockMargin( {\n\t\t\t\talign,\n\t\t\t\tblockName,\n\t\t\t\tblockWidth,\n\t\t\t\thasParents,\n\t\t\t\tmarginHorizontal,\n\t\t\t\tparentBlockAlignment,\n\t\t\t\tparentBlockName,\n\t\t\t\tparentWidth,\n\t\t\t\twidth,\n\t\t\t} ),\n\t\t[\n\t\t\talign,\n\t\t\tblockName,\n\t\t\tblockWidth,\n\t\t\thasParents,\n\t\t\tmarginHorizontal,\n\t\t\tparentBlockAlignment,\n\t\t\tparentBlockName,\n\t\t\tparentWidth,\n\t\t\twidth,\n\t\t]\n\t);\n\n\tconst wrapperStyles = useMemo( () => {\n\t\tlet canvasStyles;\n\n\t\tif ( contentResizeMode === 'stretch' ) {\n\t\t\t// For these cases, no width constraints should be added.\n\t\t\tcanvasStyles = { flex: 1 };\n\t\t} else if ( reversed ) {\n\t\t\tcanvasStyles = styles[ 'use-editor-wrapper-styles--reversed' ];\n\t\t} else {\n\t\t\tcanvasStyles = styles[ 'use-editor-wrapper-styles' ];\n\t\t}\n\n\t\tconst alignmentStyles = {\n\t\t\t...getWideWidthStyles( { align, isLandscape, width } ),\n\t\t\t...getFullWidthStyles( {\n\t\t\t\talign,\n\t\t\t\tblockName,\n\t\t\t\thasParents,\n\t\t\t\tparentBlockName,\n\t\t\t} ),\n\t\t};\n\n\t\treturn [ canvasStyles, alignmentStyles ];\n\t}, [\n\t\talign,\n\t\tblockName,\n\t\thasParents,\n\t\tparentBlockName,\n\t\tisLandscape,\n\t\twidth,\n\t\tcontentResizeMode,\n\t\treversed,\n\t] );\n\n\treturn [ wrapperStyles, blockMargin ];\n}\n"]}