{"version":3,"sources":["@wordpress/block-editor/src/components/block-edit/edit.js"],"names":["classnames","withFilters","getBlockDefaultClassName","hasBlockSupport","getBlockType","useContext","useMemo","BlockContext","DEFAULT_BLOCK_CONTEXT","Edit","props","name","blockType","Component","edit","save","EditWithFilters","EditWithGeneratedProps","attributes","blockContext","context","usesContext","Object","fromEntries","entries","filter","key","includes","apiVersion","generatedClassName","className"],"mappings":";;AAAA;AACA;AACA;AACA,OAAOA,UAAP,MAAuB,YAAvB;AAEA;AACA;AACA;;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SACCC,wBADD,EAECC,eAFD,EAGCC,YAHD,QAIO,mBAJP;AAKA,SAASC,UAAT,EAAqBC,OAArB,QAAoC,oBAApC;AAEA;AACA;AACA;;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,qBAAqB,GAAG,EAA9B;;AAEA,MAAMC,IAAI,GAAKC,KAAF,IAAa;AACzB,QAAM;AAAEC,IAAAA;AAAF,MAAWD,KAAjB;AACA,QAAME,SAAS,GAAGR,YAAY,CAAEO,IAAF,CAA9B;;AAEA,MAAK,CAAEC,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA,GANwB,CAQzB;AACA;AACA;;;AACA,QAAMC,SAAS,GAAGD,SAAS,CAACE,IAAV,IAAkBF,SAAS,CAACG,IAA9C;AAEA,SAAO,cAAC,SAAD,OAAgBL;AAAhB,IAAP;AACA,CAdD;;AAgBA,MAAMM,eAAe,GAAGf,WAAW,CAAE,kBAAF,CAAX,CAAmCQ,IAAnC,CAAxB;;AAEA,MAAMQ,sBAAsB,GAAKP,KAAF,IAAa;AAC3C,QAAM;AAAEQ,IAAAA,UAAU,GAAG,EAAf;AAAmBP,IAAAA;AAAnB,MAA4BD,KAAlC;AACA,QAAME,SAAS,GAAGR,YAAY,CAAEO,IAAF,CAA9B;AACA,QAAMQ,YAAY,GAAGd,UAAU,CAAEE,YAAF,CAA/B,CAH2C,CAK3C;;AACA,QAAMa,OAAO,GAAGd,OAAO,CAAE,MAAM;AAC9B,WAAOM,SAAS,IAAIA,SAAS,CAACS,WAAvB,GACJC,MAAM,CAACC,WAAP,CACAD,MAAM,CAACE,OAAP,CAAgBL,YAAhB,EAA+BM,MAA/B,CAAuC,CAAE,CAAEC,GAAF,CAAF,KACtCd,SAAS,CAACS,WAAV,CAAsBM,QAAtB,CAAgCD,GAAhC,CADD,CADA,CADI,GAMJlB,qBANH;AAOA,GARsB,EAQpB,CAAEI,SAAF,EAAaO,YAAb,CARoB,CAAvB;;AAUA,MAAK,CAAEP,SAAP,EAAmB;AAClB,WAAO,IAAP;AACA;;AAED,MAAKA,SAAS,CAACgB,UAAV,GAAuB,CAA5B,EAAgC;AAC/B,WAAO,cAAC,eAAD,OAAsBlB,KAAtB;AAA8B,MAAA,OAAO,EAAGU;AAAxC,MAAP;AACA,GAtB0C,CAwB3C;;;AACA,QAAMS,kBAAkB,GAAG1B,eAAe,CAAES,SAAF,EAAa,WAAb,EAA0B,IAA1B,CAAf,GACxBV,wBAAwB,CAAES,IAAF,CADA,GAExB,IAFH;AAGA,QAAMmB,SAAS,GAAG9B,UAAU,CAC3B6B,kBAD2B,EAE3BX,UAAU,CAACY,SAFgB,EAG3BpB,KAAK,CAACoB,SAHqB,CAA5B;AAMA,SACC,cAAC,eAAD,OACMpB,KADN;AAEC,IAAA,OAAO,EAAGU,OAFX;AAGC,IAAA,SAAS,EAAGU;AAHb,IADD;AAOA,CAzCD;;AA2CA,eAAeb,sBAAf","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { withFilters } from '@wordpress/components';\nimport {\n\tgetBlockDefaultClassName,\n\thasBlockSupport,\n\tgetBlockType,\n} from '@wordpress/blocks';\nimport { useContext, useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport BlockContext from '../block-context';\n\n/**\n * Default value used for blocks which do not define their own context needs,\n * used to guarantee that a block's `context` prop will always be an object. It\n * is assigned as a constant since it is always expected to be an empty object,\n * and in order to avoid unnecessary React reconciliations of a changing object.\n *\n * @type {{}}\n */\nconst DEFAULT_BLOCK_CONTEXT = {};\n\nconst Edit = ( props ) => {\n\tconst { name } = props;\n\tconst blockType = getBlockType( name );\n\n\tif ( ! blockType ) {\n\t\treturn null;\n\t}\n\n\t// `edit` and `save` are functions or components describing the markup\n\t// with which a block is displayed. If `blockType` is valid, assign\n\t// them preferentially as the render value for the block.\n\tconst Component = blockType.edit || blockType.save;\n\n\treturn <Component { ...props } />;\n};\n\nconst EditWithFilters = withFilters( 'editor.BlockEdit' )( Edit );\n\nconst EditWithGeneratedProps = ( props ) => {\n\tconst { attributes = {}, name } = props;\n\tconst blockType = getBlockType( name );\n\tconst blockContext = useContext( BlockContext );\n\n\t// Assign context values using the block type's declared context needs.\n\tconst context = useMemo( () => {\n\t\treturn blockType && blockType.usesContext\n\t\t\t? Object.fromEntries(\n\t\t\t\t\tObject.entries( blockContext ).filter( ( [ key ] ) =>\n\t\t\t\t\t\tblockType.usesContext.includes( key )\n\t\t\t\t\t)\n\t\t\t  )\n\t\t\t: DEFAULT_BLOCK_CONTEXT;\n\t}, [ blockType, blockContext ] );\n\n\tif ( ! blockType ) {\n\t\treturn null;\n\t}\n\n\tif ( blockType.apiVersion > 1 ) {\n\t\treturn <EditWithFilters { ...props } context={ context } />;\n\t}\n\n\t// Generate a class name for the block's editable form.\n\tconst generatedClassName = hasBlockSupport( blockType, 'className', true )\n\t\t? getBlockDefaultClassName( name )\n\t\t: null;\n\tconst className = classnames(\n\t\tgeneratedClassName,\n\t\tattributes.className,\n\t\tprops.className\n\t);\n\n\treturn (\n\t\t<EditWithFilters\n\t\t\t{ ...props }\n\t\t\tcontext={ context }\n\t\t\tclassName={ className }\n\t\t/>\n\t);\n};\n\nexport default EditWithGeneratedProps;\n"]}