import {
  createCompositeStore
} from "../__chunks/NRXA5QTV.js";
import {
  createCollectionStore
} from "../__chunks/SHUO6V52.js";
import {
  createStore
} from "../__chunks/FQL4TRMX.js";
import {
  defaultValue
} from "../__chunks/WVTCK5PV.js";
import "../__chunks/O35LWD4W.js";
import "../__chunks/5XEKIOCW.js";
import {
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/tab/tab-store.ts
function createTabStore(props = {}) {
  var _a;
  const syncState = (_a = props.store) == null ? void 0 : _a.getState();
  const composite = createCompositeStore(__spreadProps(__spreadValues({}, props), {
    orientation: defaultValue(
      props.orientation,
      syncState == null ? void 0 : syncState.orientation,
      "horizontal"
    ),
    focusLoop: defaultValue(props.focusLoop, syncState == null ? void 0 : syncState.focusLoop, true)
  }));
  const panels = createCollectionStore();
  const initialState = __spreadProps(__spreadValues({}, composite.getState()), {
    selectedId: defaultValue(
      props.selectedId,
      syncState == null ? void 0 : syncState.selectedId,
      props.defaultSelectedId,
      void 0
    ),
    selectOnMove: defaultValue(
      props.selectOnMove,
      syncState == null ? void 0 : syncState.selectOnMove,
      true
    )
  });
  const tab = createStore(initialState, composite, props.store);
  tab.setup(
    () => tab.sync(() => {
      const { activeId, selectOnMove } = tab.getState();
      if (!selectOnMove)
        return;
      if (!activeId)
        return;
      const tabItem = composite.item(activeId);
      if (!tabItem)
        return;
      if (tabItem.dimmed)
        return;
      if (tabItem.disabled)
        return;
      tab.setState("selectedId", tabItem.id);
    }, ["moves"])
  );
  tab.setup(
    () => tab.syncBatch(
      (state) => tab.setState("activeId", state.selectedId),
      ["selectedId"]
    )
  );
  tab.setup(
    () => tab.sync(
      (state) => {
        if (state.selectedId !== void 0)
          return;
        const { activeId, renderedItems } = tab.getState();
        const tabItem = composite.item(activeId);
        if (tabItem && !tabItem.disabled && !tabItem.dimmed) {
          tab.setState("selectedId", tabItem.id);
        } else {
          const tabItem2 = renderedItems.find(
            (item) => !item.disabled && !item.dimmed
          );
          tab.setState("selectedId", tabItem2 == null ? void 0 : tabItem2.id);
        }
      },
      ["selectedId", "renderedItems"]
    )
  );
  tab.setup(
    () => tab.sync(
      (state) => {
        const tabs = state.renderedItems;
        if (!tabs.length)
          return;
        return panels.sync(
          (state2) => {
            const items = state2.renderedItems;
            const hasOrphanPanels = items.some((panel) => !panel.tabId);
            if (!hasOrphanPanels)
              return;
            items.forEach((panel, i) => {
              if (panel.tabId)
                return;
              const tabItem = tabs[i];
              if (!tabItem)
                return;
              panels.renderItem(__spreadProps(__spreadValues({}, panel), { tabId: tabItem.id }));
            });
          },
          ["renderedItems"]
        );
      },
      ["renderedItems"]
    )
  );
  return __spreadProps(__spreadValues(__spreadValues({}, composite), tab), {
    panels,
    setSelectedId: (id) => tab.setState("selectedId", id),
    select: (id) => {
      tab.setState("selectedId", id);
      composite.move(id);
    }
  });
}
export {
  createTabStore
};
