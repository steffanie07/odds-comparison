"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.privateApis = void 0;

var globalStyles = _interopRequireWildcard(require("./components/global-styles"));

var _provider = require("./components/provider");

var _lockUnlock = require("./lock-unlock");

var _getRichTextValues = require("./components/rich-text/get-rich-text-values");

var _object = require("./utils/object");

var _resizableBoxPopover = _interopRequireDefault(require("./components/resizable-box-popover"));

var _inserter = require("./components/inserter");

var _listView = require("./components/list-view");

var _blockInfoSlotFill = _interopRequireDefault(require("./components/block-info-slot-fill"));

var _useShouldContextualToolbarShow = require("./utils/use-should-contextual-toolbar-show");

var _utils = require("./hooks/utils");

var _blockEditingMode = require("./components/block-editing-mode");

var _blockQuickNavigation = _interopRequireDefault(require("./components/block-quick-navigation"));

var _layout = require("./components/block-list/layout");

var _blockRemovalWarningModal = require("./components/block-removal-warning-modal");

var _hooks = require("./hooks");

var _dimensionsTool = _interopRequireDefault(require("./components/dimensions-tool"));

var _resolutionTool = _interopRequireDefault(require("./components/resolution-tool"));

var _reusableBlockRenameHint = _interopRequireWildcard(require("./components/inserter/reusable-block-rename-hint"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Internal dependencies
 */

/**
 * Private @wordpress/block-editor APIs.
 */
const privateApis = {};
exports.privateApis = privateApis;
(0, _lockUnlock.lock)(privateApis, { ...globalStyles,
  ExperimentalBlockEditorProvider: _provider.ExperimentalBlockEditorProvider,
  getRichTextValues: _getRichTextValues.getRichTextValues,
  kebabCase: _object.kebabCase,
  PrivateInserter: _inserter.ComposedPrivateInserter,
  PrivateListView: _listView.PrivateListView,
  ResizableBoxPopover: _resizableBoxPopover.default,
  BlockInfo: _blockInfoSlotFill.default,
  useShouldContextualToolbarShow: _useShouldContextualToolbarShow.useShouldContextualToolbarShow,
  cleanEmptyObject: _utils.cleanEmptyObject,
  useBlockEditingMode: _blockEditingMode.useBlockEditingMode,
  BlockQuickNavigation: _blockQuickNavigation.default,
  LayoutStyle: _layout.LayoutStyle,
  BlockRemovalWarningModal: _blockRemovalWarningModal.BlockRemovalWarningModal,
  useLayoutClasses: _hooks.useLayoutClasses,
  useLayoutStyles: _hooks.useLayoutStyles,
  DimensionsTool: _dimensionsTool.default,
  ResolutionTool: _resolutionTool.default,
  ReusableBlocksRenameHint: _reusableBlockRenameHint.default,
  useReusableBlocksRenameHint: _reusableBlockRenameHint.useReusableBlocksRenameHint
});
//# sourceMappingURL=private-apis.js.map