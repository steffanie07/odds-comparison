{"version":3,"sources":["@wordpress/block-editor/src/components/link-control/is-url-like.js"],"names":["isURLLike","val","hasSpaces","includes","protocol","protocolIsValid","mayBeTLD","hasPossibleTLD","isWWW","startsWith","isInternal","url","maxLength","cleanedURL","split","regex","RegExp","test"],"mappings":";;;;;;;AAGA;;AAHA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASA,SAAT,CAAoBC,GAApB,EAA0B;AACxC,QAAMC,SAAS,GAAGD,GAAG,CAACE,QAAJ,CAAc,GAAd,CAAlB;;AAEA,MAAKD,SAAL,EAAiB;AAChB,WAAO,KAAP;AACA;;AAED,QAAME,QAAQ,GAAG,sBAAaH,GAAb,CAAjB;AACA,QAAMI,eAAe,GAAG,0BAAiBD,QAAjB,CAAxB;AAEA,QAAME,QAAQ,GAAGC,cAAc,CAAEN,GAAF,CAA/B;AAEA,QAAMO,KAAK,GAAGP,GAAG,EAAEQ,UAAL,CAAiB,MAAjB,CAAd;AAEA,QAAMC,UAAU,GAAGT,GAAG,EAAEQ,UAAL,CAAiB,GAAjB,KAA0B,0BAAiBR,GAAjB,CAA7C;AAEA,SAAOI,eAAe,IAAIG,KAAnB,IAA4BE,UAA5B,IAA0CJ,QAAjD;AACA;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,cAAT,CAAyBI,GAAzB,EAA8BC,SAAS,GAAG,CAA1C,EAA8C;AAC7C;AACA,QAAMC,UAAU,GAAGF,GAAG,CAACG,KAAJ,CAAW,MAAX,EAAqB,CAArB,CAAnB,CAF6C,CAI7C;AACA;AACA;AACA;AACA;;AACA,QAAMC,KAAK,GAAG,IAAIC,MAAJ,CACZ,6BAA6BJ,SAAW,aAD5B,CAAd;AAIA,SAAOG,KAAK,CAACE,IAAN,CAAYJ,UAAZ,CAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { getProtocol, isValidProtocol, isValidFragment } from '@wordpress/url';\n\n/**\n * Determines whether a given value could be a URL. Note this does not\n * guarantee the value is a URL only that it looks like it might be one. For\n * example, just because a string has `www.` in it doesn't make it a URL,\n * but it does make it highly likely that it will be so in the context of\n * creating a link it makes sense to treat it like one.\n *\n * @param {string} val the candidate for being URL-like (or not).\n *\n * @return {boolean} whether or not the value is potentially a URL.\n */\nexport default function isURLLike( val ) {\n\tconst hasSpaces = val.includes( ' ' );\n\n\tif ( hasSpaces ) {\n\t\treturn false;\n\t}\n\n\tconst protocol = getProtocol( val );\n\tconst protocolIsValid = isValidProtocol( protocol );\n\n\tconst mayBeTLD = hasPossibleTLD( val );\n\n\tconst isWWW = val?.startsWith( 'www.' );\n\n\tconst isInternal = val?.startsWith( '#' ) && isValidFragment( val );\n\n\treturn protocolIsValid || isWWW || isInternal || mayBeTLD;\n}\n\n/**\n * Checks if a given URL has a valid Top-Level Domain (TLD).\n *\n * @param {string} url       - The URL to check.\n * @param {number} maxLength - The maximum length of the TLD.\n * @return {boolean} Returns true if the URL has a valid TLD, false otherwise.\n */\nfunction hasPossibleTLD( url, maxLength = 6 ) {\n\t// Clean the URL by removing anything after the first occurrence of \"?\" or \"#\".\n\tconst cleanedURL = url.split( /[?#]/ )[ 0 ];\n\n\t// Regular expression explanation:\n\t// - (?<=\\S)                  : Positive lookbehind assertion to ensure there is at least one non-whitespace character before the TLD\n\t// - \\.                       : Matches a literal dot (.)\n\t// - [a-zA-Z_]{2,maxLength}   : Matches 2 to maxLength letters or underscores, representing the TLD\n\t// - (?:\\/|$)                 : Non-capturing group that matches either a forward slash (/) or the end of the string\n\tconst regex = new RegExp(\n\t\t`(?<=\\\\S)\\\\.(?:[a-zA-Z_]{2,${ maxLength }})(?:\\\\/|$)`\n\t);\n\n\treturn regex.test( cleanedURL );\n}\n"]}