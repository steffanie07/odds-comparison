{"version":3,"sources":["@wordpress/block-editor/src/components/global-styles/color-panel.native.js"],"names":["ColorPanel","value","inheritedValue","onChange","settings","colors","gradients","globalStyles","detectedBackgroundColor","setDetectedBackgroundColor","detectedTextColor","setDetectedTextColor","baseGlobalStyles","select","getSettings","blockEditorStore","__experimentalGlobalStylesBaseStyles","color","decodeValue","rawValue","encodeColorValue","colorValue","allColors","flatMap","originColors","colorObject","find","slug","encodeGradientValue","gradientValue","allGradients","originGradients","gradientObject","gradient","showTextPanel","textColor","text","setTextColor","newColor","resetTextColor","undefined","showBackgroundPanel","backgroundColor","background","setBackgroundColor","newValue","setGradient","newGradient","resetBackground","currentGradients","withoutGradientsSupport","Array","isArray","length","items","label","onColorChange","onColorCleared","onGradientChange","filter","Boolean","currentDetectedTextColor","currentDetectedBackgroundColor"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { useEffect, useState, useMemo, useCallback } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\nimport { useGlobalStyles } from '@wordpress/components';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport PanelColorGradientSettings from '../colors-gradients/panel-color-gradient-settings';\nimport { useColorsPerOrigin, useGradientsPerOrigin } from './hooks';\nimport { getValueFromVariable } from './utils';\nimport { setImmutably } from '../../utils/object';\nimport ContrastChecker from '../contrast-checker';\nimport InspectorControls from '../inspector-controls';\nimport {\n\tuseHasColorPanel,\n\tuseHasTextPanel,\n\tuseHasBackgroundPanel,\n} from './color-panel.js';\n\nconst ColorPanel = ( {\n\tvalue,\n\tinheritedValue = value,\n\tonChange,\n\tsettings,\n} ) => {\n\tconst colors = useColorsPerOrigin( settings );\n\tconst gradients = useGradientsPerOrigin( settings );\n\tconst globalStyles = useGlobalStyles();\n\n\tconst [ detectedBackgroundColor, setDetectedBackgroundColor ] = useState();\n\tconst [ detectedTextColor, setDetectedTextColor ] = useState();\n\n\tconst { baseGlobalStyles } = useSelect( ( select ) => {\n\t\tconst { getSettings } = select( blockEditorStore );\n\t\treturn {\n\t\t\tbaseGlobalStyles:\n\t\t\t\tgetSettings()?.__experimentalGlobalStylesBaseStyles?.color,\n\t\t};\n\t} );\n\n\tconst decodeValue = ( rawValue ) =>\n\t\tgetValueFromVariable( { settings }, '', rawValue );\n\tconst encodeColorValue = useCallback(\n\t\t( colorValue ) => {\n\t\t\tconst allColors = colors.flatMap(\n\t\t\t\t( { colors: originColors } ) => originColors\n\t\t\t);\n\t\t\tconst colorObject = allColors.find(\n\t\t\t\t( { color } ) => color === colorValue\n\t\t\t);\n\t\t\treturn colorObject\n\t\t\t\t? 'var:preset|color|' + colorObject.slug\n\t\t\t\t: colorValue;\n\t\t},\n\t\t[ colors ]\n\t);\n\tconst encodeGradientValue = useCallback(\n\t\t( gradientValue ) => {\n\t\t\tconst allGradients = gradients.flatMap(\n\t\t\t\t( { gradients: originGradients } ) => originGradients\n\t\t\t);\n\t\t\tconst gradientObject = allGradients.find(\n\t\t\t\t( { gradient } ) => gradient === gradientValue\n\t\t\t);\n\t\t\treturn gradientObject\n\t\t\t\t? 'var:preset|gradient|' + gradientObject.slug\n\t\t\t\t: gradientValue;\n\t\t},\n\t\t[ gradients ]\n\t);\n\n\t// Text Color\n\tconst showTextPanel = useHasTextPanel( settings );\n\tconst textColor = decodeValue( inheritedValue?.color?.text );\n\tconst setTextColor = useCallback(\n\t\t( newColor ) => {\n\t\t\tonChange(\n\t\t\t\tsetImmutably(\n\t\t\t\t\tvalue,\n\t\t\t\t\t[ 'color', 'text' ],\n\t\t\t\t\tencodeColorValue( newColor )\n\t\t\t\t)\n\t\t\t);\n\t\t},\n\t\t[ encodeColorValue, onChange, value ]\n\t);\n\tconst resetTextColor = useCallback(\n\t\t() => setTextColor( undefined ),\n\t\t[ setTextColor ]\n\t);\n\n\t// BackgroundColor\n\tconst showBackgroundPanel = useHasBackgroundPanel( settings );\n\tconst backgroundColor = decodeValue( inheritedValue?.color?.background );\n\tconst gradient = decodeValue( inheritedValue?.color?.gradient );\n\tconst setBackgroundColor = useCallback(\n\t\t( newColor ) => {\n\t\t\tconst newValue = setImmutably(\n\t\t\t\tvalue,\n\t\t\t\t[ 'color', 'background' ],\n\t\t\t\tencodeColorValue( newColor )\n\t\t\t);\n\t\t\tnewValue.color.gradient = undefined;\n\t\t\tonChange( newValue );\n\t\t},\n\t\t[ encodeColorValue, onChange, value ]\n\t);\n\tconst setGradient = useCallback(\n\t\t( newGradient ) => {\n\t\t\tconst newValue = setImmutably(\n\t\t\t\tvalue,\n\t\t\t\t[ 'color', 'gradient' ],\n\t\t\t\tencodeGradientValue( newGradient )\n\t\t\t);\n\t\t\tnewValue.color.background = undefined;\n\t\t\tonChange( newValue );\n\t\t},\n\t\t[ encodeGradientValue, onChange, value ]\n\t);\n\tconst resetBackground = useCallback( () => {\n\t\tconst newValue = setImmutably(\n\t\t\tvalue,\n\t\t\t[ 'color', 'background' ],\n\t\t\tundefined\n\t\t);\n\t\tnewValue.color.gradient = undefined;\n\t\tonChange( newValue );\n\t}, [ onChange, value ] );\n\tconst currentGradients = settings?.color?.gradients;\n\tconst withoutGradientsSupport =\n\t\tArray.isArray( currentGradients ) && currentGradients.length === 0;\n\n\tconst items = useMemo(\n\t\t() =>\n\t\t\t[\n\t\t\t\tshowTextPanel && {\n\t\t\t\t\tlabel: __( 'Text' ),\n\t\t\t\t\tcolorValue: textColor,\n\t\t\t\t\tonColorChange: setTextColor,\n\t\t\t\t\tonColorCleared: resetTextColor,\n\t\t\t\t},\n\t\t\t\tshowBackgroundPanel && {\n\t\t\t\t\tlabel: __( 'Background' ),\n\t\t\t\t\tcolorValue: backgroundColor,\n\t\t\t\t\tonColorChange: setBackgroundColor,\n\t\t\t\t\tonColorCleared: resetBackground,\n\t\t\t\t\tonGradientChange: ! withoutGradientsSupport\n\t\t\t\t\t\t? setGradient\n\t\t\t\t\t\t: undefined,\n\t\t\t\t\tgradientValue: gradient,\n\t\t\t\t},\n\t\t\t].filter( Boolean ),\n\t\t[\n\t\t\tbackgroundColor,\n\t\t\tgradient,\n\t\t\tresetBackground,\n\t\t\tresetTextColor,\n\t\t\tsetBackgroundColor,\n\t\t\tsetGradient,\n\t\t\tsetTextColor,\n\t\t\tshowBackgroundPanel,\n\t\t\tshowTextPanel,\n\t\t\ttextColor,\n\t\t\twithoutGradientsSupport,\n\t\t]\n\t);\n\n\tuseEffect( () => {\n\t\t// The following logic is used to determine current text/background colors:\n\t\t// 1. The globalStyles object is queried to determine whether a color has been\n\t\t// set via a block's settings.\n\t\t// 2. If a block-based theme is in use and no globalStyles exist, the theme's\n\t\t// default/base colors are used.\n\t\t// 3. If no globalStyles exist and a theme isn't block-based, there is no way\n\t\t// to determine the default text/background color and the checker won't run.\n\t\tconst currentDetectedTextColor =\n\t\t\tglobalStyles?.color || baseGlobalStyles?.text;\n\t\tconst currentDetectedBackgroundColor =\n\t\t\tglobalStyles?.backgroundColor || baseGlobalStyles?.background;\n\n\t\tsetDetectedTextColor( currentDetectedTextColor );\n\t\tsetDetectedBackgroundColor( currentDetectedBackgroundColor );\n\t}, [ globalStyles, baseGlobalStyles ] );\n\n\treturn (\n\t\t<InspectorControls>\n\t\t\t<PanelColorGradientSettings\n\t\t\t\ttitle={ __( 'Color' ) }\n\t\t\t\tinitialOpen={ false }\n\t\t\t\tsettings={ items }\n\t\t\t>\n\t\t\t\t<ContrastChecker\n\t\t\t\t\tbackgroundColor={ detectedBackgroundColor }\n\t\t\t\t\ttextColor={ detectedTextColor }\n\t\t\t\t/>\n\t\t\t</PanelColorGradientSettings>\n\t\t</InspectorControls>\n\t);\n};\n\nexport { useHasColorPanel };\nexport default ColorPanel;\n"]}