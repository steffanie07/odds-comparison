{"version":3,"sources":["@wordpress/block-editor/src/components/block-list-appender/index.js"],"names":["DefaultAppender","rootClientId","canInsertDefaultBlock","select","blockEditorStore","canInsertBlockType","useAppender","CustomAppender","isVisible","getTemplateLock","getSelectedBlockClientId","__unstableGetEditorMode","getBlockEditingMode","selectedBlockClientId","isParentSelected","BlockListAppender","renderAppender","className","tagName","TagName","appender","isDragOver","getBlockInsertionPoint","isBlockInsertionPointVisible","getBlockCount","insertionPoint"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { getDefaultBlockName } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport DefaultBlockAppender from '../default-block-appender';\nimport ButtonBlockAppender from '../button-block-appender';\nimport { store as blockEditorStore } from '../../store';\nimport { unlock } from '../../lock-unlock';\n\nfunction DefaultAppender( { rootClientId } ) {\n\tconst canInsertDefaultBlock = useSelect( ( select ) =>\n\t\tselect( blockEditorStore ).canInsertBlockType(\n\t\t\tgetDefaultBlockName(),\n\t\t\trootClientId\n\t\t)\n\t);\n\n\tif ( canInsertDefaultBlock ) {\n\t\t// Render the default block appender if the context supports use\n\t\t// of the default appender.\n\t\treturn <DefaultBlockAppender rootClientId={ rootClientId } />;\n\t}\n\n\t// Fallback in case the default block can't be inserted.\n\treturn (\n\t\t<ButtonBlockAppender\n\t\t\trootClientId={ rootClientId }\n\t\t\tclassName=\"block-list-appender__toggle\"\n\t\t/>\n\t);\n}\n\nfunction useAppender( rootClientId, CustomAppender ) {\n\tconst isVisible = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetTemplateLock,\n\t\t\t\tgetSelectedBlockClientId,\n\t\t\t\t__unstableGetEditorMode,\n\t\t\t\tgetBlockEditingMode,\n\t\t\t} = unlock( select( blockEditorStore ) );\n\n\t\t\tif ( CustomAppender === false ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ! CustomAppender ) {\n\t\t\t\tconst selectedBlockClientId = getSelectedBlockClientId();\n\t\t\t\tconst isParentSelected =\n\t\t\t\t\trootClientId === selectedBlockClientId ||\n\t\t\t\t\t( ! rootClientId && ! selectedBlockClientId );\n\t\t\t\tif ( ! isParentSelected ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tgetTemplateLock( rootClientId ) ||\n\t\t\t\tgetBlockEditingMode( rootClientId ) === 'disabled' ||\n\t\t\t\t__unstableGetEditorMode() === 'zoom-out'\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn true;\n\t\t},\n\t\t[ rootClientId, CustomAppender ]\n\t);\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn CustomAppender ? (\n\t\t<CustomAppender />\n\t) : (\n\t\t<DefaultAppender rootClientId={ rootClientId } />\n\t);\n}\n\nfunction BlockListAppender( {\n\trootClientId,\n\trenderAppender,\n\tclassName,\n\ttagName: TagName = 'div',\n} ) {\n\tconst appender = useAppender( rootClientId, renderAppender );\n\tconst isDragOver = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockInsertionPoint,\n\t\t\t\tisBlockInsertionPointVisible,\n\t\t\t\tgetBlockCount,\n\t\t\t} = select( blockEditorStore );\n\t\t\tconst insertionPoint = getBlockInsertionPoint();\n\t\t\t// Ideally we should also check for `isDragging` but currently it\n\t\t\t// requires a lot more setup. We can revisit this once we refactor\n\t\t\t// the DnD utility hooks.\n\t\t\treturn (\n\t\t\t\tisBlockInsertionPointVisible() &&\n\t\t\t\trootClientId === insertionPoint?.rootClientId &&\n\t\t\t\tgetBlockCount( rootClientId ) === 0\n\t\t\t);\n\t\t},\n\t\t[ rootClientId ]\n\t);\n\n\tif ( ! appender ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<TagName\n\t\t\t// A `tabIndex` is used on the wrapping `div` element in order to\n\t\t\t// force a focus event to occur when an appender `button` element\n\t\t\t// is clicked. In some browsers (Firefox, Safari), button clicks do\n\t\t\t// not emit a focus event, which could cause this event to propagate\n\t\t\t// unexpectedly. The `tabIndex` ensures that the interaction is\n\t\t\t// captured as a focus, without also adding an extra tab stop.\n\t\t\t//\n\t\t\t// See: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button#Clicking_and_focus\n\t\t\ttabIndex={ -1 }\n\t\t\tclassName={ classnames( 'block-list-appender wp-block', className, {\n\t\t\t\t'is-drag-over': isDragOver,\n\t\t\t} ) }\n\t\t\t// Needed in case the whole editor is content editable (for multi\n\t\t\t// selection). It fixes an edge case where ArrowDown and ArrowRight\n\t\t\t// should collapse the selection to the end of that selection and\n\t\t\t// not into the appender.\n\t\t\tcontentEditable={ false }\n\t\t\t// The appender exists to let you add the first Paragraph before\n\t\t\t// any is inserted. To that end, this appender should visually be\n\t\t\t// presented as a block. That means theme CSS should style it as if\n\t\t\t// it were an empty paragraph block. That means a `wp-block` class to\n\t\t\t// ensure the width is correct, and a [data-block] attribute to ensure\n\t\t\t// the correct margin is applied, especially for classic themes which\n\t\t\t// have commonly targeted that attribute for margins.\n\t\t\tdata-block\n\t\t>\n\t\t\t{ appender }\n\t\t</TagName>\n\t);\n}\n\nexport default BlockListAppender;\n"]}