"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wrapper = exports.Track = exports.Tooltip = exports.ThumbWrapper = exports.Thumb = exports.Root = exports.Rail = exports.MarksWrapper = exports.MarkLabel = exports.Mark = exports.InputRange = exports.InputNumber = exports.BeforeIconWrapper = exports.AfterIconWrapper = exports.ActionRightWrapper = void 0;

var _base = _interopRequireDefault(require("@emotion/styled/base"));

var _react = require("@emotion/react");

var _numberControl = _interopRequireDefault(require("../../number-control"));

var _utils = require("../../utils");

var _space = require("../../ui/utils/space");

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const rangeHeightValue = 30;
const railHeight = 4;

const rangeHeight = () => /*#__PURE__*/(0, _react.css)({
  height: rangeHeightValue,
  minHeight: rangeHeightValue
}, process.env.NODE_ENV === "production" ? "" : ";label:rangeHeight;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEJDIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL251bWJlci1jb250cm9sJztcbmltcG9ydCB7IENPTE9SUywgcmVkdWNlTW90aW9uLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3VpL3V0aWxzL3NwYWNlJztcblxuaW1wb3J0IHR5cGUge1xuXHRSYW5nZU1hcmtQcm9wcyxcblx0UmFpbFByb3BzLFxuXHRUaHVtYlByb3BzLFxuXHRUb29sdGlwUHJvcHMsXG5cdFRyYWNrUHJvcHMsXG5cdFdyYXBwZXJQcm9wcyxcblx0UmFuZ2VDb250cm9sUHJvcHMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgcmFuZ2VIZWlnaHRWYWx1ZSA9IDMwO1xuY29uc3QgcmFpbEhlaWdodCA9IDQ7XG5jb25zdCByYW5nZUhlaWdodCA9ICgpID0+XG5cdGNzcyggeyBoZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUsIG1pbkhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSB9ICk7XG5jb25zdCB0aHVtYlNpemUgPSAxMjtcblxuY29uc3QgZGVwcmVjYXRlZEhlaWdodCA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG59OiBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPiApID0+XG5cdCEgX19uZXh0NDBweERlZmF1bHRTaXplICYmIGNzcyggeyBtaW5IZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUgfSApO1xuXG50eXBlIFJvb3RQcm9wcyA9IFBpY2s8IFJhbmdlQ29udHJvbFByb3BzLCAnX19uZXh0NDBweERlZmF1bHRTaXplJyA+O1xuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2PCBSb290UHJvcHMgPmBcblx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXHRwYWRkaW5nOiAwO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHRvdWNoLWFjdGlvbjogbm9uZTtcblx0d2lkdGg6IDEwMCU7XG5cdG1pbi1oZWlnaHQ6IDQwcHg7XG5cdC8qIFRPRE86IHJlbW92ZSBhZnRlciByZW1vdmluZyB0aGUgX19uZXh0NDBweERlZmF1bHRTaXplIHByb3AgKi9cblx0JHsgZGVwcmVjYXRlZEhlaWdodCB9O1xuYDtcblxuY29uc3Qgd3JhcHBlckNvbG9yID0gKCB7IGNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckZvY3VzIH06IFdyYXBwZXJQcm9wcyApID0+XG5cdGNzcyggeyBjb2xvciB9ICk7XG5cbmNvbnN0IHdyYXBwZXJNYXJnaW4gPSAoIHsgbWFya3MsIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tIH06IFdyYXBwZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICkge1xuXHRcdHJldHVybiBjc3MoIHsgbWFyZ2luQm90dG9tOiBtYXJrcyA/IDE2IDogdW5kZWZpbmVkIH0gKTtcblx0fVxuXHRyZXR1cm4gJyc7XG59O1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXY8IFdyYXBwZXJQcm9wcyA+YFxuXHRkaXNwbGF5OiBibG9jaztcblx0ZmxleDogMTtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR3aWR0aDogMTAwJTtcblxuXHQkeyB3cmFwcGVyQ29sb3IgfTtcblx0JHsgcmFuZ2VIZWlnaHQgfTtcblx0JHsgd3JhcHBlck1hcmdpbiB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IEJlZm9yZUljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGZsZXg7IC8vIGVuc3VyZXMgdGhlIGhlaWdodCBpc24ndCBhZmZlY3RlZCBieSBsaW5lLWhlaWdodFxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyBydGwoIHsgbWFyZ2luUmlnaHQ6IDYgfSApIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBBZnRlckljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGZsZXg7IC8vIGVuc3VyZXMgdGhlIGhlaWdodCBpc24ndCBhZmZlY3RlZCBieSBsaW5lLWhlaWdodFxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogNiB9ICkgfVxuYDtcblxuY29uc3QgcmFpbEJhY2tncm91bmRDb2xvciA9ICggeyBkaXNhYmxlZCwgcmFpbENvbG9yIH06IFJhaWxQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmQgPSByYWlsQ29sb3IgfHwgJyc7XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgUmFpbCA9IHN0eWxlZC5zcGFuYFxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMzAwIF0gfTtcblx0bGVmdDogMDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHJpZ2h0OiAwO1xuXHRkaXNwbGF5OiBibG9jaztcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSByYWlsSGVpZ2h0ICkgLyAyIH1weDtcblx0dG9wOiAwO1xuXHRib3JkZXItcmFkaXVzOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyByYWlsQmFja2dyb3VuZENvbG9yIH07XG5gO1xuXG5jb25zdCB0cmFja0JhY2tncm91bmRDb2xvciA9ICggeyBkaXNhYmxlZCwgdHJhY2tDb2xvciB9OiBUcmFja1Byb3BzICkgPT4ge1xuXHRsZXQgYmFja2dyb3VuZCA9IHRyYWNrQ29sb3IgfHwgJ2N1cnJlbnRDb2xvcic7XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLmdyYXlbIDQwMCBdO1xuXHR9XG5cblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUcmFjayA9IHN0eWxlZC5zcGFuYFxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG5cdGJvcmRlci1yYWRpdXM6ICR7IHJhaWxIZWlnaHQgfXB4O1xuXHRoZWlnaHQ6ICR7IHJhaWxIZWlnaHQgfXB4O1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0ZGlzcGxheTogYmxvY2s7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XG5cdHRvcDogMDtcblxuXHQkeyB0cmFja0JhY2tncm91bmRDb2xvciB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1hcmtzV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBibG9jaztcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0d2lkdGg6IDEwMCU7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuYDtcblxuY29uc3QgbWFya0ZpbGwgPSAoIHsgZGlzYWJsZWQsIGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xuXHRsZXQgYmFja2dyb3VuZENvbG9yID0gaXNGaWxsZWQgPyAnY3VycmVudENvbG9yJyA6IENPTE9SUy5ncmF5WyAzMDAgXTtcblxuXHRpZiAoIGRpc2FibGVkICkge1xuXHRcdGJhY2tncm91bmRDb2xvciA9IENPTE9SUy5ncmF5WyA0MDAgXTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRiYWNrZ3JvdW5kQ29sb3IsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBNYXJrID0gc3R5bGVkLnNwYW5gXG5cdGhlaWdodDogJHsgdGh1bWJTaXplIH1weDtcblx0bGVmdDogMDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0b3A6IC00cHg7XG5cdHdpZHRoOiAxcHg7XG5cblx0JHsgbWFya0ZpbGwgfTtcbmA7XG5cbmNvbnN0IG1hcmtMYWJlbEZpbGwgPSAoIHsgaXNGaWxsZWQgfTogUmFuZ2VNYXJrUHJvcHMgKSA9PiB7XG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogaXNGaWxsZWQgPyBDT0xPUlMuZ3JheVsgNzAwIF0gOiBDT0xPUlMuZ3JheVsgMzAwIF0sXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBNYXJrTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xuXHRsZWZ0OiAwO1xuXHRmb250LXNpemU6IDExcHg7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dG9wOiAxMnB4O1xuXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoIC01MCUgKTtcblx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuXHQkeyBtYXJrTGFiZWxGaWxsIH07XG5gO1xuXG5jb25zdCB0aHVtYkNvbG9yID0gKCB7IGRpc2FibGVkIH06IFRodW1iUHJvcHMgKSA9PlxuXHRkaXNhYmxlZFxuXHRcdD8gY3NzYFxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNDAwIF0gfTtcblx0XHQgIGBcblx0XHQ6IGNzc2Bcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0ICBgO1xuXG5leHBvcnQgY29uc3QgVGh1bWJXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGhlaWdodDogJHsgdGh1bWJTaXplIH1weDtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHRodW1iU2l6ZSApIC8gMiB9cHg7XG5cdG91dGxpbmU6IDA7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHRvcDogMDtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdHdpZHRoOiAkeyB0aHVtYlNpemUgfXB4O1xuXHRib3JkZXItcmFkaXVzOiA1MCU7XG5cblx0JHsgdGh1bWJDb2xvciB9O1xuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogLTEwIH0gKSB9O1xuXHQkeyBydGwoXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCA0LjVweCApJyB9LFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggLTQuNXB4ICknIH1cblx0KSB9O1xuYDtcblxuY29uc3QgdGh1bWJGb2N1cyA9ICggeyBpc0ZvY3VzZWQgfTogVGh1bWJQcm9wcyApID0+IHtcblx0cmV0dXJuIGlzRm9jdXNlZFxuXHRcdD8gY3NzYFxuXHRcdFx0XHQmOjpiZWZvcmUge1xuXHRcdFx0XHRcdGNvbnRlbnQ6ICcgJztcblx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRcdFx0b3BhY2l0eTogMC40O1xuXHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdFx0XHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xuXHRcdFx0XHRcdHdpZHRoOiAkeyB0aHVtYlNpemUgKyA4IH1weDtcblx0XHRcdFx0XHR0b3A6IC00cHg7XG5cdFx0XHRcdFx0bGVmdDogLTRweDtcblx0XHRcdFx0fVxuXHRcdCAgYFxuXHRcdDogJyc7XG59O1xuXG5leHBvcnQgY29uc3QgVGh1bWIgPSBzdHlsZWQuc3BhbjwgVGh1bWJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdGhlaWdodDogMTAwJTtcblx0b3V0bGluZTogMDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR1c2VyLXNlbGVjdDogbm9uZTtcblx0d2lkdGg6IDEwMCU7XG5cblx0JHsgdGh1bWJDb2xvciB9O1xuXHQkeyB0aHVtYkZvY3VzIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSW5wdXRSYW5nZSA9IHN0eWxlZC5pbnB1dGBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHRkaXNwbGF5OiBibG9jaztcblx0aGVpZ2h0OiAxMDAlO1xuXHRsZWZ0OiAwO1xuXHRtYXJnaW46IDAgLSR7IHRodW1iU2l6ZSAvIDIgfXB4O1xuXHRvcGFjaXR5OiAwO1xuXHRvdXRsaW5lOiBub25lO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHJpZ2h0OiAwO1xuXHR0b3A6IDA7XG5cdHdpZHRoOiBjYWxjKCAxMDAlICsgJHsgdGh1bWJTaXplIH1weCApO1xuYDtcblxuY29uc3QgdG9vbHRpcFNob3cgPSAoIHsgc2hvdyB9OiBUb29sdGlwUHJvcHMgKSA9PiB7XG5cdHJldHVybiBjc3MoIHtcblx0XHRvcGFjaXR5OiBzaG93ID8gMSA6IDAsXG5cdH0gKTtcbn07XG5cbmNvbnN0IHRvb2x0aXBQb3NpdGlvbiA9ICggeyBwb3NpdGlvbiB9OiBUb29sdGlwUHJvcHMgKSA9PiB7XG5cdGNvbnN0IGlzQm90dG9tID0gcG9zaXRpb24gPT09ICdib3R0b20nO1xuXG5cdGlmICggaXNCb3R0b20gKSB7XG5cdFx0cmV0dXJuIGNzc2Bcblx0XHRcdGJvdHRvbTogLTgwJTtcblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHR0b3A6IC04MCU7XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5zcGFuPCBUb29sdGlwUHJvcHMgPmBcblx0YmFja2dyb3VuZDogcmdiYSggMCwgMCwgMCwgMC44ICk7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0Y29sb3I6IHdoaXRlO1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdGZvbnQtc2l6ZTogMTJweDtcblx0bWluLXdpZHRoOiAzMnB4O1xuXHRvcGFjaXR5OiAwO1xuXHRwYWRkaW5nOiA0cHggOHB4O1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdHRyYW5zaXRpb246IG9wYWNpdHkgMTIwbXMgZWFzZTtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdGxpbmUtaGVpZ2h0OiAxLjQ7XG5cblx0JHsgdG9vbHRpcFNob3cgfTtcblx0JHsgdG9vbHRpcFBvc2l0aW9uIH07XG5cdCR7IHJlZHVjZU1vdGlvbiggJ3RyYW5zaXRpb24nICkgfTtcblx0JHsgcnRsKFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScgfSxcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNTAlKScgfVxuXHQpIH1cbmA7XG5cbi8vIEB0b2RvOiBSZWZhY3RvciBSYW5nZUNvbnRyb2wgd2l0aCBsYXRlc3QgSFN0YWNrIGNvbmZpZ3VyYXRpb25cbi8vIEB3b3JkcHJlc3MvY29tcG9uZW50cy91aS9oc3RhY2suXG5leHBvcnQgY29uc3QgSW5wdXROdW1iZXIgPSBzdHlsZWQoIE51bWJlckNvbnRyb2wgKWBcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDEzcHg7XG5cdG1hcmdpbi10b3A6IDA7XG5cblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10mIHtcblx0XHQkeyByYW5nZUhlaWdodCB9O1xuXHR9XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IGAkeyBzcGFjZSggNCApIH0gIWltcG9ydGFudGAgfSApIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25SaWdodFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdG1hcmdpbi10b3A6IDA7XG5cblx0YnV0dG9uLFxuXHRidXR0b24uaXMtc21hbGwge1xuXHRcdG1hcmdpbi1sZWZ0OiAwO1xuXHRcdCR7IHJhbmdlSGVpZ2h0IH07XG5cdH1cblxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogOCB9ICkgfVxuYDtcbiJdfQ== */");

const thumbSize = 12;

const deprecatedHeight = ({
  __next40pxDefaultSize
}) => !__next40pxDefaultSize && /*#__PURE__*/(0, _react.css)({
  minHeight: rangeHeightValue
}, process.env.NODE_ENV === "production" ? "" : ";label:deprecatedHeight;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

const Root = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk14"
} : {
  target: "e1epgpqk14",
  label: "Root"
})("-webkit-tap-highlight-color:transparent;align-items:center;display:flex;justify-content:flex-start;padding:0;position:relative;touch-action:none;width:100%;min-height:40px;", deprecatedHeight, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Root = Root;

const wrapperColor = ({
  color = _utils.COLORS.ui.borderFocus
}) => /*#__PURE__*/(0, _react.css)({
  color
}, process.env.NODE_ENV === "production" ? "" : ";label:wrapperColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

const wrapperMargin = ({
  marks,
  __nextHasNoMarginBottom
}) => {
  if (!__nextHasNoMarginBottom) {
    return /*#__PURE__*/(0, _react.css)({
      marginBottom: marks ? 16 : undefined
    }, process.env.NODE_ENV === "production" ? "" : ";label:wrapperMargin;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
  }

  return '';
};

const Wrapper = (0, _base.default)("div", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk13"
} : {
  target: "e1epgpqk13",
  label: "Wrapper"
})("display:block;flex:1;position:relative;width:100%;", wrapperColor, ";", rangeHeight, ";", wrapperMargin, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMkRpRCIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3JhbmdlLWNvbnRyb2wvc3R5bGVzL3JhbmdlLWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBDT0xPUlMsIHJlZHVjZU1vdGlvbiwgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbmltcG9ydCB0eXBlIHtcblx0UmFuZ2VNYXJrUHJvcHMsXG5cdFJhaWxQcm9wcyxcblx0VGh1bWJQcm9wcyxcblx0VG9vbHRpcFByb3BzLFxuXHRUcmFja1Byb3BzLFxuXHRXcmFwcGVyUHJvcHMsXG5cdFJhbmdlQ29udHJvbFByb3BzLFxufSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IHJhbmdlSGVpZ2h0VmFsdWUgPSAzMDtcbmNvbnN0IHJhaWxIZWlnaHQgPSA0O1xuY29uc3QgcmFuZ2VIZWlnaHQgPSAoKSA9PlxuXHRjc3MoIHsgaGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlLCBtaW5IZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUgfSApO1xuY29uc3QgdGh1bWJTaXplID0gMTI7XG5cbmNvbnN0IGRlcHJlY2F0ZWRIZWlnaHQgPSAoIHtcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxufTogUGljazwgUmFuZ2VDb250cm9sUHJvcHMsICdfX25leHQ0MHB4RGVmYXVsdFNpemUnID4gKSA9PlxuXHQhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSAmJiBjc3MoIHsgbWluSGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlIH0gKTtcblxudHlwZSBSb290UHJvcHMgPSBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPjtcbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkLmRpdjwgUm9vdFByb3BzID5gXG5cdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcblx0cGFkZGluZzogMDtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR0b3VjaC1hY3Rpb246IG5vbmU7XG5cdHdpZHRoOiAxMDAlO1xuXHRtaW4taGVpZ2h0OiA0MHB4O1xuXHQvKiBUT0RPOiByZW1vdmUgYWZ0ZXIgcmVtb3ZpbmcgdGhlIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSBwcm9wICovXG5cdCR7IGRlcHJlY2F0ZWRIZWlnaHQgfTtcbmA7XG5cbmNvbnN0IHdyYXBwZXJDb2xvciA9ICggeyBjb2xvciA9IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9OiBXcmFwcGVyUHJvcHMgKSA9PlxuXHRjc3MoIHsgY29sb3IgfSApO1xuXG5jb25zdCB3cmFwcGVyTWFyZ2luID0gKCB7IG1hcmtzLCBfX25leHRIYXNOb01hcmdpbkJvdHRvbSB9OiBXcmFwcGVyUHJvcHMgKSA9PiB7XG5cdGlmICggISBfX25leHRIYXNOb01hcmdpbkJvdHRvbSApIHtcblx0XHRyZXR1cm4gY3NzKCB7IG1hcmdpbkJvdHRvbTogbWFya3MgPyAxNiA6IHVuZGVmaW5lZCB9ICk7XG5cdH1cblx0cmV0dXJuICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2PCBXcmFwcGVyUHJvcHMgPmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdGZsZXg6IDE7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0d2lkdGg6IDEwMCU7XG5cblx0JHsgd3JhcHBlckNvbG9yIH07XG5cdCR7IHJhbmdlSGVpZ2h0IH07XG5cdCR7IHdyYXBwZXJNYXJnaW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBCZWZvcmVJY29uV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcnRsKCB7IG1hcmdpblJpZ2h0OiA2IH0gKSB9XG5gO1xuXG5leHBvcnQgY29uc3QgQWZ0ZXJJY29uV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDYgfSApIH1cbmA7XG5cbmNvbnN0IHJhaWxCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHJhaWxDb2xvciB9OiBSYWlsUHJvcHMgKSA9PiB7XG5cdGxldCBiYWNrZ3JvdW5kID0gcmFpbENvbG9yIHx8ICcnO1xuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy51aS5iYWNrZ3JvdW5kRGlzYWJsZWQ7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmQgfSApO1xufTtcblxuZXhwb3J0IGNvbnN0IFJhaWwgPSBzdHlsZWQuc3BhbmBcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDMwMCBdIH07XG5cdGxlZnQ6IDA7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRyaWdodDogMDtcblx0ZGlzcGxheTogYmxvY2s7XG5cdGhlaWdodDogJHsgcmFpbEhlaWdodCB9cHg7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XG5cdHRvcDogMDtcblx0Ym9yZGVyLXJhZGl1czogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcmFpbEJhY2tncm91bmRDb2xvciB9O1xuYDtcblxuY29uc3QgdHJhY2tCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHRyYWNrQ29sb3IgfTogVHJhY2tQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmQgPSB0cmFja0NvbG9yIHx8ICdjdXJyZW50Q29sb3InO1xuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy5ncmF5WyA0MDAgXTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgVHJhY2sgPSBzdHlsZWQuc3BhbmBcblx0YmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuXHRib3JkZXItcmFkaXVzOiAkeyByYWlsSGVpZ2h0IH1weDtcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHJhaWxIZWlnaHQgKSAvIDIgfXB4O1xuXHR0b3A6IDA7XG5cblx0JHsgdHJhY2tCYWNrZ3JvdW5kQ29sb3IgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBNYXJrc1dyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHdpZHRoOiAxMDAlO1xuXHR1c2VyLXNlbGVjdDogbm9uZTtcbmA7XG5cbmNvbnN0IG1hcmtGaWxsID0gKCB7IGRpc2FibGVkLCBpc0ZpbGxlZCB9OiBSYW5nZU1hcmtQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmRDb2xvciA9IGlzRmlsbGVkID8gJ2N1cnJlbnRDb2xvcicgOiBDT0xPUlMuZ3JheVsgMzAwIF07XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBDT0xPUlMuZ3JheVsgNDAwIF07XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0YmFja2dyb3VuZENvbG9yLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgTWFyayA9IHN0eWxlZC5zcGFuYFxuXHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSB9cHg7XG5cdGxlZnQ6IDA7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dG9wOiAtNHB4O1xuXHR3aWR0aDogMXB4O1xuXG5cdCR7IG1hcmtGaWxsIH07XG5gO1xuXG5jb25zdCBtYXJrTGFiZWxGaWxsID0gKCB7IGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IGlzRmlsbGVkID8gQ09MT1JTLmdyYXlbIDcwMCBdIDogQ09MT1JTLmdyYXlbIDMwMCBdLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgTWFya0xhYmVsID0gc3R5bGVkLnNwYW5gXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMzAwIF0gfTtcblx0bGVmdDogMDtcblx0Zm9udC1zaXplOiAxMXB4O1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHRvcDogMTJweDtcblx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKCAtNTAlICk7XG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cblx0JHsgbWFya0xhYmVsRmlsbCB9O1xuYDtcblxuY29uc3QgdGh1bWJDb2xvciA9ICggeyBkaXNhYmxlZCB9OiBUaHVtYlByb3BzICkgPT5cblx0ZGlzYWJsZWRcblx0XHQ/IGNzc2Bcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDQwMCBdIH07XG5cdFx0ICBgXG5cdFx0OiBjc3NgXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy51aS50aGVtZSB9O1xuXHRcdCAgYDtcblxuZXhwb3J0IGNvbnN0IFRodW1iV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSB9cHg7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSB0aHVtYlNpemUgKSAvIDIgfXB4O1xuXHRvdXRsaW5lOiAwO1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0b3A6IDA7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuXHR3aWR0aDogJHsgdGh1bWJTaXplIH1weDtcblx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXG5cdCR7IHRodW1iQ29sb3IgfTtcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IC0xMCB9ICkgfTtcblx0JHsgcnRsKFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggNC41cHggKScgfSxcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIC00LjVweCApJyB9XG5cdCkgfTtcbmA7XG5cbmNvbnN0IHRodW1iRm9jdXMgPSAoIHsgaXNGb2N1c2VkIH06IFRodW1iUHJvcHMgKSA9PiB7XG5cdHJldHVybiBpc0ZvY3VzZWRcblx0XHQ/IGNzc2Bcblx0XHRcdFx0Jjo6YmVmb3JlIHtcblx0XHRcdFx0XHRjb250ZW50OiAnICc7XG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy51aS50aGVtZSB9O1xuXHRcdFx0XHRcdG9wYWNpdHk6IDAuNDtcblx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdFx0XHRcdFx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgKyA4IH1weDtcblx0XHRcdFx0XHR3aWR0aDogJHsgdGh1bWJTaXplICsgOCB9cHg7XG5cdFx0XHRcdFx0dG9wOiAtNHB4O1xuXHRcdFx0XHRcdGxlZnQ6IC00cHg7XG5cdFx0XHRcdH1cblx0XHQgIGBcblx0XHQ6ICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IFRodW1iID0gc3R5bGVkLnNwYW48IFRodW1iUHJvcHMgPmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXHRoZWlnaHQ6IDEwMCU7XG5cdG91dGxpbmU6IDA7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdHdpZHRoOiAxMDAlO1xuXG5cdCR7IHRodW1iQ29sb3IgfTtcblx0JHsgdGh1bWJGb2N1cyB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0UmFuZ2UgPSBzdHlsZWQuaW5wdXRgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGN1cnNvcjogcG9pbnRlcjtcblx0ZGlzcGxheTogYmxvY2s7XG5cdGhlaWdodDogMTAwJTtcblx0bGVmdDogMDtcblx0bWFyZ2luOiAwIC0keyB0aHVtYlNpemUgLyAyIH1weDtcblx0b3BhY2l0eTogMDtcblx0b3V0bGluZTogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRyaWdodDogMDtcblx0dG9wOiAwO1xuXHR3aWR0aDogY2FsYyggMTAwJSArICR7IHRodW1iU2l6ZSB9cHggKTtcbmA7XG5cbmNvbnN0IHRvb2x0aXBTaG93ID0gKCB7IHNob3cgfTogVG9vbHRpcFByb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCB7XG5cdFx0b3BhY2l0eTogc2hvdyA/IDEgOiAwLFxuXHR9ICk7XG59O1xuXG5jb25zdCB0b29sdGlwUG9zaXRpb24gPSAoIHsgcG9zaXRpb24gfTogVG9vbHRpcFByb3BzICkgPT4ge1xuXHRjb25zdCBpc0JvdHRvbSA9IHBvc2l0aW9uID09PSAnYm90dG9tJztcblxuXHRpZiAoIGlzQm90dG9tICkge1xuXHRcdHJldHVybiBjc3NgXG5cdFx0XHRib3R0b206IC04MCU7XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0dG9wOiAtODAlO1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IFRvb2x0aXAgPSBzdHlsZWQuc3BhbjwgVG9vbHRpcFByb3BzID5gXG5cdGJhY2tncm91bmQ6IHJnYmEoIDAsIDAsIDAsIDAuOCApO1xuXHRib3JkZXItcmFkaXVzOiAycHg7XG5cdGNvbG9yOiB3aGl0ZTtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDEycHg7XG5cdG1pbi13aWR0aDogMzJweDtcblx0b3BhY2l0eTogMDtcblx0cGFkZGluZzogNHB4IDhweDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHR0cmFuc2l0aW9uOiBvcGFjaXR5IDEyMG1zIGVhc2U7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuXHRsaW5lLWhlaWdodDogMS40O1xuXG5cdCR7IHRvb2x0aXBTaG93IH07XG5cdCR7IHRvb2x0aXBQb3NpdGlvbiB9O1xuXHQkeyByZWR1Y2VNb3Rpb24oICd0cmFuc2l0aW9uJyApIH07XG5cdCR7IHJ0bChcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknIH0sXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknIH1cblx0KSB9XG5gO1xuXG4vLyBAdG9kbzogUmVmYWN0b3IgUmFuZ2VDb250cm9sIHdpdGggbGF0ZXN0IEhTdGFjayBjb25maWd1cmF0aW9uXG4vLyBAd29yZHByZXNzL2NvbXBvbmVudHMvdWkvaHN0YWNrLlxuZXhwb3J0IGNvbnN0IElucHV0TnVtYmVyID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0Zm9udC1zaXplOiAxM3B4O1xuXHRtYXJnaW4tdG9wOiAwO1xuXG5cdGlucHV0W3R5cGU9J251bWJlciddJiB7XG5cdFx0JHsgcmFuZ2VIZWlnaHQgfTtcblx0fVxuXG5cdCR7IHJ0bCggeyBtYXJnaW5MZWZ0OiBgJHsgc3BhY2UoIDQgKSB9ICFpbXBvcnRhbnRgIH0gKSB9XG5gO1xuXG5leHBvcnQgY29uc3QgQWN0aW9uUmlnaHRXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRtYXJnaW4tdG9wOiAwO1xuXG5cdGJ1dHRvbixcblx0YnV0dG9uLmlzLXNtYWxsIHtcblx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHQkeyByYW5nZUhlaWdodCB9O1xuXHR9XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDggfSApIH1cbmA7XG4iXX0= */"));
exports.Wrapper = Wrapper;
const BeforeIconWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk12"
} : {
  target: "e1epgpqk12",
  label: "BeforeIconWrapper"
})("display:flex;margin-top:", railHeight, "px;", (0, _utils.rtl)({
  marginRight: 6
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.BeforeIconWrapper = BeforeIconWrapper;
const AfterIconWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk11"
} : {
  target: "e1epgpqk11",
  label: "AfterIconWrapper"
})("display:flex;margin-top:", railHeight, "px;", (0, _utils.rtl)({
  marginLeft: 6
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.AfterIconWrapper = AfterIconWrapper;

const railBackgroundColor = ({
  disabled,
  railColor
}) => {
  let background = railColor || '';

  if (disabled) {
    background = _utils.COLORS.ui.backgroundDisabled;
  }

  return /*#__PURE__*/(0, _react.css)({
    background
  }, process.env.NODE_ENV === "production" ? "" : ";label:railBackgroundColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const Rail = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk10"
} : {
  target: "e1epgpqk10",
  label: "Rail"
})("background-color:", _utils.COLORS.gray[300], ";left:0;pointer-events:none;right:0;display:block;height:", railHeight, "px;position:absolute;margin-top:", (rangeHeightValue - railHeight) / 2, "px;top:0;border-radius:", railHeight, "px;", railBackgroundColor, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Rail = Rail;

const trackBackgroundColor = ({
  disabled,
  trackColor
}) => {
  let background = trackColor || 'currentColor';

  if (disabled) {
    background = _utils.COLORS.gray[400];
  }

  return /*#__PURE__*/(0, _react.css)({
    background
  }, process.env.NODE_ENV === "production" ? "" : ";label:trackBackgroundColor;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const Track = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk9"
} : {
  target: "e1epgpqk9",
  label: "Track"
})("background-color:currentColor;border-radius:", railHeight, "px;height:", railHeight, "px;pointer-events:none;display:block;position:absolute;margin-top:", (rangeHeightValue - railHeight) / 2, "px;top:0;", trackBackgroundColor, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Track = Track;
const MarksWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk8"
} : {
  target: "e1epgpqk8",
  label: "MarksWrapper"
})(process.env.NODE_ENV === "production" ? {
  name: "l7tjj5",
  styles: "display:block;pointer-events:none;position:relative;width:100%;user-select:none"
} : {
  name: "l7tjj5",
  styles: "display:block;pointer-events:none;position:relative;width:100%;user-select:none",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0l1QyIsImZpbGUiOiJAd29yZHByZXNzL2NvbXBvbmVudHMvc3JjL3JhbmdlLWNvbnRyb2wvc3R5bGVzL3JhbmdlLWNvbnRyb2wtc3R5bGVzLnRzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeHRlcm5hbCBkZXBlbmRlbmNpZXNcbiAqL1xuaW1wb3J0IHsgY3NzIH0gZnJvbSAnQGVtb3Rpb24vcmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuXG4vKipcbiAqIEludGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgTnVtYmVyQ29udHJvbCBmcm9tICcuLi8uLi9udW1iZXItY29udHJvbCc7XG5pbXBvcnQgeyBDT0xPUlMsIHJlZHVjZU1vdGlvbiwgcnRsIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgc3BhY2UgfSBmcm9tICcuLi8uLi91aS91dGlscy9zcGFjZSc7XG5cbmltcG9ydCB0eXBlIHtcblx0UmFuZ2VNYXJrUHJvcHMsXG5cdFJhaWxQcm9wcyxcblx0VGh1bWJQcm9wcyxcblx0VG9vbHRpcFByb3BzLFxuXHRUcmFja1Byb3BzLFxuXHRXcmFwcGVyUHJvcHMsXG5cdFJhbmdlQ29udHJvbFByb3BzLFxufSBmcm9tICcuLi90eXBlcyc7XG5cbmNvbnN0IHJhbmdlSGVpZ2h0VmFsdWUgPSAzMDtcbmNvbnN0IHJhaWxIZWlnaHQgPSA0O1xuY29uc3QgcmFuZ2VIZWlnaHQgPSAoKSA9PlxuXHRjc3MoIHsgaGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlLCBtaW5IZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUgfSApO1xuY29uc3QgdGh1bWJTaXplID0gMTI7XG5cbmNvbnN0IGRlcHJlY2F0ZWRIZWlnaHQgPSAoIHtcblx0X19uZXh0NDBweERlZmF1bHRTaXplLFxufTogUGljazwgUmFuZ2VDb250cm9sUHJvcHMsICdfX25leHQ0MHB4RGVmYXVsdFNpemUnID4gKSA9PlxuXHQhIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSAmJiBjc3MoIHsgbWluSGVpZ2h0OiByYW5nZUhlaWdodFZhbHVlIH0gKTtcblxudHlwZSBSb290UHJvcHMgPSBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPjtcbmV4cG9ydCBjb25zdCBSb290ID0gc3R5bGVkLmRpdjwgUm9vdFByb3BzID5gXG5cdC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcblx0cGFkZGluZzogMDtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR0b3VjaC1hY3Rpb246IG5vbmU7XG5cdHdpZHRoOiAxMDAlO1xuXHRtaW4taGVpZ2h0OiA0MHB4O1xuXHQvKiBUT0RPOiByZW1vdmUgYWZ0ZXIgcmVtb3ZpbmcgdGhlIF9fbmV4dDQwcHhEZWZhdWx0U2l6ZSBwcm9wICovXG5cdCR7IGRlcHJlY2F0ZWRIZWlnaHQgfTtcbmA7XG5cbmNvbnN0IHdyYXBwZXJDb2xvciA9ICggeyBjb2xvciA9IENPTE9SUy51aS5ib3JkZXJGb2N1cyB9OiBXcmFwcGVyUHJvcHMgKSA9PlxuXHRjc3MoIHsgY29sb3IgfSApO1xuXG5jb25zdCB3cmFwcGVyTWFyZ2luID0gKCB7IG1hcmtzLCBfX25leHRIYXNOb01hcmdpbkJvdHRvbSB9OiBXcmFwcGVyUHJvcHMgKSA9PiB7XG5cdGlmICggISBfX25leHRIYXNOb01hcmdpbkJvdHRvbSApIHtcblx0XHRyZXR1cm4gY3NzKCB7IG1hcmdpbkJvdHRvbTogbWFya3MgPyAxNiA6IHVuZGVmaW5lZCB9ICk7XG5cdH1cblx0cmV0dXJuICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IFdyYXBwZXIgPSBzdHlsZWQuZGl2PCBXcmFwcGVyUHJvcHMgPmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdGZsZXg6IDE7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0d2lkdGg6IDEwMCU7XG5cblx0JHsgd3JhcHBlckNvbG9yIH07XG5cdCR7IHJhbmdlSGVpZ2h0IH07XG5cdCR7IHdyYXBwZXJNYXJnaW4gfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBCZWZvcmVJY29uV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcnRsKCB7IG1hcmdpblJpZ2h0OiA2IH0gKSB9XG5gO1xuXG5leHBvcnQgY29uc3QgQWZ0ZXJJY29uV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBmbGV4OyAvLyBlbnN1cmVzIHRoZSBoZWlnaHQgaXNuJ3QgYWZmZWN0ZWQgYnkgbGluZS1oZWlnaHRcblx0bWFyZ2luLXRvcDogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDYgfSApIH1cbmA7XG5cbmNvbnN0IHJhaWxCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHJhaWxDb2xvciB9OiBSYWlsUHJvcHMgKSA9PiB7XG5cdGxldCBiYWNrZ3JvdW5kID0gcmFpbENvbG9yIHx8ICcnO1xuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy51aS5iYWNrZ3JvdW5kRGlzYWJsZWQ7XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7IGJhY2tncm91bmQgfSApO1xufTtcblxuZXhwb3J0IGNvbnN0IFJhaWwgPSBzdHlsZWQuc3BhbmBcblx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDMwMCBdIH07XG5cdGxlZnQ6IDA7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRyaWdodDogMDtcblx0ZGlzcGxheTogYmxvY2s7XG5cdGhlaWdodDogJHsgcmFpbEhlaWdodCB9cHg7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XG5cdHRvcDogMDtcblx0Ym9yZGVyLXJhZGl1czogJHsgcmFpbEhlaWdodCB9cHg7XG5cblx0JHsgcmFpbEJhY2tncm91bmRDb2xvciB9O1xuYDtcblxuY29uc3QgdHJhY2tCYWNrZ3JvdW5kQ29sb3IgPSAoIHsgZGlzYWJsZWQsIHRyYWNrQ29sb3IgfTogVHJhY2tQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmQgPSB0cmFja0NvbG9yIHx8ICdjdXJyZW50Q29sb3InO1xuXG5cdGlmICggZGlzYWJsZWQgKSB7XG5cdFx0YmFja2dyb3VuZCA9IENPTE9SUy5ncmF5WyA0MDAgXTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgVHJhY2sgPSBzdHlsZWQuc3BhbmBcblx0YmFja2dyb3VuZC1jb2xvcjogY3VycmVudENvbG9yO1xuXHRib3JkZXItcmFkaXVzOiAkeyByYWlsSGVpZ2h0IH1weDtcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHJhaWxIZWlnaHQgKSAvIDIgfXB4O1xuXHR0b3A6IDA7XG5cblx0JHsgdHJhY2tCYWNrZ3JvdW5kQ29sb3IgfTtcbmA7XG5cbmV4cG9ydCBjb25zdCBNYXJrc1dyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHdpZHRoOiAxMDAlO1xuXHR1c2VyLXNlbGVjdDogbm9uZTtcbmA7XG5cbmNvbnN0IG1hcmtGaWxsID0gKCB7IGRpc2FibGVkLCBpc0ZpbGxlZCB9OiBSYW5nZU1hcmtQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmRDb2xvciA9IGlzRmlsbGVkID8gJ2N1cnJlbnRDb2xvcicgOiBDT0xPUlMuZ3JheVsgMzAwIF07XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBDT0xPUlMuZ3JheVsgNDAwIF07XG5cdH1cblxuXHRyZXR1cm4gY3NzKCB7XG5cdFx0YmFja2dyb3VuZENvbG9yLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgTWFyayA9IHN0eWxlZC5zcGFuYFxuXHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSB9cHg7XG5cdGxlZnQ6IDA7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dG9wOiAtNHB4O1xuXHR3aWR0aDogMXB4O1xuXG5cdCR7IG1hcmtGaWxsIH07XG5gO1xuXG5jb25zdCBtYXJrTGFiZWxGaWxsID0gKCB7IGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCB7XG5cdFx0Y29sb3I6IGlzRmlsbGVkID8gQ09MT1JTLmdyYXlbIDcwMCBdIDogQ09MT1JTLmdyYXlbIDMwMCBdLFxuXHR9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgTWFya0xhYmVsID0gc3R5bGVkLnNwYW5gXG5cdGNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMzAwIF0gfTtcblx0bGVmdDogMDtcblx0Zm9udC1zaXplOiAxMXB4O1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHRvcDogMTJweDtcblx0dHJhbnNmb3JtOiB0cmFuc2xhdGVYKCAtNTAlICk7XG5cdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cblx0JHsgbWFya0xhYmVsRmlsbCB9O1xuYDtcblxuY29uc3QgdGh1bWJDb2xvciA9ICggeyBkaXNhYmxlZCB9OiBUaHVtYlByb3BzICkgPT5cblx0ZGlzYWJsZWRcblx0XHQ/IGNzc2Bcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLmdyYXlbIDQwMCBdIH07XG5cdFx0ICBgXG5cdFx0OiBjc3NgXG5cdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy51aS50aGVtZSB9O1xuXHRcdCAgYDtcblxuZXhwb3J0IGNvbnN0IFRodW1iV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRkaXNwbGF5OiBmbGV4O1xuXHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSB9cHg7XG5cdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSB0aHVtYlNpemUgKSAvIDIgfXB4O1xuXHRvdXRsaW5lOiAwO1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0b3A6IDA7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuXHR3aWR0aDogJHsgdGh1bWJTaXplIH1weDtcblx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXG5cdCR7IHRodW1iQ29sb3IgfTtcblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IC0xMCB9ICkgfTtcblx0JHsgcnRsKFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggNC41cHggKScgfSxcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoIC00LjVweCApJyB9XG5cdCkgfTtcbmA7XG5cbmNvbnN0IHRodW1iRm9jdXMgPSAoIHsgaXNGb2N1c2VkIH06IFRodW1iUHJvcHMgKSA9PiB7XG5cdHJldHVybiBpc0ZvY3VzZWRcblx0XHQ/IGNzc2Bcblx0XHRcdFx0Jjo6YmVmb3JlIHtcblx0XHRcdFx0XHRjb250ZW50OiAnICc7XG5cdFx0XHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0XHRcdGJhY2tncm91bmQtY29sb3I6ICR7IENPTE9SUy51aS50aGVtZSB9O1xuXHRcdFx0XHRcdG9wYWNpdHk6IDAuNDtcblx0XHRcdFx0XHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdFx0XHRcdFx0aGVpZ2h0OiAkeyB0aHVtYlNpemUgKyA4IH1weDtcblx0XHRcdFx0XHR3aWR0aDogJHsgdGh1bWJTaXplICsgOCB9cHg7XG5cdFx0XHRcdFx0dG9wOiAtNHB4O1xuXHRcdFx0XHRcdGxlZnQ6IC00cHg7XG5cdFx0XHRcdH1cblx0XHQgIGBcblx0XHQ6ICcnO1xufTtcblxuZXhwb3J0IGNvbnN0IFRodW1iID0gc3R5bGVkLnNwYW48IFRodW1iUHJvcHMgPmBcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXHRoZWlnaHQ6IDEwMCU7XG5cdG91dGxpbmU6IDA7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdHdpZHRoOiAxMDAlO1xuXG5cdCR7IHRodW1iQ29sb3IgfTtcblx0JHsgdGh1bWJGb2N1cyB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IElucHV0UmFuZ2UgPSBzdHlsZWQuaW5wdXRgXG5cdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdGN1cnNvcjogcG9pbnRlcjtcblx0ZGlzcGxheTogYmxvY2s7XG5cdGhlaWdodDogMTAwJTtcblx0bGVmdDogMDtcblx0bWFyZ2luOiAwIC0keyB0aHVtYlNpemUgLyAyIH1weDtcblx0b3BhY2l0eTogMDtcblx0b3V0bGluZTogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRyaWdodDogMDtcblx0dG9wOiAwO1xuXHR3aWR0aDogY2FsYyggMTAwJSArICR7IHRodW1iU2l6ZSB9cHggKTtcbmA7XG5cbmNvbnN0IHRvb2x0aXBTaG93ID0gKCB7IHNob3cgfTogVG9vbHRpcFByb3BzICkgPT4ge1xuXHRyZXR1cm4gY3NzKCB7XG5cdFx0b3BhY2l0eTogc2hvdyA/IDEgOiAwLFxuXHR9ICk7XG59O1xuXG5jb25zdCB0b29sdGlwUG9zaXRpb24gPSAoIHsgcG9zaXRpb24gfTogVG9vbHRpcFByb3BzICkgPT4ge1xuXHRjb25zdCBpc0JvdHRvbSA9IHBvc2l0aW9uID09PSAnYm90dG9tJztcblxuXHRpZiAoIGlzQm90dG9tICkge1xuXHRcdHJldHVybiBjc3NgXG5cdFx0XHRib3R0b206IC04MCU7XG5cdFx0YDtcblx0fVxuXG5cdHJldHVybiBjc3NgXG5cdFx0dG9wOiAtODAlO1xuXHRgO1xufTtcblxuZXhwb3J0IGNvbnN0IFRvb2x0aXAgPSBzdHlsZWQuc3BhbjwgVG9vbHRpcFByb3BzID5gXG5cdGJhY2tncm91bmQ6IHJnYmEoIDAsIDAsIDAsIDAuOCApO1xuXHRib3JkZXItcmFkaXVzOiAycHg7XG5cdGNvbG9yOiB3aGl0ZTtcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDEycHg7XG5cdG1pbi13aWR0aDogMzJweDtcblx0b3BhY2l0eTogMDtcblx0cGFkZGluZzogNHB4IDhweDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHR0cmFuc2l0aW9uOiBvcGFjaXR5IDEyMG1zIGVhc2U7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuXHRsaW5lLWhlaWdodDogMS40O1xuXG5cdCR7IHRvb2x0aXBTaG93IH07XG5cdCR7IHRvb2x0aXBQb3NpdGlvbiB9O1xuXHQkeyByZWR1Y2VNb3Rpb24oICd0cmFuc2l0aW9uJyApIH07XG5cdCR7IHJ0bChcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoLTUwJSknIH0sXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKDUwJSknIH1cblx0KSB9XG5gO1xuXG4vLyBAdG9kbzogUmVmYWN0b3IgUmFuZ2VDb250cm9sIHdpdGggbGF0ZXN0IEhTdGFjayBjb25maWd1cmF0aW9uXG4vLyBAd29yZHByZXNzL2NvbXBvbmVudHMvdWkvaHN0YWNrLlxuZXhwb3J0IGNvbnN0IElucHV0TnVtYmVyID0gc3R5bGVkKCBOdW1iZXJDb250cm9sIClgXG5cdGRpc3BsYXk6IGlubGluZS1ibG9jaztcblx0Zm9udC1zaXplOiAxM3B4O1xuXHRtYXJnaW4tdG9wOiAwO1xuXG5cdGlucHV0W3R5cGU9J251bWJlciddJiB7XG5cdFx0JHsgcmFuZ2VIZWlnaHQgfTtcblx0fVxuXG5cdCR7IHJ0bCggeyBtYXJnaW5MZWZ0OiBgJHsgc3BhY2UoIDQgKSB9ICFpbXBvcnRhbnRgIH0gKSB9XG5gO1xuXG5leHBvcnQgY29uc3QgQWN0aW9uUmlnaHRXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGJsb2NrO1xuXHRtYXJnaW4tdG9wOiAwO1xuXG5cdGJ1dHRvbixcblx0YnV0dG9uLmlzLXNtYWxsIHtcblx0XHRtYXJnaW4tbGVmdDogMDtcblx0XHQkeyByYW5nZUhlaWdodCB9O1xuXHR9XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IDggfSApIH1cbmA7XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
exports.MarksWrapper = MarksWrapper;

const markFill = ({
  disabled,
  isFilled
}) => {
  let backgroundColor = isFilled ? 'currentColor' : _utils.COLORS.gray[300];

  if (disabled) {
    backgroundColor = _utils.COLORS.gray[400];
  }

  return /*#__PURE__*/(0, _react.css)({
    backgroundColor
  }, process.env.NODE_ENV === "production" ? "" : ";label:markFill;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const Mark = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk7"
} : {
  target: "e1epgpqk7",
  label: "Mark"
})("height:", thumbSize, "px;left:0;position:absolute;top:-4px;width:1px;", markFill, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Mark = Mark;

const markLabelFill = ({
  isFilled
}) => {
  return /*#__PURE__*/(0, _react.css)({
    color: isFilled ? _utils.COLORS.gray[700] : _utils.COLORS.gray[300]
  }, process.env.NODE_ENV === "production" ? "" : ";label:markLabelFill;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

const MarkLabel = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk6"
} : {
  target: "e1epgpqk6",
  label: "MarkLabel"
})("color:", _utils.COLORS.gray[300], ";left:0;font-size:11px;position:absolute;top:12px;transform:translateX( -50% );white-space:nowrap;", markLabelFill, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.MarkLabel = MarkLabel;

const thumbColor = ({
  disabled
}) => disabled ? /*#__PURE__*/(0, _react.css)("background-color:", _utils.COLORS.gray[400], ";" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */") : /*#__PURE__*/(0, _react.css)("background-color:", _utils.COLORS.ui.theme, ";" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbColor;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");

const ThumbWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk5"
} : {
  target: "e1epgpqk5",
  label: "ThumbWrapper"
})("align-items:center;display:flex;height:", thumbSize, "px;justify-content:center;margin-top:", (rangeHeightValue - thumbSize) / 2, "px;outline:0;pointer-events:none;position:absolute;top:0;user-select:none;width:", thumbSize, "px;border-radius:50%;", thumbColor, ";", (0, _utils.rtl)({
  marginLeft: -10
}), ";", (0, _utils.rtl)({
  transform: 'translateX( 4.5px )'
}, {
  transform: 'translateX( -4.5px )'
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ThumbWrapper = ThumbWrapper;

const thumbFocus = ({
  isFocused
}) => {
  return isFocused ? /*#__PURE__*/(0, _react.css)("&::before{content:' ';position:absolute;background-color:", _utils.COLORS.ui.theme, ";opacity:0.4;border-radius:50%;height:", thumbSize + 8, "px;width:", thumbSize + 8, "px;top:-4px;left:-4px;}" + (process.env.NODE_ENV === "production" ? "" : ";label:thumbFocus;"), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcU5PIiwiZmlsZSI6IkB3b3JkcHJlc3MvY29tcG9uZW50cy9zcmMvcmFuZ2UtY29udHJvbC9zdHlsZXMvcmFuZ2UtY29udHJvbC1zdHlsZXMudHMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEV4dGVybmFsIGRlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgeyBjc3MgfSBmcm9tICdAZW1vdGlvbi9yZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5cbi8qKlxuICogSW50ZXJuYWwgZGVwZW5kZW5jaWVzXG4gKi9cbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL251bWJlci1jb250cm9sJztcbmltcG9ydCB7IENPTE9SUywgcmVkdWNlTW90aW9uLCBydGwgfSBmcm9tICcuLi8uLi91dGlscyc7XG5pbXBvcnQgeyBzcGFjZSB9IGZyb20gJy4uLy4uL3VpL3V0aWxzL3NwYWNlJztcblxuaW1wb3J0IHR5cGUge1xuXHRSYW5nZU1hcmtQcm9wcyxcblx0UmFpbFByb3BzLFxuXHRUaHVtYlByb3BzLFxuXHRUb29sdGlwUHJvcHMsXG5cdFRyYWNrUHJvcHMsXG5cdFdyYXBwZXJQcm9wcyxcblx0UmFuZ2VDb250cm9sUHJvcHMsXG59IGZyb20gJy4uL3R5cGVzJztcblxuY29uc3QgcmFuZ2VIZWlnaHRWYWx1ZSA9IDMwO1xuY29uc3QgcmFpbEhlaWdodCA9IDQ7XG5jb25zdCByYW5nZUhlaWdodCA9ICgpID0+XG5cdGNzcyggeyBoZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUsIG1pbkhlaWdodDogcmFuZ2VIZWlnaHRWYWx1ZSB9ICk7XG5jb25zdCB0aHVtYlNpemUgPSAxMjtcblxuY29uc3QgZGVwcmVjYXRlZEhlaWdodCA9ICgge1xuXHRfX25leHQ0MHB4RGVmYXVsdFNpemUsXG59OiBQaWNrPCBSYW5nZUNvbnRyb2xQcm9wcywgJ19fbmV4dDQwcHhEZWZhdWx0U2l6ZScgPiApID0+XG5cdCEgX19uZXh0NDBweERlZmF1bHRTaXplICYmIGNzcyggeyBtaW5IZWlnaHQ6IHJhbmdlSGVpZ2h0VmFsdWUgfSApO1xuXG50eXBlIFJvb3RQcm9wcyA9IFBpY2s8IFJhbmdlQ29udHJvbFByb3BzLCAnX19uZXh0NDBweERlZmF1bHRTaXplJyA+O1xuZXhwb3J0IGNvbnN0IFJvb3QgPSBzdHlsZWQuZGl2PCBSb290UHJvcHMgPmBcblx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDtcblx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0ZGlzcGxheTogZmxleDtcblx0anVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuXHRwYWRkaW5nOiAwO1xuXHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdHRvdWNoLWFjdGlvbjogbm9uZTtcblx0d2lkdGg6IDEwMCU7XG5cdG1pbi1oZWlnaHQ6IDQwcHg7XG5cdC8qIFRPRE86IHJlbW92ZSBhZnRlciByZW1vdmluZyB0aGUgX19uZXh0NDBweERlZmF1bHRTaXplIHByb3AgKi9cblx0JHsgZGVwcmVjYXRlZEhlaWdodCB9O1xuYDtcblxuY29uc3Qgd3JhcHBlckNvbG9yID0gKCB7IGNvbG9yID0gQ09MT1JTLnVpLmJvcmRlckZvY3VzIH06IFdyYXBwZXJQcm9wcyApID0+XG5cdGNzcyggeyBjb2xvciB9ICk7XG5cbmNvbnN0IHdyYXBwZXJNYXJnaW4gPSAoIHsgbWFya3MsIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tIH06IFdyYXBwZXJQcm9wcyApID0+IHtcblx0aWYgKCAhIF9fbmV4dEhhc05vTWFyZ2luQm90dG9tICkge1xuXHRcdHJldHVybiBjc3MoIHsgbWFyZ2luQm90dG9tOiBtYXJrcyA/IDE2IDogdW5kZWZpbmVkIH0gKTtcblx0fVxuXHRyZXR1cm4gJyc7XG59O1xuXG5leHBvcnQgY29uc3QgV3JhcHBlciA9IHN0eWxlZC5kaXY8IFdyYXBwZXJQcm9wcyA+YFxuXHRkaXNwbGF5OiBibG9jaztcblx0ZmxleDogMTtcblx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHR3aWR0aDogMTAwJTtcblxuXHQkeyB3cmFwcGVyQ29sb3IgfTtcblx0JHsgcmFuZ2VIZWlnaHQgfTtcblx0JHsgd3JhcHBlck1hcmdpbiB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IEJlZm9yZUljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGZsZXg7IC8vIGVuc3VyZXMgdGhlIGhlaWdodCBpc24ndCBhZmZlY3RlZCBieSBsaW5lLWhlaWdodFxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyBydGwoIHsgbWFyZ2luUmlnaHQ6IDYgfSApIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBBZnRlckljb25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGRpc3BsYXk6IGZsZXg7IC8vIGVuc3VyZXMgdGhlIGhlaWdodCBpc24ndCBhZmZlY3RlZCBieSBsaW5lLWhlaWdodFxuXHRtYXJnaW4tdG9wOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogNiB9ICkgfVxuYDtcblxuY29uc3QgcmFpbEJhY2tncm91bmRDb2xvciA9ICggeyBkaXNhYmxlZCwgcmFpbENvbG9yIH06IFJhaWxQcm9wcyApID0+IHtcblx0bGV0IGJhY2tncm91bmQgPSByYWlsQ29sb3IgfHwgJyc7XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLnVpLmJhY2tncm91bmREaXNhYmxlZDtcblx0fVxuXG5cdHJldHVybiBjc3MoIHsgYmFja2dyb3VuZCB9ICk7XG59O1xuXG5leHBvcnQgY29uc3QgUmFpbCA9IHN0eWxlZC5zcGFuYFxuXHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgMzAwIF0gfTtcblx0bGVmdDogMDtcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHJpZ2h0OiAwO1xuXHRkaXNwbGF5OiBibG9jaztcblx0aGVpZ2h0OiAkeyByYWlsSGVpZ2h0IH1weDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHRtYXJnaW4tdG9wOiAkeyAoIHJhbmdlSGVpZ2h0VmFsdWUgLSByYWlsSGVpZ2h0ICkgLyAyIH1weDtcblx0dG9wOiAwO1xuXHRib3JkZXItcmFkaXVzOiAkeyByYWlsSGVpZ2h0IH1weDtcblxuXHQkeyByYWlsQmFja2dyb3VuZENvbG9yIH07XG5gO1xuXG5jb25zdCB0cmFja0JhY2tncm91bmRDb2xvciA9ICggeyBkaXNhYmxlZCwgdHJhY2tDb2xvciB9OiBUcmFja1Byb3BzICkgPT4ge1xuXHRsZXQgYmFja2dyb3VuZCA9IHRyYWNrQ29sb3IgfHwgJ2N1cnJlbnRDb2xvcic7XG5cblx0aWYgKCBkaXNhYmxlZCApIHtcblx0XHRiYWNrZ3JvdW5kID0gQ09MT1JTLmdyYXlbIDQwMCBdO1xuXHR9XG5cblx0cmV0dXJuIGNzcyggeyBiYWNrZ3JvdW5kIH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBUcmFjayA9IHN0eWxlZC5zcGFuYFxuXHRiYWNrZ3JvdW5kLWNvbG9yOiBjdXJyZW50Q29sb3I7XG5cdGJvcmRlci1yYWRpdXM6ICR7IHJhaWxIZWlnaHQgfXB4O1xuXHRoZWlnaHQ6ICR7IHJhaWxIZWlnaHQgfXB4O1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0ZGlzcGxheTogYmxvY2s7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0bWFyZ2luLXRvcDogJHsgKCByYW5nZUhlaWdodFZhbHVlIC0gcmFpbEhlaWdodCApIC8gMiB9cHg7XG5cdHRvcDogMDtcblxuXHQkeyB0cmFja0JhY2tncm91bmRDb2xvciB9O1xuYDtcblxuZXhwb3J0IGNvbnN0IE1hcmtzV3JhcHBlciA9IHN0eWxlZC5zcGFuYFxuXHRkaXNwbGF5OiBibG9jaztcblx0cG9pbnRlci1ldmVudHM6IG5vbmU7XG5cdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0d2lkdGg6IDEwMCU7XG5cdHVzZXItc2VsZWN0OiBub25lO1xuYDtcblxuY29uc3QgbWFya0ZpbGwgPSAoIHsgZGlzYWJsZWQsIGlzRmlsbGVkIH06IFJhbmdlTWFya1Byb3BzICkgPT4ge1xuXHRsZXQgYmFja2dyb3VuZENvbG9yID0gaXNGaWxsZWQgPyAnY3VycmVudENvbG9yJyA6IENPTE9SUy5ncmF5WyAzMDAgXTtcblxuXHRpZiAoIGRpc2FibGVkICkge1xuXHRcdGJhY2tncm91bmRDb2xvciA9IENPTE9SUy5ncmF5WyA0MDAgXTtcblx0fVxuXG5cdHJldHVybiBjc3MoIHtcblx0XHRiYWNrZ3JvdW5kQ29sb3IsXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBNYXJrID0gc3R5bGVkLnNwYW5gXG5cdGhlaWdodDogJHsgdGh1bWJTaXplIH1weDtcblx0bGVmdDogMDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0b3A6IC00cHg7XG5cdHdpZHRoOiAxcHg7XG5cblx0JHsgbWFya0ZpbGwgfTtcbmA7XG5cbmNvbnN0IG1hcmtMYWJlbEZpbGwgPSAoIHsgaXNGaWxsZWQgfTogUmFuZ2VNYXJrUHJvcHMgKSA9PiB7XG5cdHJldHVybiBjc3MoIHtcblx0XHRjb2xvcjogaXNGaWxsZWQgPyBDT0xPUlMuZ3JheVsgNzAwIF0gOiBDT0xPUlMuZ3JheVsgMzAwIF0sXG5cdH0gKTtcbn07XG5cbmV4cG9ydCBjb25zdCBNYXJrTGFiZWwgPSBzdHlsZWQuc3BhbmBcblx0Y29sb3I6ICR7IENPTE9SUy5ncmF5WyAzMDAgXSB9O1xuXHRsZWZ0OiAwO1xuXHRmb250LXNpemU6IDExcHg7XG5cdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0dG9wOiAxMnB4O1xuXHR0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoIC01MCUgKTtcblx0d2hpdGUtc3BhY2U6IG5vd3JhcDtcblxuXHQkeyBtYXJrTGFiZWxGaWxsIH07XG5gO1xuXG5jb25zdCB0aHVtYkNvbG9yID0gKCB7IGRpc2FibGVkIH06IFRodW1iUHJvcHMgKSA9PlxuXHRkaXNhYmxlZFxuXHRcdD8gY3NzYFxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yOiAkeyBDT0xPUlMuZ3JheVsgNDAwIF0gfTtcblx0XHQgIGBcblx0XHQ6IGNzc2Bcblx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0ICBgO1xuXG5leHBvcnQgY29uc3QgVGh1bWJXcmFwcGVyID0gc3R5bGVkLnNwYW5gXG5cdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdGRpc3BsYXk6IGZsZXg7XG5cdGhlaWdodDogJHsgdGh1bWJTaXplIH1weDtcblx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdG1hcmdpbi10b3A6ICR7ICggcmFuZ2VIZWlnaHRWYWx1ZSAtIHRodW1iU2l6ZSApIC8gMiB9cHg7XG5cdG91dGxpbmU6IDA7XG5cdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHRvcDogMDtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdHdpZHRoOiAkeyB0aHVtYlNpemUgfXB4O1xuXHRib3JkZXItcmFkaXVzOiA1MCU7XG5cblx0JHsgdGh1bWJDb2xvciB9O1xuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogLTEwIH0gKSB9O1xuXHQkeyBydGwoXG5cdFx0eyB0cmFuc2Zvcm06ICd0cmFuc2xhdGVYKCA0LjVweCApJyB9LFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCggLTQuNXB4ICknIH1cblx0KSB9O1xuYDtcblxuY29uc3QgdGh1bWJGb2N1cyA9ICggeyBpc0ZvY3VzZWQgfTogVGh1bWJQcm9wcyApID0+IHtcblx0cmV0dXJuIGlzRm9jdXNlZFxuXHRcdD8gY3NzYFxuXHRcdFx0XHQmOjpiZWZvcmUge1xuXHRcdFx0XHRcdGNvbnRlbnQ6ICcgJztcblx0XHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdFx0YmFja2dyb3VuZC1jb2xvcjogJHsgQ09MT1JTLnVpLnRoZW1lIH07XG5cdFx0XHRcdFx0b3BhY2l0eTogMC40O1xuXHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdFx0XHRoZWlnaHQ6ICR7IHRodW1iU2l6ZSArIDggfXB4O1xuXHRcdFx0XHRcdHdpZHRoOiAkeyB0aHVtYlNpemUgKyA4IH1weDtcblx0XHRcdFx0XHR0b3A6IC00cHg7XG5cdFx0XHRcdFx0bGVmdDogLTRweDtcblx0XHRcdFx0fVxuXHRcdCAgYFxuXHRcdDogJyc7XG59O1xuXG5leHBvcnQgY29uc3QgVGh1bWIgPSBzdHlsZWQuc3BhbjwgVGh1bWJQcm9wcyA+YFxuXHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRib3JkZXItcmFkaXVzOiA1MCU7XG5cdGhlaWdodDogMTAwJTtcblx0b3V0bGluZTogMDtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR1c2VyLXNlbGVjdDogbm9uZTtcblx0d2lkdGg6IDEwMCU7XG5cblx0JHsgdGh1bWJDb2xvciB9O1xuXHQkeyB0aHVtYkZvY3VzIH07XG5gO1xuXG5leHBvcnQgY29uc3QgSW5wdXRSYW5nZSA9IHN0eWxlZC5pbnB1dGBcblx0Ym94LXNpemluZzogYm9yZGVyLWJveDtcblx0Y3Vyc29yOiBwb2ludGVyO1xuXHRkaXNwbGF5OiBibG9jaztcblx0aGVpZ2h0OiAxMDAlO1xuXHRsZWZ0OiAwO1xuXHRtYXJnaW46IDAgLSR7IHRodW1iU2l6ZSAvIDIgfXB4O1xuXHRvcGFjaXR5OiAwO1xuXHRvdXRsaW5lOiBub25lO1xuXHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdHJpZ2h0OiAwO1xuXHR0b3A6IDA7XG5cdHdpZHRoOiBjYWxjKCAxMDAlICsgJHsgdGh1bWJTaXplIH1weCApO1xuYDtcblxuY29uc3QgdG9vbHRpcFNob3cgPSAoIHsgc2hvdyB9OiBUb29sdGlwUHJvcHMgKSA9PiB7XG5cdHJldHVybiBjc3MoIHtcblx0XHRvcGFjaXR5OiBzaG93ID8gMSA6IDAsXG5cdH0gKTtcbn07XG5cbmNvbnN0IHRvb2x0aXBQb3NpdGlvbiA9ICggeyBwb3NpdGlvbiB9OiBUb29sdGlwUHJvcHMgKSA9PiB7XG5cdGNvbnN0IGlzQm90dG9tID0gcG9zaXRpb24gPT09ICdib3R0b20nO1xuXG5cdGlmICggaXNCb3R0b20gKSB7XG5cdFx0cmV0dXJuIGNzc2Bcblx0XHRcdGJvdHRvbTogLTgwJTtcblx0XHRgO1xuXHR9XG5cblx0cmV0dXJuIGNzc2Bcblx0XHR0b3A6IC04MCU7XG5cdGA7XG59O1xuXG5leHBvcnQgY29uc3QgVG9vbHRpcCA9IHN0eWxlZC5zcGFuPCBUb29sdGlwUHJvcHMgPmBcblx0YmFja2dyb3VuZDogcmdiYSggMCwgMCwgMCwgMC44ICk7XG5cdGJvcmRlci1yYWRpdXM6IDJweDtcblx0Y29sb3I6IHdoaXRlO1xuXHRkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cdGZvbnQtc2l6ZTogMTJweDtcblx0bWluLXdpZHRoOiAzMnB4O1xuXHRvcGFjaXR5OiAwO1xuXHRwYWRkaW5nOiA0cHggOHB4O1xuXHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0cG9zaXRpb246IGFic29sdXRlO1xuXHR0ZXh0LWFsaWduOiBjZW50ZXI7XG5cdHRyYW5zaXRpb246IG9wYWNpdHkgMTIwbXMgZWFzZTtcblx0dXNlci1zZWxlY3Q6IG5vbmU7XG5cdGxpbmUtaGVpZ2h0OiAxLjQ7XG5cblx0JHsgdG9vbHRpcFNob3cgfTtcblx0JHsgdG9vbHRpcFBvc2l0aW9uIH07XG5cdCR7IHJlZHVjZU1vdGlvbiggJ3RyYW5zaXRpb24nICkgfTtcblx0JHsgcnRsKFxuXHRcdHsgdHJhbnNmb3JtOiAndHJhbnNsYXRlWCgtNTAlKScgfSxcblx0XHR7IHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVgoNTAlKScgfVxuXHQpIH1cbmA7XG5cbi8vIEB0b2RvOiBSZWZhY3RvciBSYW5nZUNvbnRyb2wgd2l0aCBsYXRlc3QgSFN0YWNrIGNvbmZpZ3VyYXRpb25cbi8vIEB3b3JkcHJlc3MvY29tcG9uZW50cy91aS9oc3RhY2suXG5leHBvcnQgY29uc3QgSW5wdXROdW1iZXIgPSBzdHlsZWQoIE51bWJlckNvbnRyb2wgKWBcblx0ZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXHRmb250LXNpemU6IDEzcHg7XG5cdG1hcmdpbi10b3A6IDA7XG5cblx0aW5wdXRbdHlwZT0nbnVtYmVyJ10mIHtcblx0XHQkeyByYW5nZUhlaWdodCB9O1xuXHR9XG5cblx0JHsgcnRsKCB7IG1hcmdpbkxlZnQ6IGAkeyBzcGFjZSggNCApIH0gIWltcG9ydGFudGAgfSApIH1cbmA7XG5cbmV4cG9ydCBjb25zdCBBY3Rpb25SaWdodFdyYXBwZXIgPSBzdHlsZWQuc3BhbmBcblx0ZGlzcGxheTogYmxvY2s7XG5cdG1hcmdpbi10b3A6IDA7XG5cblx0YnV0dG9uLFxuXHRidXR0b24uaXMtc21hbGwge1xuXHRcdG1hcmdpbi1sZWZ0OiAwO1xuXHRcdCR7IHJhbmdlSGVpZ2h0IH07XG5cdH1cblxuXHQkeyBydGwoIHsgbWFyZ2luTGVmdDogOCB9ICkgfVxuYDtcbiJdfQ== */") : '';
};

const Thumb = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk4"
} : {
  target: "e1epgpqk4",
  label: "Thumb"
})("align-items:center;border-radius:50%;height:100%;outline:0;position:absolute;user-select:none;width:100%;", thumbColor, ";", thumbFocus, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.Thumb = Thumb;
const InputRange = (0, _base.default)("input", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk3"
} : {
  target: "e1epgpqk3",
  label: "InputRange"
})("box-sizing:border-box;cursor:pointer;display:block;height:100%;left:0;margin:0 -", thumbSize / 2, "px;opacity:0;outline:none;position:absolute;right:0;top:0;width:calc( 100% + ", thumbSize, "px );" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.InputRange = InputRange;

const tooltipShow = ({
  show
}) => {
  return /*#__PURE__*/(0, _react.css)({
    opacity: show ? 1 : 0
  }, process.env.NODE_ENV === "production" ? "" : ";label:tooltipShow;", process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
};

var _ref = process.env.NODE_ENV === "production" ? {
  name: "1cypxip",
  styles: "top:-80%"
} : {
  name: "e8g0c9-tooltipPosition",
  styles: "top:-80%;label:tooltipPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1lr98c4",
  styles: "bottom:-80%"
} : {
  name: "848kg9-tooltipPosition",
  styles: "bottom:-80%;label:tooltipPosition;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

const tooltipPosition = ({
  position
}) => {
  const isBottom = position === 'bottom';

  if (isBottom) {
    return _ref2;
  }

  return _ref;
};

const Tooltip = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk2"
} : {
  target: "e1epgpqk2",
  label: "Tooltip"
})("background:rgba( 0, 0, 0, 0.8 );border-radius:2px;color:white;display:inline-block;font-size:12px;min-width:32px;opacity:0;padding:4px 8px;pointer-events:none;position:absolute;text-align:center;transition:opacity 120ms ease;user-select:none;line-height:1.4;", tooltipShow, ";", tooltipPosition, ";", (0, _utils.reduceMotion)('transition'), ";", (0, _utils.rtl)({
  transform: 'translateX(-50%)'
}, {
  transform: 'translateX(50%)'
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")); // @todo: Refactor RangeControl with latest HStack configuration
// @wordpress/components/ui/hstack.

exports.Tooltip = Tooltip;
const InputNumber = ( /*#__PURE__*/0, _base.default)(_numberControl.default, process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk1"
} : {
  target: "e1epgpqk1",
  label: "InputNumber"
})("display:inline-block;font-size:13px;margin-top:0;input[type='number']&{", rangeHeight, ";}", (0, _utils.rtl)({
  marginLeft: `${(0, _space.space)(4)} !important`
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.InputNumber = InputNumber;
const ActionRightWrapper = (0, _base.default)("span", process.env.NODE_ENV === "production" ? {
  target: "e1epgpqk0"
} : {
  target: "e1epgpqk0",
  label: "ActionRightWrapper"
})("display:block;margin-top:0;button,button.is-small{margin-left:0;", rangeHeight, ";}", (0, _utils.rtl)({
  marginLeft: 8
}), ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
exports.ActionRightWrapper = ActionRightWrapper;
//# sourceMappingURL=range-control-styles.js.map