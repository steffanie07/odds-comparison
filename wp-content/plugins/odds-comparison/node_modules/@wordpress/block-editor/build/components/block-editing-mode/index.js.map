{"version":3,"sources":["@wordpress/block-editor/src/components/block-editing-mode/index.js"],"names":["useBlockEditingMode","mode","clientId","BlockListBlockContext","blockEditingMode","select","blockEditorStore","getBlockEditingMode","setBlockEditingMode","unsetBlockEditingMode"],"mappings":";;;;;;;AAGA;;AACA;;AAKA;;AACA;;AACA;;AAXA;AACA;AACA;;AAIA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAT,CAA8BC,IAA9B,EAAqC;AAAA;;AAC3C,QAAM;AAAEC,IAAAA,QAAQ,GAAG;AAAb,qBAAoB,yBAAYC,4CAAZ,CAApB,qDAA2D,EAAjE;AACA,QAAMC,gBAAgB,GAAG,qBACtBC,MAAF,IACC,wBAAQA,MAAM,CAAEC,YAAF,CAAd,EAAqCC,mBAArC,CACCL,QADD,CAFuB,EAKxB,CAAEA,QAAF,CALwB,CAAzB;AAOA,QAAM;AAAEM,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,MAAiD,wBACtD,uBAAaH,YAAb,CADsD,CAAvD;AAGA,0BAAW,MAAM;AAChB,QAAKL,IAAL,EAAY;AACXO,MAAAA,mBAAmB,CAAEN,QAAF,EAAYD,IAAZ,CAAnB;AACA;;AACD,WAAO,MAAM;AACZ,UAAKA,IAAL,EAAY;AACXQ,QAAAA,qBAAqB,CAAEP,QAAF,CAArB;AACA;AACD,KAJD;AAKA,GATD,EASG,CAAEA,QAAF,EAAYD,IAAZ,CATH;AAUA,SAAOG,gBAAP;AACA","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { useContext, useEffect } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { unlock } from '../../lock-unlock';\nimport { BlockListBlockContext } from '../block-list/block-list-block-context';\n\n/**\n * @typedef {'disabled'|'contentOnly'|'default'} BlockEditingMode\n */\n\n/**\n * Allows a block to restrict the user interface that is displayed for editing\n * that block and its inner blocks.\n *\n * @example\n * ```js\n * function MyBlock( { attributes, setAttributes } ) {\n *     useBlockEditingMode( 'disabled' );\n *     return <div { ...useBlockProps() }></div>;\n * }\n * ```\n *\n * `mode` can be one of three options:\n *\n * - `'disabled'`: Prevents editing the block entirely, i.e. it cannot be\n *   selected.\n * - `'contentOnly'`: Hides all non-content UI, e.g. auxiliary controls in the\n *   toolbar, the block movers, block settings.\n * - `'default'`: Allows editing the block as normal.\n *\n * The mode is inherited by all of the block's inner blocks, unless they have\n * their own mode.\n *\n * If called outside of a block context, the mode is applied to all blocks.\n *\n * @param {?BlockEditingMode} mode The editing mode to apply. If undefined, the\n *                                 current editing mode is not changed.\n *\n * @return {BlockEditingMode} The current editing mode.\n */\nexport function useBlockEditingMode( mode ) {\n\tconst { clientId = '' } = useContext( BlockListBlockContext ) ?? {};\n\tconst blockEditingMode = useSelect(\n\t\t( select ) =>\n\t\t\tunlock( select( blockEditorStore ) ).getBlockEditingMode(\n\t\t\t\tclientId\n\t\t\t),\n\t\t[ clientId ]\n\t);\n\tconst { setBlockEditingMode, unsetBlockEditingMode } = unlock(\n\t\tuseDispatch( blockEditorStore )\n\t);\n\tuseEffect( () => {\n\t\tif ( mode ) {\n\t\t\tsetBlockEditingMode( clientId, mode );\n\t\t}\n\t\treturn () => {\n\t\t\tif ( mode ) {\n\t\t\t\tunsetBlockEditingMode( clientId );\n\t\t\t}\n\t\t};\n\t}, [ clientId, mode ] );\n\treturn blockEditingMode;\n}\n"]}