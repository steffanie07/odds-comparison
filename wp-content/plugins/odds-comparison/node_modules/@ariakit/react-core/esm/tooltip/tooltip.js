import {
  useHovercard
} from "../__chunks/BB7NHN6A.js";
import "../__chunks/X7FKJQME.js";
import "../__chunks/SAES3ZFU.js";
import "../__chunks/DTAO6DRL.js";
import "../__chunks/53MSBYTF.js";
import "../__chunks/AR6DTI3S.js";
import "../__chunks/CYJJUQU3.js";
import "../__chunks/3LAWLNOX.js";
import "../__chunks/CJI67A3R.js";
import "../__chunks/OEA63YXU.js";
import "../__chunks/4XWTU3WN.js";
import "../__chunks/HCZMY53N.js";
import "../__chunks/IXXFVVA2.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/FW6QFGFT.js";
import "../__chunks/IYNN2ZO5.js";
import "../__chunks/FV23EKJL.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/LL3AE4N4.js";
import "../__chunks/EJ3GIT5B.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/LNHZLQEK.js";
import "../__chunks/4PKIGBPJ.js";
import "../__chunks/WHEEIXMF.js";
import "../__chunks/6GS36SYX.js";
import {
  TooltipContext
} from "../__chunks/Z5BJMNGY.js";
import "../__chunks/MYID4V27.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/FL2AU7YJ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/NQJBHION.js";
import "../__chunks/54LBRJ55.js";
import "../__chunks/FHQZ2KRN.js";
import {
  useWrapElement
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/tooltip/tooltip.tsx
import { contains } from "@ariakit/core/utils/dom";
import { isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useTooltip = createHook(
  (_a) => {
    var _b = _a, {
      store,
      portal = true,
      gutter = 8,
      preserveTabOrder = false,
      hideOnHoverOutside = true,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "portal",
      "gutter",
      "preserveTabOrder",
      "hideOnHoverOutside",
      "hideOnInteractOutside"
    ]);
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TooltipContext.Provider, { value: store, children: element }),
      [store]
    );
    const role = store.useState(
      (state) => state.type === "description" ? "tooltip" : "none"
    );
    props = __spreadValues({ role }, props);
    props = useHovercard(__spreadProps(__spreadValues({}, props), {
      store,
      portal,
      gutter,
      preserveTabOrder,
      hideOnHoverOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnHoverOutside, event))
          return false;
        const { anchorElement } = store.getState();
        if (!anchorElement)
          return true;
        if ("focusVisible" in anchorElement.dataset)
          return false;
        return true;
      },
      hideOnInteractOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnInteractOutside, event))
          return false;
        const { anchorElement } = store.getState();
        if (!anchorElement)
          return true;
        if (contains(anchorElement, event.target))
          return false;
        return true;
      }
    }));
    return props;
  }
);
var Tooltip = createComponent((props) => {
  const htmlProps = useTooltip(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
export {
  Tooltip,
  useTooltip
};
