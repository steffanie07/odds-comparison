{"version":3,"sources":["@wordpress/block-editor/src/components/use-block-drop-zone/index.js"],"names":["getDropTargetPosition","blocksData","position","orientation","allowedEdges","isRightToLeft","nearestIndex","insertPosition","minDistance","Infinity","forEach","isUnmodifiedDefaultBlock","getBoundingClientRect","blockIndex","rect","distance","edge","adjacentIndex","isNearestBlockUnmodifiedDefaultBlock","isAdjacentBlockUnmodifiedDefaultBlock","insertionIndex","useBlockDropZone","rootClientId","targetRootClientId","registry","dropTarget","setDropTarget","index","operation","isDisabled","select","__unstableIsWithinBlockOverlay","__unstableHasActiveBlockOverlayActive","getBlockEditingMode","blockEditorStore","blockEditingMode","getBlockListSettings","getBlocks","getBlockIndex","showInsertionPoint","hideInsertionPoint","onBlockDrop","throttled","event","ownerDocument","blocks","length","batch","map","block","clientId","getElementById","targetIndex","x","clientX","y","clientY","onDrop","onDragOver","currentTarget","onDragLeave","cancel","onDragEnd"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useDispatch, useSelect, useRegistry } from '@wordpress/data';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tuseThrottle,\n\t__experimentalUseDropZone as useDropZone,\n} from '@wordpress/compose';\nimport { isRTL } from '@wordpress/i18n';\nimport { isUnmodifiedDefaultBlock as getIsUnmodifiedDefaultBlock } from '@wordpress/blocks';\n\n/**\n * Internal dependencies\n */\nimport useOnBlockDrop from '../use-on-block-drop';\nimport {\n\tgetDistanceToNearestEdge,\n\tisPointContainedByRect,\n} from '../../utils/math';\nimport { store as blockEditorStore } from '../../store';\nimport { unlock } from '../../lock-unlock';\n\n/** @typedef {import('../../utils/math').WPPoint} WPPoint */\n/** @typedef {import('../use-on-block-drop/types').WPDropOperation} WPDropOperation */\n\n/**\n * The orientation of a block list.\n *\n * @typedef {'horizontal'|'vertical'|undefined} WPBlockListOrientation\n */\n\n/**\n * The insert position when dropping a block.\n *\n * @typedef {'before'|'after'} WPInsertPosition\n */\n\n/**\n * @typedef {Object} WPBlockData\n * @property {boolean}       isUnmodifiedDefaultBlock Is the block unmodified default block.\n * @property {() => DOMRect} getBoundingClientRect    Get the bounding client rect of the block.\n * @property {number}        blockIndex               The index of the block.\n */\n\n/**\n * Get the drop target position from a given drop point and the orientation.\n *\n * @param {WPBlockData[]}          blocksData  The block data list.\n * @param {WPPoint}                position    The position of the item being dragged.\n * @param {WPBlockListOrientation} orientation The orientation of the block list.\n * @return {[number, WPDropOperation]} The drop target position.\n */\nexport function getDropTargetPosition(\n\tblocksData,\n\tposition,\n\torientation = 'vertical'\n) {\n\tconst allowedEdges =\n\t\torientation === 'horizontal'\n\t\t\t? [ 'left', 'right' ]\n\t\t\t: [ 'top', 'bottom' ];\n\n\tconst isRightToLeft = isRTL();\n\n\tlet nearestIndex = 0;\n\tlet insertPosition = 'before';\n\tlet minDistance = Infinity;\n\n\tblocksData.forEach(\n\t\t( { isUnmodifiedDefaultBlock, getBoundingClientRect, blockIndex } ) => {\n\t\t\tconst rect = getBoundingClientRect();\n\n\t\t\tlet [ distance, edge ] = getDistanceToNearestEdge(\n\t\t\t\tposition,\n\t\t\t\trect,\n\t\t\t\tallowedEdges\n\t\t\t);\n\t\t\t// Prioritize the element if the point is inside of an unmodified default block.\n\t\t\tif (\n\t\t\t\tisUnmodifiedDefaultBlock &&\n\t\t\t\tisPointContainedByRect( position, rect )\n\t\t\t) {\n\t\t\t\tdistance = 0;\n\t\t\t}\n\n\t\t\tif ( distance < minDistance ) {\n\t\t\t\t// Where the dropped block will be inserted on the nearest block.\n\t\t\t\tinsertPosition =\n\t\t\t\t\tedge === 'bottom' ||\n\t\t\t\t\t( ! isRightToLeft && edge === 'right' ) ||\n\t\t\t\t\t( isRightToLeft && edge === 'left' )\n\t\t\t\t\t\t? 'after'\n\t\t\t\t\t\t: 'before';\n\n\t\t\t\t// Update the currently known best candidate.\n\t\t\t\tminDistance = distance;\n\t\t\t\tnearestIndex = blockIndex;\n\t\t\t}\n\t\t}\n\t);\n\n\tconst adjacentIndex =\n\t\tnearestIndex + ( insertPosition === 'after' ? 1 : -1 );\n\tconst isNearestBlockUnmodifiedDefaultBlock =\n\t\t!! blocksData[ nearestIndex ]?.isUnmodifiedDefaultBlock;\n\tconst isAdjacentBlockUnmodifiedDefaultBlock =\n\t\t!! blocksData[ adjacentIndex ]?.isUnmodifiedDefaultBlock;\n\n\t// If both blocks are not unmodified default blocks then just insert between them.\n\tif (\n\t\t! isNearestBlockUnmodifiedDefaultBlock &&\n\t\t! isAdjacentBlockUnmodifiedDefaultBlock\n\t) {\n\t\t// If the user is dropping to the trailing edge of the block\n\t\t// add 1 to the index to represent dragging after.\n\t\tconst insertionIndex =\n\t\t\tinsertPosition === 'after' ? nearestIndex + 1 : nearestIndex;\n\t\treturn [ insertionIndex, 'insert' ];\n\t}\n\n\t// Otherwise, replace the nearest unmodified default block.\n\treturn [\n\t\tisNearestBlockUnmodifiedDefaultBlock ? nearestIndex : adjacentIndex,\n\t\t'replace',\n\t];\n}\n\n/**\n * @typedef  {Object} WPBlockDropZoneConfig\n * @property {string} rootClientId The root client id for the block list.\n */\n\n/**\n * A React hook that can be used to make a block list handle drag and drop.\n *\n * @param {WPBlockDropZoneConfig} dropZoneConfig configuration data for the drop zone.\n */\nexport default function useBlockDropZone( {\n\t// An undefined value represents a top-level block. Default to an empty\n\t// string for this so that `targetRootClientId` can be easily compared to\n\t// values returned by the `getRootBlockClientId` selector, which also uses\n\t// an empty string to represent top-level blocks.\n\trootClientId: targetRootClientId = '',\n} = {} ) {\n\tconst registry = useRegistry();\n\tconst [ dropTarget, setDropTarget ] = useState( {\n\t\tindex: null,\n\t\toperation: 'insert',\n\t} );\n\n\tconst isDisabled = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\t__unstableIsWithinBlockOverlay,\n\t\t\t\t__unstableHasActiveBlockOverlayActive,\n\t\t\t\tgetBlockEditingMode,\n\t\t\t} = unlock( select( blockEditorStore ) );\n\t\t\tconst blockEditingMode = getBlockEditingMode( targetRootClientId );\n\t\t\treturn (\n\t\t\t\tblockEditingMode !== 'default' ||\n\t\t\t\t__unstableHasActiveBlockOverlayActive( targetRootClientId ) ||\n\t\t\t\t__unstableIsWithinBlockOverlay( targetRootClientId )\n\t\t\t);\n\t\t},\n\t\t[ targetRootClientId ]\n\t);\n\n\tconst { getBlockListSettings, getBlocks, getBlockIndex } =\n\t\tuseSelect( blockEditorStore );\n\tconst { showInsertionPoint, hideInsertionPoint } =\n\t\tuseDispatch( blockEditorStore );\n\n\tconst onBlockDrop = useOnBlockDrop( targetRootClientId, dropTarget.index, {\n\t\toperation: dropTarget.operation,\n\t} );\n\tconst throttled = useThrottle(\n\t\tuseCallback(\n\t\t\t( event, ownerDocument ) => {\n\t\t\t\tconst blocks = getBlocks( targetRootClientId );\n\n\t\t\t\t// The block list is empty, don't show the insertion point but still allow dropping.\n\t\t\t\tif ( blocks.length === 0 ) {\n\t\t\t\t\tregistry.batch( () => {\n\t\t\t\t\t\tsetDropTarget( {\n\t\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\t\toperation: 'insert',\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tshowInsertionPoint( targetRootClientId, 0, {\n\t\t\t\t\t\t\toperation: 'insert',\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst blocksData = blocks.map( ( block ) => {\n\t\t\t\t\tconst clientId = block.clientId;\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tisUnmodifiedDefaultBlock:\n\t\t\t\t\t\t\tgetIsUnmodifiedDefaultBlock( block ),\n\t\t\t\t\t\tgetBoundingClientRect: () =>\n\t\t\t\t\t\t\townerDocument\n\t\t\t\t\t\t\t\t.getElementById( `block-${ clientId }` )\n\t\t\t\t\t\t\t\t.getBoundingClientRect(),\n\t\t\t\t\t\tblockIndex: getBlockIndex( clientId ),\n\t\t\t\t\t};\n\t\t\t\t} );\n\n\t\t\t\tconst [ targetIndex, operation ] = getDropTargetPosition(\n\t\t\t\t\tblocksData,\n\t\t\t\t\t{ x: event.clientX, y: event.clientY },\n\t\t\t\t\tgetBlockListSettings( targetRootClientId )?.orientation\n\t\t\t\t);\n\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\tsetDropTarget( {\n\t\t\t\t\t\tindex: targetIndex,\n\t\t\t\t\t\toperation,\n\t\t\t\t\t} );\n\t\t\t\t\tshowInsertionPoint( targetRootClientId, targetIndex, {\n\t\t\t\t\t\toperation,\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t},\n\t\t\t[\n\t\t\t\tgetBlocks,\n\t\t\t\ttargetRootClientId,\n\t\t\t\tgetBlockListSettings,\n\t\t\t\tregistry,\n\t\t\t\tshowInsertionPoint,\n\t\t\t\tgetBlockIndex,\n\t\t\t]\n\t\t),\n\t\t200\n\t);\n\n\treturn useDropZone( {\n\t\tisDisabled,\n\t\tonDrop: onBlockDrop,\n\t\tonDragOver( event ) {\n\t\t\t// `currentTarget` is only available while the event is being\n\t\t\t// handled, so get it now and pass it to the thottled function.\n\t\t\t// https://developer.mozilla.org/en-US/docs/Web/API/Event/currentTarget\n\t\t\tthrottled( event, event.currentTarget.ownerDocument );\n\t\t},\n\t\tonDragLeave() {\n\t\t\tthrottled.cancel();\n\t\t\thideInsertionPoint();\n\t\t},\n\t\tonDragEnd() {\n\t\t\tthrottled.cancel();\n\t\t\thideInsertionPoint();\n\t\t},\n\t} );\n}\n"]}