{"version":3,"sources":["@wordpress/block-editor/src/components/inner-blocks/use-nested-settings-update.js"],"names":["pendingSettingsUpdates","WeakMap","useNestedSettingsUpdate","clientId","allowedBlocks","prioritizedInserterBlocks","defaultBlock","directInsert","__experimentalDefaultBlock","__experimentalDirectInsert","templateLock","captureToolbars","orientation","layout","updateBlockListSettings","blockEditorStore","registry","parentLock","select","rootClientId","getBlockRootClientId","getTemplateLock","_allowedBlocks","_prioritizedInserterBlocks","_templateLock","undefined","newSettings","__experimentalCaptureToolbars","layoutType","type","getOrientation","alternative","since","version","get","set","push","window","queueMicrotask","length","batch","forEach","args"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useLayoutEffect, useMemo } from '@wordpress/element';\nimport { useSelect, useDispatch, useRegistry } from '@wordpress/data';\nimport deprecated from '@wordpress/deprecated';\n\n/**\n * Internal dependencies\n */\nimport { store as blockEditorStore } from '../../store';\nimport { getLayoutType } from '../../layouts';\n\n/** @typedef {import('../../selectors').WPDirectInsertBlock } WPDirectInsertBlock */\n\nconst pendingSettingsUpdates = new WeakMap();\n\n/**\n * This hook is a side effect which updates the block-editor store when changes\n * happen to inner block settings. The given props are transformed into a\n * settings object, and if that is different from the current settings object in\n * the block-editor store, then the store is updated with the new settings which\n * came from props.\n *\n * @param {string}               clientId                   The client ID of the block to update.\n * @param {string[]}             allowedBlocks              An array of block names which are permitted\n *                                                          in inner blocks.\n * @param {string[]}             prioritizedInserterBlocks  Block names and/or block variations to be prioritized in the inserter, in the format {blockName}/{variationName}.\n * @param {?WPDirectInsertBlock} defaultBlock               The default block to insert: [ blockName, { blockAttributes } ].\n * @param {?Function|boolean}    directInsert               If a default block should be inserted directly by the appender.\n *\n * @param {?WPDirectInsertBlock} __experimentalDefaultBlock A deprecated prop for the default block to insert: [ blockName, { blockAttributes } ]. Use `defaultBlock` instead.\n *\n * @param {?Function|boolean}    __experimentalDirectInsert A deprecated prop for whether a default block should be inserted directly by the appender. Use `directInsert` instead.\n *\n * @param {string}               [templateLock]             The template lock specified for the inner\n *                                                          blocks component. (e.g. \"all\")\n * @param {boolean}              captureToolbars            Whether or children toolbars should be shown\n *                                                          in the inner blocks component rather than on\n *                                                          the child block.\n * @param {string}               orientation                The direction in which the block\n *                                                          should face.\n * @param {Object}               layout                     The layout object for the block container.\n */\nexport default function useNestedSettingsUpdate(\n\tclientId,\n\tallowedBlocks,\n\tprioritizedInserterBlocks,\n\tdefaultBlock,\n\tdirectInsert,\n\t__experimentalDefaultBlock,\n\t__experimentalDirectInsert,\n\ttemplateLock,\n\tcaptureToolbars,\n\torientation,\n\tlayout\n) {\n\tconst { updateBlockListSettings } = useDispatch( blockEditorStore );\n\tconst registry = useRegistry();\n\n\tconst { parentLock } = useSelect(\n\t\t( select ) => {\n\t\t\tconst rootClientId =\n\t\t\t\tselect( blockEditorStore ).getBlockRootClientId( clientId );\n\t\t\treturn {\n\t\t\t\tparentLock:\n\t\t\t\t\tselect( blockEditorStore ).getTemplateLock( rootClientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\t// Memoize allowedBlocks and prioritisedInnerBlocks based on the contents\n\t// of the arrays. Implementors often pass a new array on every render,\n\t// and the contents of the arrays are just strings, so the entire array\n\t// can be passed as dependencies.\n\n\tconst _allowedBlocks = useMemo(\n\t\t() => allowedBlocks,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tallowedBlocks\n\t);\n\n\tconst _prioritizedInserterBlocks = useMemo(\n\t\t() => prioritizedInserterBlocks,\n\t\t// eslint-disable-next-line react-hooks/exhaustive-deps\n\t\tprioritizedInserterBlocks\n\t);\n\n\tconst _templateLock =\n\t\ttemplateLock === undefined || parentLock === 'contentOnly'\n\t\t\t? parentLock\n\t\t\t: templateLock;\n\n\tuseLayoutEffect( () => {\n\t\tconst newSettings = {\n\t\t\tallowedBlocks: _allowedBlocks,\n\t\t\tprioritizedInserterBlocks: _prioritizedInserterBlocks,\n\t\t\ttemplateLock: _templateLock,\n\t\t};\n\n\t\t// These values are not defined for RN, so only include them if they\n\t\t// are defined.\n\t\tif ( captureToolbars !== undefined ) {\n\t\t\tnewSettings.__experimentalCaptureToolbars = captureToolbars;\n\t\t}\n\n\t\t// Orientation depends on layout,\n\t\t// ideally the separate orientation prop should be deprecated.\n\t\tif ( orientation !== undefined ) {\n\t\t\tnewSettings.orientation = orientation;\n\t\t} else {\n\t\t\tconst layoutType = getLayoutType( layout?.type );\n\t\t\tnewSettings.orientation = layoutType.getOrientation( layout );\n\t\t}\n\n\t\tif ( __experimentalDefaultBlock !== undefined ) {\n\t\t\tdeprecated( '__experimentalDefaultBlock', {\n\t\t\t\talternative: 'defaultBlock',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.defaultBlock = __experimentalDefaultBlock;\n\t\t}\n\n\t\tif ( defaultBlock !== undefined ) {\n\t\t\tnewSettings.defaultBlock = defaultBlock;\n\t\t}\n\n\t\tif ( __experimentalDirectInsert !== undefined ) {\n\t\t\tdeprecated( '__experimentalDirectInsert', {\n\t\t\t\talternative: 'directInsert',\n\t\t\t\tsince: '6.3',\n\t\t\t\tversion: '6.4',\n\t\t\t} );\n\t\t\tnewSettings.directInsert = __experimentalDirectInsert;\n\t\t}\n\n\t\tif ( directInsert !== undefined ) {\n\t\t\tnewSettings.directInsert = directInsert;\n\t\t}\n\n\t\t// Batch updates to block list settings to avoid triggering cascading renders\n\t\t// for each container block included in a tree and optimize initial render.\n\t\t// To avoid triggering updateBlockListSettings for each container block\n\t\t// causing X re-renderings for X container blocks,\n\t\t// we batch all the updatedBlockListSettings in a single \"data\" batch\n\t\t// which results in a single re-render.\n\t\tif ( ! pendingSettingsUpdates.get( registry ) ) {\n\t\t\tpendingSettingsUpdates.set( registry, [] );\n\t\t}\n\t\tpendingSettingsUpdates\n\t\t\t.get( registry )\n\t\t\t.push( [ clientId, newSettings ] );\n\t\twindow.queueMicrotask( () => {\n\t\t\tif ( pendingSettingsUpdates.get( registry )?.length ) {\n\t\t\t\tregistry.batch( () => {\n\t\t\t\t\tpendingSettingsUpdates\n\t\t\t\t\t\t.get( registry )\n\t\t\t\t\t\t.forEach( ( args ) => {\n\t\t\t\t\t\t\tupdateBlockListSettings( ...args );\n\t\t\t\t\t\t} );\n\t\t\t\t\tpendingSettingsUpdates.set( registry, [] );\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t}, [\n\t\tclientId,\n\t\t_allowedBlocks,\n\t\t_prioritizedInserterBlocks,\n\t\t_templateLock,\n\t\tdefaultBlock,\n\t\tdirectInsert,\n\t\t__experimentalDefaultBlock,\n\t\t__experimentalDirectInsert,\n\t\tcaptureToolbars,\n\t\torientation,\n\t\tupdateBlockListSettings,\n\t\tlayout,\n\t\tregistry,\n\t] );\n}\n"]}