{"version":3,"sources":["@wordpress/block-editor/src/store/private-actions.js"],"names":["castArray","maybeArray","Array","isArray","privateSettings","__experimentalUpdateSettings","settings","stripExperimentalSettings","reset","cleanSettings","Platform","OS","key","includes","type","hideBlockInterface","showBlockInterface","setBlockEditingMode","clientId","mode","unsetBlockEditingMode","privateRemoveBlocks","clientIds","selectPrevious","forceRemove","select","dispatch","length","rootClientId","getBlockRootClientId","canRemoveBlocks","rules","getBlockRemovalRules","blockNamesForPrompt","Set","queue","shift","blockName","getBlockName","add","innerBlocks","getBlockOrder","push","size","displayBlockRemovalPrompt","from","selectPreviousBlock","ensureDefaultBlock","count","getBlockCount","__unstableHasCustomAppender","getSettings","insertDefaultBlock","clearBlockRemovalPrompt","setBlockRemovalRules"],"mappings":"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","sourcesContent":["/**\n * WordPress dependencies\n */\nimport { Platform } from '@wordpress/element';\n\nconst castArray = ( maybeArray ) =>\n\tArray.isArray( maybeArray ) ? maybeArray : [ maybeArray ];\n\n/**\n * A list of private/experimental block editor settings that\n * should not become a part of the WordPress public API.\n * BlockEditorProvider will remove these settings from the\n * settings object it receives.\n *\n * @see https://github.com/WordPress/gutenberg/pull/46131\n */\nconst privateSettings = [\n\t'inserterMediaCategories',\n\t'blockInspectorAnimation',\n];\n\n/**\n * Action that updates the block editor settings and\n * conditionally preserves the experimental ones.\n *\n * @param {Object}  settings                          Updated settings\n * @param {Object}  options                           Options object.\n * @param {boolean} options.stripExperimentalSettings Whether to strip experimental settings.\n * @param {boolean} options.reset                     Whether to reset the settings.\n * @return {Object} Action object\n */\nexport function __experimentalUpdateSettings(\n\tsettings,\n\t{ stripExperimentalSettings = false, reset = false } = {}\n) {\n\tlet cleanSettings = settings;\n\t// There are no plugins in the mobile apps, so there is no\n\t// need to strip the experimental settings:\n\tif ( stripExperimentalSettings && Platform.OS === 'web' ) {\n\t\tcleanSettings = {};\n\t\tfor ( const key in settings ) {\n\t\t\tif ( ! privateSettings.includes( key ) ) {\n\t\t\t\tcleanSettings[ key ] = settings[ key ];\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\ttype: 'UPDATE_SETTINGS',\n\t\tsettings: cleanSettings,\n\t\treset,\n\t};\n}\n\n/**\n * Hides the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function hideBlockInterface() {\n\treturn {\n\t\ttype: 'HIDE_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * Shows the block interface (eg. toolbar, outline, etc.)\n *\n * @return {Object} Action object.\n */\nexport function showBlockInterface() {\n\treturn {\n\t\ttype: 'SHOW_BLOCK_INTERFACE',\n\t};\n}\n\n/**\n * @typedef {import('../components/block-editing-mode').BlockEditingMode} BlockEditingMode\n */\n\n/**\n * Sets the block editing mode for a given block.\n *\n * @see useBlockEditingMode\n *\n * @param {string}           clientId The block client ID, or `''` for the root container.\n * @param {BlockEditingMode} mode     The block editing mode. One of `'disabled'`,\n *                                    `'contentOnly'`, or `'default'`.\n *\n * @return {Object} Action object.\n */\nexport function setBlockEditingMode( clientId = '', mode ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_EDITING_MODE',\n\t\tclientId,\n\t\tmode,\n\t};\n}\n\n/**\n * Clears the block editing mode for a given block.\n *\n * @see useBlockEditingMode\n *\n * @param {string} clientId The block client ID, or `''` for the root container.\n *\n * @return {Object} Action object.\n */\nexport function unsetBlockEditingMode( clientId = '' ) {\n\treturn {\n\t\ttype: 'UNSET_BLOCK_EDITING_MODE',\n\t\tclientId,\n\t};\n}\n\n/**\n * Yields action objects used in signalling that the blocks corresponding to\n * the set of specified client IDs are to be removed.\n *\n * Compared to `removeBlocks`, this private interface exposes an additional\n * parameter; see `forceRemove`.\n *\n * @param {string|string[]} clientIds      Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious True if the previous block\n *                                         or the immediate parent\n *                                         (if no previous block exists)\n *                                         should be selected\n *                                         when a block is removed.\n * @param {boolean}         forceRemove    Whether to force the operation,\n *                                         bypassing any checks for certain\n *                                         block types.\n */\nexport const privateRemoveBlocks =\n\t( clientIds, selectPrevious = true, forceRemove = false ) =>\n\t( { select, dispatch } ) => {\n\t\tif ( ! clientIds || ! clientIds.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tclientIds = castArray( clientIds );\n\t\tconst rootClientId = select.getBlockRootClientId( clientIds[ 0 ] );\n\t\tconst canRemoveBlocks = select.canRemoveBlocks(\n\t\t\tclientIds,\n\t\t\trootClientId\n\t\t);\n\n\t\tif ( ! canRemoveBlocks ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// In certain editing contexts, we'd like to prevent accidental removal\n\t\t// of important blocks. For example, in the site editor, the Query Loop\n\t\t// block is deemed important. In such cases, we'll ask the user for\n\t\t// confirmation that they intended to remove such block(s). However,\n\t\t// the editor instance is responsible for presenting those confirmation\n\t\t// prompts to the user. Any instance opting into removal prompts must\n\t\t// register using `setBlockRemovalRules()`.\n\t\t//\n\t\t// @see https://github.com/WordPress/gutenberg/pull/51145\n\t\tconst rules = ! forceRemove && select.getBlockRemovalRules();\n\t\tif ( rules ) {\n\t\t\tconst blockNamesForPrompt = new Set();\n\n\t\t\t// Given a list of client IDs of blocks that the user intended to\n\t\t\t// remove, perform a tree search (BFS) to find all block names\n\t\t\t// corresponding to \"important\" blocks, i.e. blocks that require a\n\t\t\t// removal prompt.\n\t\t\tconst queue = [ ...clientIds ];\n\t\t\twhile ( queue.length ) {\n\t\t\t\tconst clientId = queue.shift();\n\t\t\t\tconst blockName = select.getBlockName( clientId );\n\t\t\t\tif ( rules[ blockName ] ) {\n\t\t\t\t\tblockNamesForPrompt.add( blockName );\n\t\t\t\t}\n\t\t\t\tconst innerBlocks = select.getBlockOrder( clientId );\n\t\t\t\tqueue.push( ...innerBlocks );\n\t\t\t}\n\n\t\t\t// If any such blocks were found, trigger the removal prompt and\n\t\t\t// skip any other steps (thus postponing actual removal).\n\t\t\tif ( blockNamesForPrompt.size ) {\n\t\t\t\tdispatch(\n\t\t\t\t\tdisplayBlockRemovalPrompt(\n\t\t\t\t\t\tclientIds,\n\t\t\t\t\t\tselectPrevious,\n\t\t\t\t\t\tArray.from( blockNamesForPrompt )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif ( selectPrevious ) {\n\t\t\tdispatch.selectPreviousBlock( clientIds[ 0 ], selectPrevious );\n\t\t}\n\n\t\tdispatch( { type: 'REMOVE_BLOCKS', clientIds } );\n\n\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t// always a default block if the last of the blocks have been removed.\n\t\tdispatch( ensureDefaultBlock() );\n\t};\n\n/**\n * Action which will insert a default block insert action if there\n * are no other blocks at the root of the editor. This action should be used\n * in actions which may result in no blocks remaining in the editor (removal,\n * replacement, etc).\n */\nexport const ensureDefaultBlock =\n\t() =>\n\t( { select, dispatch } ) => {\n\t\t// To avoid a focus loss when removing the last block, assure there is\n\t\t// always a default block if the last of the blocks have been removed.\n\t\tconst count = select.getBlockCount();\n\t\tif ( count > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there's an custom appender, don't insert default block.\n\t\t// We have to remember to manually move the focus elsewhere to\n\t\t// prevent it from being lost though.\n\t\tconst { __unstableHasCustomAppender } = select.getSettings();\n\t\tif ( __unstableHasCustomAppender ) {\n\t\t\treturn;\n\t\t}\n\n\t\tdispatch.insertDefaultBlock();\n\t};\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be displayed.\n *\n * Contrast with `setBlockRemovalRules`.\n *\n * @param {string|string[]} clientIds           Client IDs of blocks to remove.\n * @param {boolean}         selectPrevious      True if the previous block\n *                                              or the immediate parent\n *                                              (if no previous block exists)\n *                                              should be selected\n *                                              when a block is removed.\n * @param {string[]}        blockNamesForPrompt Names of the blocks that\n *                                              triggered the need for\n *                                              confirmation before removal.\n *\n * @return {Object} Action object.\n */\nfunction displayBlockRemovalPrompt(\n\tclientIds,\n\tselectPrevious,\n\tblockNamesForPrompt\n) {\n\treturn {\n\t\ttype: 'DISPLAY_BLOCK_REMOVAL_PROMPT',\n\t\tclientIds,\n\t\tselectPrevious,\n\t\tblockNamesForPrompt,\n\t};\n}\n\n/**\n * Returns an action object used in signalling that a block removal prompt must\n * be cleared, either be cause the user has confirmed or canceled the request\n * for removal.\n *\n * @return {Object} Action object.\n */\nexport function clearBlockRemovalPrompt() {\n\treturn {\n\t\ttype: 'CLEAR_BLOCK_REMOVAL_PROMPT',\n\t};\n}\n\n/**\n * Returns an action object used to set up any rules that a block editor may\n * provide in order to prevent a user from accidentally removing certain\n * blocks. These rules are then used to display a confirmation prompt to the\n * user. For instance, in the Site Editor, the Query Loop block is important\n * enough to warrant such confirmation.\n *\n * IMPORTANT: Registering rules implicitly signals to the `privateRemoveBlocks`\n * action that the editor will be responsible for displaying block removal\n * prompts and confirming deletions. This action is meant to be used by\n * component `BlockRemovalWarningModal` only.\n *\n * The data is a record whose keys are block types (e.g. 'core/query') and\n * whose values are the explanation to be shown to users (e.g. 'Query Loop\n * displays a list of posts or pages.').\n *\n * Contrast with `displayBlockRemovalPrompt`.\n *\n * @param {Record<string,string>|false} rules Block removal rules.\n * @return {Object} Action object.\n */\nexport function setBlockRemovalRules( rules = false ) {\n\treturn {\n\t\ttype: 'SET_BLOCK_REMOVAL_RULES',\n\t\trules,\n\t};\n}\n"]}