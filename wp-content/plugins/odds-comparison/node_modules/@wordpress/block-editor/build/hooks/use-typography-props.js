"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTypographyClassesAndStyles = getTypographyClassesAndStyles;

var _classnames = _interopRequireDefault(require("classnames"));

var _style = require("./style");

var _fontSizes = require("../components/font-sizes");

var _typographyUtils = require("../components/global-styles/typography-utils");

var _object = require("../utils/object");

/**
 * External dependencies
 */

/**
 * Internal dependencies
 */

/*
 * This utility is intended to assist where the serialization of the typography
 * block support is being skipped for a block but the typography related CSS
 * styles still need to be generated so they can be applied to inner elements.
 */

/**
 * Provides the CSS class names and inline styles for a block's typography support
 * attributes.
 *
 * @param {Object}         attributes Block attributes.
 * @param {Object|boolean} settings   Merged theme.json settings
 *
 * @return {Object} Typography block support derived CSS classes & styles.
 */
function getTypographyClassesAndStyles(attributes, settings) {
  let typographyStyles = attributes?.style?.typography || {};
  const fluidTypographySettings = (0, _typographyUtils.getFluidTypographyOptionsFromSettings)(settings);
  typographyStyles = { ...typographyStyles,
    fontSize: (0, _typographyUtils.getTypographyFontSizeValue)({
      size: attributes?.style?.typography?.fontSize
    }, fluidTypographySettings)
  };
  const style = (0, _style.getInlineStyles)({
    typography: typographyStyles
  });
  const fontFamilyClassName = !!attributes?.fontFamily ? `has-${(0, _object.kebabCase)(attributes.fontFamily)}-font-family` : '';
  const className = (0, _classnames.default)(fontFamilyClassName, (0, _fontSizes.getFontSizeClass)(attributes?.fontSize));
  return {
    className,
    style
  };
}
//# sourceMappingURL=use-typography-props.js.map