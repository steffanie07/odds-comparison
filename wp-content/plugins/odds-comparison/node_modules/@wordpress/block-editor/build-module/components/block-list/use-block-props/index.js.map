{"version":3,"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/index.js"],"names":["classnames","useContext","__","sprintf","__unstableGetBlockProps","getBlockProps","getBlockType","store","blocksStore","useMergeRefs","useDisabled","useSelect","warning","useMovingAnimation","BlockListBlockContext","useFocusFirstElement","useIsHovered","useBlockEditContext","useBlockClassNames","useBlockDefaultClassName","useBlockCustomClassName","useBlockMovingModeClassNames","useFocusHandler","useEventHandlers","useNavModeExit","useBlockRefProvider","useIntersectionObserver","blockEditorStore","useBlockOverlayActive","unlock","BLOCK_ANIMATION_THRESHOLD","useBlockProps","props","__unstableIsHtml","clientId","className","wrapperProps","isAligned","index","mode","name","blockApiVersion","blockTitle","isPartOfSelection","adjustScrolling","enableAnimation","isSubtreeDisabled","select","getBlockAttributes","getBlockIndex","getBlockMode","getBlockName","isTyping","getGlobalBlockCount","isBlockSelected","isBlockMultiSelected","isAncestorMultiSelected","isFirstMultiSelectedBlock","isBlockSubtreeDisabled","getActiveBlockVariation","isSelected","isPartOfMultiSelection","blockName","blockType","attributes","match","apiVersion","title","hasOverlay","blockLabel","htmlSuffix","mergedRefs","ref","triggerAnimationOnChange","isDisabled","blockEditContext","tabIndex","id","role","inert","undefined","style","save"],"mappings":"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","sourcesContent":["/**\n * External dependencies\n */\nimport classnames from 'classnames';\n\n/**\n * WordPress dependencies\n */\nimport { useContext } from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport {\n\t__unstableGetBlockProps as getBlockProps,\n\tgetBlockType,\n\tstore as blocksStore,\n} from '@wordpress/blocks';\nimport { useMergeRefs, useDisabled } from '@wordpress/compose';\nimport { useSelect } from '@wordpress/data';\nimport warning from '@wordpress/warning';\n\n/**\n * Internal dependencies\n */\nimport useMovingAnimation from '../../use-moving-animation';\nimport { BlockListBlockContext } from '../block-list-block-context';\nimport { useFocusFirstElement } from './use-focus-first-element';\nimport { useIsHovered } from './use-is-hovered';\nimport { useBlockEditContext } from '../../block-edit/context';\nimport { useBlockClassNames } from './use-block-class-names';\nimport { useBlockDefaultClassName } from './use-block-default-class-name';\nimport { useBlockCustomClassName } from './use-block-custom-class-name';\nimport { useBlockMovingModeClassNames } from './use-block-moving-mode-class-names';\nimport { useFocusHandler } from './use-focus-handler';\nimport { useEventHandlers } from './use-selected-block-event-handlers';\nimport { useNavModeExit } from './use-nav-mode-exit';\nimport { useBlockRefProvider } from './use-block-refs';\nimport { useIntersectionObserver } from './use-intersection-observer';\nimport { store as blockEditorStore } from '../../../store';\nimport useBlockOverlayActive from '../../block-content-overlay';\nimport { unlock } from '../../../lock-unlock';\n\n/**\n * If the block count exceeds the threshold, we disable the reordering animation\n * to avoid laginess.\n */\nconst BLOCK_ANIMATION_THRESHOLD = 200;\n\n/**\n * This hook is used to lightly mark an element as a block element. The element\n * should be the outermost element of a block. Call this hook and pass the\n * returned props to the element to mark as a block. If you define a ref for the\n * element, it is important to pass the ref to this hook, which the hook in turn\n * will pass to the component through the props it returns. Optionally, you can\n * also pass any other props through this hook, and they will be merged and\n * returned.\n *\n * @param {Object}  props                    Optional. Props to pass to the element. Must contain\n *                                           the ref if one is defined.\n * @param {Object}  options                  Options for internal use only.\n * @param {boolean} options.__unstableIsHtml\n *\n * @return {Object} Props to pass to the element to mark as a block.\n */\nexport function useBlockProps( props = {}, { __unstableIsHtml } = {} ) {\n\tconst {\n\t\tclientId,\n\t\tclassName,\n\t\twrapperProps = {},\n\t\tisAligned,\n\t} = useContext( BlockListBlockContext );\n\tconst {\n\t\tindex,\n\t\tmode,\n\t\tname,\n\t\tblockApiVersion,\n\t\tblockTitle,\n\t\tisPartOfSelection,\n\t\tadjustScrolling,\n\t\tenableAnimation,\n\t\tisSubtreeDisabled,\n\t} = useSelect(\n\t\t( select ) => {\n\t\t\tconst {\n\t\t\t\tgetBlockAttributes,\n\t\t\t\tgetBlockIndex,\n\t\t\t\tgetBlockMode,\n\t\t\t\tgetBlockName,\n\t\t\t\tisTyping,\n\t\t\t\tgetGlobalBlockCount,\n\t\t\t\tisBlockSelected,\n\t\t\t\tisBlockMultiSelected,\n\t\t\t\tisAncestorMultiSelected,\n\t\t\t\tisFirstMultiSelectedBlock,\n\t\t\t\tisBlockSubtreeDisabled,\n\t\t\t} = unlock( select( blockEditorStore ) );\n\t\t\tconst { getActiveBlockVariation } = select( blocksStore );\n\t\t\tconst isSelected = isBlockSelected( clientId );\n\t\t\tconst isPartOfMultiSelection =\n\t\t\t\tisBlockMultiSelected( clientId ) ||\n\t\t\t\tisAncestorMultiSelected( clientId );\n\t\t\tconst blockName = getBlockName( clientId );\n\t\t\tconst blockType = getBlockType( blockName );\n\t\t\tconst attributes = getBlockAttributes( clientId );\n\t\t\tconst match = getActiveBlockVariation( blockName, attributes );\n\n\t\t\treturn {\n\t\t\t\tindex: getBlockIndex( clientId ),\n\t\t\t\tmode: getBlockMode( clientId ),\n\t\t\t\tname: blockName,\n\t\t\t\tblockApiVersion: blockType?.apiVersion || 1,\n\t\t\t\tblockTitle: match?.title || blockType?.title,\n\t\t\t\tisPartOfSelection: isSelected || isPartOfMultiSelection,\n\t\t\t\tadjustScrolling:\n\t\t\t\t\tisSelected || isFirstMultiSelectedBlock( clientId ),\n\t\t\t\tenableAnimation:\n\t\t\t\t\t! isTyping() &&\n\t\t\t\t\tgetGlobalBlockCount() <= BLOCK_ANIMATION_THRESHOLD,\n\t\t\t\tisSubtreeDisabled: isBlockSubtreeDisabled( clientId ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst hasOverlay = useBlockOverlayActive( clientId );\n\n\t// translators: %s: Type of block (i.e. Text, Image etc)\n\tconst blockLabel = sprintf( __( 'Block: %s' ), blockTitle );\n\tconst htmlSuffix = mode === 'html' && ! __unstableIsHtml ? '-visual' : '';\n\tconst mergedRefs = useMergeRefs( [\n\t\tprops.ref,\n\t\tuseFocusFirstElement( clientId ),\n\t\tuseBlockRefProvider( clientId ),\n\t\tuseFocusHandler( clientId ),\n\t\tuseEventHandlers( clientId ),\n\t\tuseNavModeExit( clientId ),\n\t\tuseIsHovered(),\n\t\tuseIntersectionObserver(),\n\t\tuseMovingAnimation( {\n\t\t\tisSelected: isPartOfSelection,\n\t\t\tadjustScrolling,\n\t\t\tenableAnimation,\n\t\t\ttriggerAnimationOnChange: index,\n\t\t} ),\n\t\tuseDisabled( { isDisabled: ! hasOverlay } ),\n\t] );\n\n\tconst blockEditContext = useBlockEditContext();\n\t// Ensures it warns only inside the `edit` implementation for the block.\n\tif ( blockApiVersion < 2 && clientId === blockEditContext.clientId ) {\n\t\twarning(\n\t\t\t`Block type \"${ name }\" must support API version 2 or higher to work correctly with \"useBlockProps\" method.`\n\t\t);\n\t}\n\n\treturn {\n\t\ttabIndex: 0,\n\t\t...wrapperProps,\n\t\t...props,\n\t\tref: mergedRefs,\n\t\tid: `block-${ clientId }${ htmlSuffix }`,\n\t\trole: 'document',\n\t\t'aria-label': blockLabel,\n\t\t'data-block': clientId,\n\t\t'data-type': name,\n\t\t'data-title': blockTitle,\n\t\tinert: isSubtreeDisabled ? 'true' : undefined,\n\t\tclassName: classnames(\n\t\t\t// The wp-block className is important for editor styles.\n\t\t\tclassnames( 'block-editor-block-list__block', {\n\t\t\t\t'wp-block': ! isAligned,\n\t\t\t\t'has-block-overlay': hasOverlay,\n\t\t\t} ),\n\t\t\tclassName,\n\t\t\tprops.className,\n\t\t\twrapperProps.className,\n\t\t\tuseBlockClassNames( clientId ),\n\t\t\tuseBlockDefaultClassName( clientId ),\n\t\t\tuseBlockCustomClassName( clientId ),\n\t\t\tuseBlockMovingModeClassNames( clientId )\n\t\t),\n\t\tstyle: { ...wrapperProps.style, ...props.style },\n\t};\n}\n\n/**\n * Call within a save function to get the props for the block wrapper.\n *\n * @param {Object} props Optional. Props to pass to the element.\n */\nuseBlockProps.save = getBlockProps;\n"]}