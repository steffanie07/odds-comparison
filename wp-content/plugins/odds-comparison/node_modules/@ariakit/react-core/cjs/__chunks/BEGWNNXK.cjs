"use strict";Object.defineProperty(exports, "__esModule", {value: true});



var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');



var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/utils/store.tsx
var _react = require('react');
var _misc = require('@ariakit/core/utils/misc');
var _indexjs = require('use-sync-external-store/shim/index.js');
var noopSubscribe = () => () => {
};
function useStoreState(store, keyOrSelector = _misc.identity) {
  const getSnapshot = () => {
    if (!store)
      return;
    const state = store.getState();
    const selector = typeof keyOrSelector === "function" ? keyOrSelector : null;
    const key = typeof keyOrSelector === "string" ? keyOrSelector : null;
    if (selector)
      return selector(state);
    if (!key)
      return;
    if (!_misc.hasOwnProperty.call(void 0, state, key))
      return;
    return state[key];
  };
  return _indexjs.useSyncExternalStore.call(void 0, 
    (store == null ? void 0 : store.subscribe) || noopSubscribe,
    getSnapshot,
    getSnapshot
  );
}
function useStoreProps(store, props, key, setKey) {
  const value = _misc.hasOwnProperty.call(void 0, props, key) ? props[key] : void 0;
  const propsRef = _5WLTMVVQcjs.useLiveRef.call(void 0, {
    value,
    setValue: setKey ? props[setKey] : void 0
  });
  _5WLTMVVQcjs.useSafeLayoutEffect.call(void 0, () => {
    return store.sync(
      (state, prev) => {
        const { value: value2, setValue } = propsRef.current;
        if (!setValue)
          return;
        if (state[key] === prev[key])
          return;
        if (state[key] === value2)
          return;
        setValue(state[key]);
      },
      [key]
    );
  }, [store, key]);
  _5WLTMVVQcjs.useSafeLayoutEffect.call(void 0, () => {
    return store.sync(() => {
      if (value === void 0)
        return;
      store.setState(key, value);
    }, [key]);
  }, [store, key, value]);
}
function useStore(createStore) {
  const store = _5WLTMVVQcjs.useLazyValue.call(void 0, createStore);
  _5WLTMVVQcjs.useSafeLayoutEffect.call(void 0, () => store.init(), [store]);
  const useState = _react.useCallback.call(void 0, 
    (keyOrSelector) => useStoreState(store, keyOrSelector),
    [store]
  );
  return _react.useMemo.call(void 0, () => _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {}, store), { useState }), [store, useState]);
}





exports.useStoreState = useStoreState; exports.useStoreProps = useStoreProps; exports.useStore = useStore;
