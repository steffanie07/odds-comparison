import {
  createStore,
  mergeStore
} from "./FQL4TRMX.js";
import {
  defaultValue
} from "./WVTCK5PV.js";
import {
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/disclosure/disclosure-store.ts
function createDisclosureStore(props = {}) {
  var _a;
  const store = mergeStore(
    props.store,
    (_a = props.disclosure) == null ? void 0 : _a.omit("contentElement", "disclosureElement")
  );
  const syncState = store == null ? void 0 : store.getState();
  const open = defaultValue(
    props.open,
    syncState == null ? void 0 : syncState.open,
    props.defaultOpen,
    false
  );
  const animated = defaultValue(props.animated, syncState == null ? void 0 : syncState.animated, false);
  const initialState = {
    open,
    animated,
    animating: !!animated && open,
    mounted: open,
    contentElement: defaultValue(syncState == null ? void 0 : syncState.contentElement, null),
    disclosureElement: defaultValue(syncState == null ? void 0 : syncState.disclosureElement, null)
  };
  const disclosure = createStore(initialState, store);
  disclosure.setup(
    () => disclosure.sync(
      (state) => {
        if (state.animated)
          return;
        disclosure.setState("animating", false);
      },
      ["animated", "animating"]
    )
  );
  disclosure.setup(
    () => disclosure.sync(
      (state, prev) => {
        if (!state.animated)
          return;
        const mounting = state === prev;
        const animating = mounting ? state.open : state.open !== prev.open;
        disclosure.setState("animating", animating);
      },
      ["open", "animated"]
    )
  );
  disclosure.setup(
    () => disclosure.sync(
      (state) => {
        disclosure.setState("mounted", state.open || state.animating);
      },
      ["open", "animating"]
    )
  );
  return __spreadProps(__spreadValues({}, disclosure), {
    setOpen: (value) => disclosure.setState("open", value),
    show: () => disclosure.setState("open", true),
    hide: () => disclosure.setState("open", false),
    toggle: () => disclosure.setState("open", (open2) => !open2),
    stopAnimation: () => disclosure.setState("animating", false),
    setContentElement: (value) => disclosure.setState("contentElement", value),
    setDisclosureElement: (value) => disclosure.setState("disclosureElement", value)
  });
}

export {
  createDisclosureStore
};
